-- phpMyAdmin SQL Dump
-- version 4.5.4.1deb2ubuntu2.1
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Nov 11, 2022 at 07:03 AM
-- Server version: 5.7.33-0ubuntu0.16.04.1
-- PHP Version: 7.0.33-0ubuntu0.16.04.16

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `digitalink_newera`
--

DELIMITER $$
--
-- Procedures
--
CREATE DEFINER=`root`@`localhost` PROCEDURE `add_application` (IN `p_application_number` VARCHAR(250), IN `p_lead_id` INT(11), IN `p_year_id` INT(11), IN `p_branch_id` INT(11), IN `p_student_firstname` VARCHAR(250), IN `p_student_middlename` VARCHAR(250), IN `p_student_lastname` VARCHAR(250), IN `p_course_id` INT(11), IN `p_gender` ENUM('Male','Female'), IN `p_dob` DATE, IN `p_student_email` VARCHAR(250), IN `p_previous_school` VARCHAR(250), IN `p_area_id` INT(11), IN `p_landmark` VARCHAR(250), IN `p_address` VARCHAR(250), IN `p_present_area_id` INT(11), IN `p_present_landmark` VARCHAR(250), IN `p_present_address` VARCHAR(250), IN `p_pincode` VARCHAR(50), IN `p_religion_id` INT(11), IN `p_cast_id` INT(11), IN `p_nationality` INT(11), IN `p_mother_tongue` INT(11), IN `p_referrence_name` VARCHAR(250), IN `p_application_status` ENUM('application','admission'), IN `p_created_date` DATETIME, IN `p_created_by` INT(11), OUT `p_result` VARCHAR(250), IN `p_student_photo` VARCHAR(250))  BEGIN

	
Declare v_country_id int;
	Declare v_state_id int;
	Declare v_city_id int;
	DECLARE v_status int DEFAULT 0;
	






		SELECT 
			country_id,
			state_id,
			city_id
		INTO
			v_country_id,
			v_state_id,
			v_city_id

		FROM
			tbl_area 
		WHERE 
			area_id = p_area_id;



		INSERT INTO 
					tbl_applications (application_number,
                                    lead_id,
                                    year_id,
                                    branch_id,
                                    student_firstname,
                                    student_middlename,
                                    student_lastname,
                                    course_id,
                                    gender,
                                    dob,
                                    student_email,
                                    country_id,
                                    previous_school,
                                    state_id,
                                    city_id,
                                    area_id,
                                    landmark,
                                    address,
                                    present_country_id,
                                    present_state_id,
                                    present_city_id,
                                    present_area_id,
                                    present_landmark,
                                    present_address,
                                    pincode,
                                    religion_id,
                                    cast_id,
                                    nationality,
                                    mother_tongue,
                                    referrence_name,
                                    application_status,
                                    created_date,
                                    created_by,
                                    status,
                                    student_photo)
		VALUES
					(p_application_number,
                    p_lead_id,
                    p_year_id,
                    p_branch_id,
                    p_student_firstname,
                    p_student_middlename,
                    p_student_lastname,
                    p_course_id,
                    p_gender,
                    p_dob,
                    p_student_email,
                    v_country_id,
                    p_previous_school,
                    v_state_id,
                    v_city_id,
                    p_area_id,
                    p_landmark,
                    p_address,
                    v_country_id,
                    v_state_id,
                    v_city_id,
                    p_present_area_id,
                    p_present_landmark,
                    p_present_address,
                    p_pincode,
                    p_religion_id,
                    p_cast_id,
                    p_nationality,
                    p_mother_tongue,
                    p_referrence_name,
                    p_application_status,
                    p_created_date,

                    p_created_by,
                    '0',
                    p_student_photo);

                

		
		
		
		IF row_count() = 0 THEN
                SET p_result = "Sorry!Please try once again";
                ELSE
                       SET p_result = LAST_INSERT_ID();
				UPDATE tbl_leads SET lead_status= 'application' WHERE lead_id = p_lead_id;
                END IF;
	







END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_application1` (IN `p_application_number` VARCHAR(250), IN `p_lead_id` INT(11), IN `p_year_id` INT(11), IN `p_branch_id` INT(11), IN `p_student_firstname` VARCHAR(250), IN `p_student_middlename` VARCHAR(250), IN `p_student_lastname` VARCHAR(250), IN `p_course_id` INT(11), IN `p_gender` ENUM('Male','Female'), IN `p_dob` DATE, IN `p_student_email` VARCHAR(250), IN `p_previous_school` VARCHAR(250), IN `p_area_id` INT(11), IN `p_landmark` VARCHAR(250), IN `p_address` VARCHAR(250), IN `p_present_area_id` INT(11), IN `p_present_landmark` VARCHAR(250), IN `p_present_address` VARCHAR(250), IN `p_pincode` VARCHAR(50), IN `p_religion_id` INT(11), IN `p_cast_id` INT(11), IN `p_nationality` INT(11), IN `p_mother_tongue` INT(11), IN `p_referrence_name` VARCHAR(250), IN `p_application_status` ENUM('application','admission'), IN `p_created_date` DATETIME, IN `p_created_by` INT(11), OUT `p_result` VARCHAR(250), IN `p_student_photo` VARCHAR(250), IN `p_subcast_id` INT(11), IN `p_application_type` INT(11))  BEGIN

	
Declare v_country_id int;
	Declare v_state_id int;
	Declare v_city_id int;
	

		SELECT 
			country_id,
			state_id,
			city_id
		INTO
			v_country_id,
			v_state_id,
			v_city_id

		FROM
			tbl_area 
		WHERE 
			area_id = p_area_id;

		INSERT INTO 
					tbl_applications (application_number,
                                    lead_id,
                                    year_id,
                                    branch_id,
                                    student_firstname,
                                    student_middlename,
                                    student_lastname,
                                    course_id,
                                    gender,
                                    dob,
                                    student_email,
                                    country_id,
                                    previous_school,
                                    state_id,
                                    city_id,
                                    area_id,
                                    landmark,
                                    address,
                                    present_country_id,
                                    present_state_id,
                                    present_city_id,
                                    present_area_id,
                                    present_landmark,
                                    present_address,
                                    pincode,
                                    religion_id,
                                    cast_id,
                                    nationality,
                                    mother_tongue,
                                    referrence_name,
                                    application_status,
                                    created_date,
                                    created_by,
                                    status,
                                    student_photo,
                                     subcast_id,
                                     application_type)
		VALUES
					(p_application_number,
                    p_lead_id,
                    p_year_id,
                    p_branch_id,
                    p_student_firstname,
                    p_student_middlename,
                    p_student_lastname,
                    p_course_id,
                    p_gender,
                    p_dob,
                    p_student_email,
                    v_country_id,
                    p_previous_school,
                    v_state_id,
                    v_city_id,
                    p_area_id,
                    p_landmark,
                    p_address,
                    v_country_id,
                    v_state_id,
                    v_city_id,
                    p_present_area_id,
                    p_present_landmark,
                    p_present_address,
                    p_pincode,
                    p_religion_id,
                    p_cast_id,
                    p_nationality,
                    p_mother_tongue,
                    p_referrence_name,
                    p_application_status,
                    p_created_date,
                    p_created_by,
                    '0',
                    p_student_photo,
                    p_subcast_id,
                    p_application_type);
		
		IF row_count() = 0 THEN
                SET p_result = "Sorry!Please try once again";
                ELSE
                       SET p_result = LAST_INSERT_ID();
				UPDATE tbl_leads SET lead_status= 'application' WHERE lead_id = p_lead_id;
                END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_applicationFollowup` (IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_application_id` INT(11), IN `p_followup_by` VARCHAR(250), IN `p_followup_date` DATE, IN `p_next_followup_date` DATETIME, IN `p_comments` TEXT, IN `p_followup_status` VARCHAR(250), IN `p_created_date` DATETIME, IN `p_created_by` INT(11), OUT `p_result` VARCHAR(250))  BEGIN

UPDATE tbl_application_followups SET followed_status = '0' WHERE application_id = p_application_id;
	
INSERT INTO
					tbl_application_followups
                    (branch_id,
					 year_id,
					 application_id,
					 followup_by,
					 followup_date,
                     next_followup_date,
					 comments,
					 followup_status,
					 created_date,
					 created_by,
                     followed_status
					 )
		VALUES 
				 (p_branch_id,
                  p_year_id,
                  p_application_id,
                  p_followup_by,
                  p_followup_date,
                  p_next_followup_date,
                  p_comments,
                  p_followup_status,
                  p_created_date,
                  p_created_by,
                  '1'
                 );
                 
	
		 IF row_count() = 0 THEN
                        SET p_result = "Record not updated ! Please try once again.";
                ELSE
                       SET p_result = "Sucess";
		 END IF;
   



END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_bookBorrow` (IN `p_book_id` INT(11), IN `p_student_id` INT(11), IN `p_emp_id` INT(11), IN `p_student_academic_id` INT(11), IN `p_issue_date` DATETIME, IN `p_due_date` DATETIME, IN `p_book_status` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN
  
DECLARE p_book_sequence_id INT DEFAULT 0;

SELECT  
      book_sequence_id 
INTO 
      p_book_sequence_id
FROM 
      tbl_book_sequence 
WHERE  
      book_sequence_id 
NOT IN 
      (SELECT 
              book_sequence_id 
       FROM 
              tbl_book_borrow_return 
       WHERE 
              book_id = p_book_id 
       AND 
              book_status =0) LIMIT 0,1;



      INSERT INTO
            tbl_book_borrow_return
          ( book_id,
            student_id,
            emp_id,
            student_academic_id,
            issue_date,
            due_date,
            book_status,
                      book_sequence_id,
            status,
            branch_id,
            created_by,
            created_date
          )
      VALUES
          ( p_book_id,
            p_student_id,
            p_emp_id,
            p_student_academic_id,
            p_issue_date,
            p_due_date,
            p_book_status,
                      p_book_sequence_id,
            p_status,
            p_branch_id,
            p_created_by,
            p_created_date          
          );

          IF row_count() = 0 THEN
          
            SET p_result = "Sorry!Please try once again";
  
                  ELSE
            
                       SET p_result = "Book added Sucessfully";
        
                  END IF;   


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_bookReturn` (IN `p_borrow_return_id` INT(11), IN `p_book_id` INT(11), IN `p_return_date` DATETIME, IN `p_fine_amount` FLOAT, IN `p_remarks` VARCHAR(150), IN `p_book_status` INT(11), OUT `p_result` VARCHAR(250), IN `p_book_condition` INT(11), IN `p_book_sequence_id` INT(11))  BEGIN

   UPDATE
              tbl_book_borrow_return
      SET         
              return_date  =  p_return_date,
              fine_amount  =  p_fine_amount,
              remarks  =  p_remarks,
              book_status  =  p_book_status,
              book_condition=p_book_condition
      WHERE
              borrow_return_id  =  p_borrow_return_id;


      

      IF row_count() = 0 THEN
          
            SET p_result = "Sorry!Please try once again";
  
            ELSE
          UPDATE 
                        tbl_book_sequence
                SET 
                       book_condition =  p_book_condition
                WHERE  
                        book_sequence_id = p_book_sequence_id;    
            
                    SET p_result = "Updated Sucessfully";
        
            END IF;  

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_books` (IN `p_book_isbn_no` VARCHAR(100), IN `p_book_name` VARCHAR(150), IN `p_accession_number` INT(11), IN `p_subject_id` INT(11), IN `p_book_category_id` INT(11), IN `p_book_author` VARCHAR(150), IN `p_book_edition` VARCHAR(50), IN `p_book_publisher` VARCHAR(50), IN `p_shelf_rack_id` INT(11), IN `p_position` INT(11), IN `p_currency_id` INT(11), IN `p_book_cost` FLOAT, IN `p_book_quantity` INT, IN `p_language_id` INT(11), IN `p_book_condition` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, IN `p_book_type` INT(11), OUT `p_result` VARCHAR(250))  BEGIN


DECLARE x  INT;
DECLARE v_book_id INT ;

INSERT INTO 
              tbl_books
              (book_isbn_no,
          book_name,
          accession_number,
          subject_id,
          book_category_id,
          book_author,
          book_edition,
                    book_publisher,
          shelf_rack_id,
          position,
          currency_id,
          book_cost,
                    book_quantity,
          language_id,
          book_condition,
          status,
          branch_id,
          created_by,
          created_date,
			book_type
                                )
VALUES 
          (p_book_isbn_no,
          p_book_name,
          p_accession_number,
          p_subject_id,
          p_book_category_id,
          p_book_author,
          p_book_edition,
                    p_book_publisher,
          p_shelf_rack_id,
          p_position,
          p_currency_id,
          p_book_cost,
                    p_book_quantity,
          p_language_id,
          p_book_condition,
          p_status,
          p_branch_id,
          p_created_by,
          p_created_date,
          p_book_type);

          IF row_count() = 0 THEN
          
                  SET p_result = "Sorry!Please try once again";
  
                  ELSE


 
 SET x = 1;
 SET v_book_id = LAST_INSERT_ID();
 
 WHILE x  <= p_book_quantity DO

INSERT INTO 
              tbl_book_sequence

              (book_id,
          book_condition,
                    branch_id,
          created_by,
          created_date
          
                                )
VALUES 
          (v_book_id,
          p_book_condition,
          p_branch_id,
          p_created_by,
          p_created_date);


 SET  x = x + 1; 
 END WHILE;
            
                       SET p_result = "Book added Sucessfully";
        
                  END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_branch` (IN `p_branch_name` VARCHAR(250), IN `p_branch_code` VARCHAR(10), IN `p_country_id` INT, IN `p_state_id` INT, IN `p_city_id` INT, IN `p_area_id` INT, IN `p_admin_id` INT, IN `p_branch_status` ENUM('0','1'), IN `p_branch_logo` VARCHAR(250), IN `p_address` VARCHAR(250), IN `p_landmark` VARCHAR(250), IN `p_pincode` VARCHAR(10), IN `p_phone_1` VARCHAR(10), IN `p_phone_2` VARCHAR(10), IN `p_fax` VARCHAR(20), IN `p_enq_required` ENUM('0','1'), IN `p_app_required` ENUM('0','1'), IN `p_created_date` DATETIME, IN `p_created_by` INT, IN `p_modified_date` DATETIME, IN `p_modified_by` INT, OUT `p_result` INT)  NO SQL
BEGIN

INSERT INTO tbl_branches
	(branch_name, branch_code, branch_status, branch_logo, admin_id, country_id, state_id, city_id, area_id, address, phone_1, phone_2, fax, landmark, pincode, enq_required, app_required, created_date, created_by, modified_date, modified_by) 
VALUES (p_branch_name, p_branch_code, p_branch_status, branch_logo, p_admin_id, p_country_id, p_state_id, p_city_id, p_area_id, p_address, p_phone_1, p_phone_2, p_fax, p_landmark, p_pincode, p_enq_required, p_app_required, p_created_date, p_created_by, p_modified_date, p_modified_by);

SET p_result = LAST_INSERT_ID();

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_campaign` (IN `p_campaign_name` VARCHAR(250), IN `p_campaign_supervisor` VARCHAR(100), IN `p_start_date` DATE, IN `p_end_date` DATE, IN `p_address` VARCHAR(250), IN `p_location` VARCHAR(250), IN `p_country_id` INT(11), IN `p_state_id` INT(11), IN `p_city_id` INT(11), IN `p_area_id` INT(11), IN `p_pincode` INT(11), IN `p_campaign_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(200), OUT `p_result_flag` INT, IN `p_descriptions` VARCHAR(250))  BEGIN
INSERT INTO
						tbl_campaigns
					(campaign_name,
					campaign_supervisor,
					start_date,
					end_date,
					address,
					location,
                    descriptions,
					country_id,
					state_id,
					city_id,
					area_id,
					pincode,
                   	campaign_status,
					branch_id,
					created_by,
					created_date
					)
			VALUES
					(p_campaign_name,
					p_campaign_supervisor,
					p_start_date,
					p_end_date,
					p_address,
					p_location,
                    P_descriptions,
					p_country_id,
					p_state_id,
					p_city_id,
					p_area_id,
					p_pincode,
                   	p_campaign_status,
					p_branch_id,
					p_created_by,
					p_created_date);

				IF row_count() = 0 THEN
					SET p_result_flag = 0;
               		 SET p_result = "Sorry!Please try once again";
                ELSE
					   SET p_result_flag = 1;
                       SET p_result = "Campaing created Sucessfully";
				
                END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_CampaignContact` (IN `p_group_id` INT(25), IN `p_first_name` VARCHAR(255), IN `p_last_name` VARCHAR(255), IN `p_job_title` VARCHAR(255), IN `p_company` VARCHAR(255), IN `p_email` VARCHAR(255), IN `p_mobile` VARCHAR(255), IN `p_work_phone` VARCHAR(255), IN `p_home_phone` VARCHAR(255), IN `p_address` TEXT, IN `p_owner` VARCHAR(50), IN `p_source` VARCHAR(50), IN `p_status` INT(11), IN `p_branch_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(255))  NO SQL
BEGIN
  INSERT 
    INTO tbl_campaign_contact(group_id,first_name,last_name,job_title,company,email,
                      mobile,work_phone,home_phone,address,owner,
                      source,status,branch_id,created_by,created_date)
    VALUES (p_group_id,p_first_name,p_last_name,p_job_title,p_company,p_email,
          p_mobile,p_work_phone,p_home_phone,p_address,
            p_owner,p_source,p_status,p_branch_id,
            p_created_by,p_created_date);
     
        SET p_result='Success';  
            
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_CampaignData` (IN `p_student_name` VARCHAR(250), IN `p_father_name` VARCHAR(250), IN `p_email_id` VARCHAR(250), IN `p_phone` VARCHAR(50), IN `p_gender` VARCHAR(50), IN `p_student_class` VARCHAR(250), IN `p_current_school` VARCHAR(250), IN `p_location` VARCHAR(250), IN `p_address` VARCHAR(500), IN `p_pincode` INT(10), IN `p_campaign_id` INT(10), IN `p_created_by` INT(10), IN `p_created_date` DATETIME, IN `status` INT(10), OUT `p_result` VARCHAR(250), OUT `p_error_flag` INT(10))  NO SQL
BEGIN
	
INSERT INTO  tbl_campaign_data
          (student_name,father_name,email_id,
           phone,gender,student_class,current_school,
           location,address,pincode,campaign_id,
          created_by,created_date,status)
	VALUES(p_student_name,p_father_name,p_email_id,
          p_phone,p_gender,p_student_class,p_current_school,
          p_location,p_address,p_pincode,p_campaign_id,
           p_created_by,p_created_date,status);
   SET p_result = 'Campaign Added Successfully';
	SET p_error_flag = 1;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_campaigndataFollowup` (IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_data_id` INT(11), IN `p_followup_by` VARCHAR(250), IN `p_followup_date` DATETIME, IN `p_next_followup_date` DATETIME, IN `p_comments` TEXT, IN `p_followup_status` INT, IN `p_created_date` DATETIME, IN `p_created_by` INT(11), OUT `p_result` VARCHAR(250))  BEGIN

UPDATE tbl_campaigndata_followups SET followed_status = '0' WHERE data_id = p_data_id;

		INSERT INTO
					tbl_campaigndata_followups
                    (branch_id,
					 year_id,
					 data_id,
					 followup_by,
					 followup_date,
                     next_followup_date,
					 comments,
					 followup_status,
					 created_date,
					 created_by,
                     followed_status
					 )
		VALUES 
				 (p_branch_id,
                  p_year_id,
                  p_data_id,
                  p_followup_by,
                  p_followup_date,
                  p_next_followup_date,
                  p_comments,
                  p_followup_status,
                  p_created_date,
                  p_created_by,
                  '1'
                 );
                 
	
		 IF row_count() = 0 THEN
                        SET p_result = "Record not updated ! Please try once again.";
                ELSE
                       SET p_result = "Sucess";
		 END IF;
   

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_contact` (IN `p_first_name` VARCHAR(255), IN `p_last_name` VARCHAR(255), IN `p_job_title` VARCHAR(255), IN `p_company` VARCHAR(255), IN `p_email` VARCHAR(255), IN `p_mobile` VARCHAR(255), IN `p_work_phone` VARCHAR(255), IN `p_home_phone` VARCHAR(255), IN `p_address` TEXT, IN `p_owner` INT(11), IN `p_contact_source` INT(11), IN `p_status` INT(11), IN `p_branch_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(255), OUT `p_error_flag` VARCHAR(255))  NO SQL
BEGIN

  INSERT 
    INTO tbl_contacts(first_name,last_name,job_title,company,email,
                      mobile,work_phone,home_phone,address,owner,
                      contact_source,status,branch_id,created_by,created_date)
    VALUES (p_first_name,p_last_name,p_job_title,p_company,p_email,
          p_mobile,p_work_phone,p_home_phone,p_address,
            p_owner,p_contact_source,p_status,p_branch_id,
            p_created_by,p_created_date);
	
		SET p_result='Success';
    
        
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_discipline` (IN `p_student_id` INT(11), IN `p_admission_number` INT(11), IN `p_description` VARCHAR(250), IN `p_date_of_offense` DATETIME, IN `p_reported_by` VARCHAR(250), IN `p_class_id` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_section_name` INT)  BEGIN





				INSERT INTO
											tbl_discipline
											(student_id,
										admission_number,
										description,
										date_of_offense,
										reported_by,
										class_id,
										branch_id,
										year_id,
										status,
										created_by,
										created_date,
                                        section_id
										)

				VALUES
										(p_student_id,
										 p_admission_number,
										 p_description,
										 p_date_of_offense,
										 p_reported_by,
										 p_class_id,
										 p_branch_id,
										p_year_id,
										p_status,
										p_created_by,
										p_created_date,
                                         p_section_name
										);

									     IF row_count() = 0 THEN
                   								SET p_result = "Sorry!Please try once again";
                						ELSE
                      							 SET p_result = "Sucess";
				
                						END IF;



END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_driver_to_vehicle` (IN `p_driver_id` INT(20), IN `p_vehicle_id` INT(20), IN `p_from_date` DATETIME, IN `p_status` ENUM('0','1'), IN `p_created_date` DATETIME, IN `p_created_by` INT(20), OUT `p_result` VARCHAR(100), IN `p_record_type` INT(20))  NO SQL
BEGIN
  
UPDATE tbl_vehicle_driver vd 
  SET vd.to_date= p_from_date,
      vd.modified_by =p_created_by,
      vd.modified_date=p_created_date  
  WHERE vd.vehicle_id=p_vehicle_id 
  and vd.record_type=p_record_type 
  and vd.to_date is NULL;
  
  INSERT INTO
tbl_vehicle_driver(diver_id,vehicle_id,from_date,status,created_by,created_date,record_type) 
  VALUES (p_driver_id,p_vehicle_id,p_from_date,p_status,p_created_by,p_created_date,p_record_type);
  
  
  IF row_count() = 0 THEN
  SET p_result = "Sorry!Please try once again";
  ELSE
  SET p_result = "Sucess";
				
                						END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_empEducation` (IN `p_emp_id` INT(11), IN `p_education` VARCHAR(100), IN `p_institution` VARCHAR(100), IN `p_qualification` INT(11), IN `p_specialisation` VARCHAR(150), IN `p_completion` DATE, IN `p_marks` DOUBLE, IN `p_marks_type` INT(11), IN `p_note` VARCHAR(250), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

		
INSERT INTO 
					tbl_emp_education
					(emp_id,
					education,
					institution,
					qualification,
					specialisation,
					completion,
					marks,
					marks_type,
					note,
					status,
					branch_id,
					created_by,
					created_date)
		VALUES
					(p_emp_id,
					 p_education,
					 p_institution,
					 p_qualification,
					 p_specialisation,
					 p_completion,
					 p_marks,
					 p_marks_type,
					 p_note,
					 p_status,
					 p_branch_id,
					 p_created_by,
					 p_created_date);



				IF row_count() = 0 THEN
					
               		 SET p_result = "Sorry!Please try once again";
                ELSE
					   
                       SET p_result = "Campaing created Sucessfully";
				
                END IF;



END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_employe` (IN `p_emp_number` VARCHAR(25), IN `p_emp_firstname` VARCHAR(100), IN `p_emp_middlename` VARCHAR(50), IN `p_emp_lastname` VARCHAR(100), IN `p_emp_dob` DATE, IN `p_joining_date` DATE, IN `p_experience_year` INT(11), IN `p_marital_status` VARCHAR(50), IN `p_gender` ENUM('Male','Female'), IN `p_spouse_name` VARCHAR(150), IN `p_spouse_phone` VARCHAR(150), IN `p_designation_id` INT(11), IN `p_department_id` INT(11), IN `p_firm_type` INT(11), IN `p_phone_number` VARCHAR(25), IN `p_email` VARCHAR(150), IN `p_blood_group` VARCHAR(11), IN `p_emergency_contact_relation` VARCHAR(50), IN `p_emergency_contact_name` VARCHAR(150), IN `p_emergency_contact_number` VARCHAR(13), IN `p_job_type` INT(11), IN `p_address` VARCHAR(250), IN `p_landmark` VARCHAR(250), IN `p_area_id` INT(11), IN `p_temp_address` VARCHAR(250), IN `p_temp_landmark` VARCHAR(250), IN `p_temp_area_id` INT(11), IN `p_pf_flag` INT(11), IN `p_pf_uan` VARCHAR(100), IN `p_pf_number` VARCHAR(100), IN `p_pf_enrollment_date` DATETIME, IN `p_epf_number` VARCHAR(100), IN `p_epf_relationship` VARCHAR(50), IN `p_entitled_eps` INT(11), IN `p_emp_covered_esi` INT(11), IN `p_esi_number` VARCHAR(100), IN `p_payment_mode` VARCHAR(250), IN `p_bank_ac_number` VARCHAR(25), IN `p_adhar_number` VARCHAR(25), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(200), IN `p_emp_photo` VARCHAR(250))  BEGIN
DECLARE v_country_id INT;
DECLARE v_state_id INT;
DECLARE v_city_id INT;
DECLARE v_t_country_id INT;
DECLARE v_t_state_id INT;
DECLARE v_t_city_id INT;

		SELECT 
				country_id,
				state_id,
				city_id
		INTO
				v_country_id,
				v_state_id,
				v_city_id

		FROM
				tbl_area 
		WHERE 
				area_id = p_area_id;

		SELECT 
				country_id,
				state_id,
				city_id
		INTO
				v_t_country_id,
				v_t_state_id,
				v_t_city_id

		FROM
			tbl_area 
		WHERE 
			area_id = p_temp_area_id;


	INSERT INTO
				 tbl_employees
				   (emp_number,
					emp_firstname,
					emp_middlename,
					emp_lastname,
					emp_dob,
					joining_date,
					experience_year,
					marital_status,
					gender,
					spouse_name,
                    spouse_phone_number,
					designation_id,
					department_id,
					firm_type,
					phone_number,
					email,
					blood_group,
					emergency_contact_relation,
					emergency_contact_name,
					emergency_contact_number,
					job_type,
					address,
					landmark,
					area_id,
					city_id,
					state_id,
					country_id,
					temp_address,
					temp_landmark,
					temp_area_id,
					temp_city,
					temp_state,
					temp_country,
					pf_flag,
					pf_uan,
					pf_number,
					pf_enrollment_date,
					epf_number,
					epf_relationship,
					entitled_eps,
					emp_covered_esi,
					esi_number,
					payment_mode,
					bank_ac_number,
					status,
					branch_id,
					created_by,
					created_date,
                   emp_photo)
	Values
					(p_emp_number,
					p_emp_firstname,
					p_emp_middlename,
					p_emp_lastname,
					p_emp_dob,
					p_joining_date,
					p_experience_year,
					p_marital_status,
					p_gender,
					p_spouse_name,
                    p_spouse_phone,
					p_designation_id,
					p_department_id,
					p_firm_type,
					p_phone_number,
					p_email,
					p_blood_group,
					p_emergency_contact_relation,
					p_emergency_contact_name,
					p_emergency_contact_number,
					p_job_type,
					p_address,
					p_landmark,
					p_area_id,
					v_city_id,
					v_state_id,
					v_country_id,
					p_temp_address,
					p_temp_landmark,
					p_temp_area_id,
					v_t_city_id,
					v_t_state_id,
					v_t_country_id,
					p_pf_flag,
					p_pf_uan,
					p_pf_number,
					p_pf_enrollment_date,
					p_epf_number,
					p_epf_relationship,
					p_entitled_eps,
					p_emp_covered_esi,
					p_esi_number,
					p_payment_mode,
					p_bank_ac_number,
					p_status,
					p_branch_id,
					p_created_by,
					p_created_date,
                    p_emp_photo);

		IF row_count() = 0 THEN
					
           SET p_result = "Sorry!Please try once again";
        ELSE
					  
          SET p_result = LAST_INSERT_ID();
				
        END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_enquiry` (IN `p_student_name` VARCHAR(250), IN `p_student_dob` DATE, IN `p_gender` ENUM('Male','Female'), IN `p_course_id` INT, IN `p_previous_school` VARCHAR(250), IN `p_previous_school_location` VARCHAR(250), IN `p_how_do_know_us` INT, IN `p_father_name` VARCHAR(250), IN `p_father_mobile` VARCHAR(15), IN `p_father_email` VARCHAR(250), IN `p_mother_name` VARCHAR(250), IN `p_mother_mobile` VARCHAR(15), IN `p_mother_email` VARCHAR(250), IN `p_address1` VARCHAR(250), IN `p_country_id` INT, IN `p_state_id` INT, IN `p_city_id` INT, IN `p_area_id` INT, IN `p_location` VARCHAR(250), IN `p_lead_date` DATE, IN `p_followup_date` DATETIME, IN `p_followup_by` VARCHAR(250), IN `p_lead_category` INT, IN `p_campaign_id` INT, IN `p_comments` VARCHAR(250), IN `p_created_date` DATETIME, IN `p_created_by` INT, IN `p_modified_date` DATETIME, IN `p_modified_by` INT, IN `p_branch_id` INT, IN `p_year_id` INT, IN `p_next_followup_date` DATE, IN `p_father_designation` VARCHAR(250), IN `p_father_annual_income` VARCHAR(250), IN `p_mother_designation` VARCHAR(250), IN `p_mother_annual_income` VARCHAR(250), IN `p_visit_date` DATE, OUT `p_result` VARCHAR(250), OUT `p_error_flag` INT)  NO SQL
BEGIN



DECLARE v_lid int DEFAULT 0;

INSERT INTO tbl_leads (
branch_id,
year_id,
student_name, 
student_dob, 
gender, 
course_id, 
previous_school, 
previous_school_location, 
how_do_know_us, 
father_name, 
father_mobile, 
father_email, 
mother_name, 
mother_mobile, 
mother_email, 
address1, 
country_id, 
state_id, 
city_id, 
area_id, 
location, 
lead_date,  
lead_category, 
campaign_id, 
executive_name, 
created_date, 
created_by, 
modified_date, 
modified_by, 
lead_status,
status,
father_designation,
father_annual_income,
mother_designation,
mother_annual_income,visit_date)
VALUES(
    p_branch_id,
    p_year_id,
    p_student_name, 
    p_student_dob, 
    p_gender, 
    p_course_id, 
    p_previous_school,
    p_previous_school_location,
    p_how_do_know_us, 
    p_father_name, 
    p_father_mobile, 
    p_father_email, 
    p_mother_name, 
    p_mother_mobile, 
    p_mother_email, 
    p_address1, 
    p_country_id,
    p_state_id, 
    p_city_id, 
    p_area_id, 
    p_location, 
    p_lead_date,  
    p_lead_category,
    p_campaign_id,
    p_followup_by, 
    p_created_date, 
    p_created_by, 
    p_modified_date, 
    p_modified_by,
    'Enquiry','0', p_father_designation,
p_father_annual_income,
p_mother_designation,
p_mother_annual_income,p_visit_date);


SET v_lid = LAST_INSERT_ID();

INSERT INTO 
							tbl_lead_followups 
							(branch_id, lead_id, followup_by, followup_date, next_followup_date, comments, followup_status, created_date, created_by, modified_date, modified_by)
VALUES(p_branch_id,v_lid, p_followup_by, p_followup_date,p_next_followup_date, p_comments, '12', p_created_date, p_created_by, p_modified_date, p_modified_by);


SET p_result = 'Enquiry Added Successfully';
SET p_error_flag = 1;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_exam` (IN `p_exam_name` VARCHAR(100), IN `p_exam_type` INT(11), IN `p_start_date` DATETIME, IN `p_end_date` DATETIME, IN `p_result_type` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_consider_parent` INT, IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_term_id` INT, IN `p_consider_report` INT)  BEGIN
INSERT INTO 
			tbl_exam
					
					(exam_name,
					 exam_type,
					 start_date,
					 end_date,
                     result_type,
					 status,
					 branch_id,
					 year_id,
                     consider_parent,
					 created_by,
					 created_date,
                    term_id,
                    consider_report)
VALUES				(p_exam_name,
					 p_exam_type,
					 p_start_date,
					 p_end_date,
                     p_result_type,
					 p_status,
					 p_branch_id,
					 p_year_id,
                     p_consider_parent,
				 	 p_created_by,
					 p_created_date,
                    p_term_id,
                    p_consider_report);

	
				IF row_count() = 0 THEN

					SET p_result = "Sorry!Please try once again";

                ELSE 
                     SET p_result = LAST_INSERT_ID();
				
                END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_examCourse` (IN `p_exam_id` INT(11), IN `p_course_id` INT(11), IN `p_exam_date` DATETIME, IN `p_subject_id` INT(11), IN `p_syllabus` VARCHAR(150), IN `p_exam_time` TIME, IN `p_pass_marks` FLOAT, IN `p_max_marks` INT(11), IN `p_last_date_entry` DATETIME, IN `p_result_type` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_section_id` INT, IN `p_is_language` INT)  BEGIN
DECLARE v_cnt INT DEFAULT 0;



	SELECT COUNT(exam_id) INTO v_cnt FROM tbl_exam_course
	WHERE course_id = p_course_id
	AND section_id = p_section_id
	AND exam_id = p_exam_id
	AND subject_id = p_subject_id
    AND is_language = p_is_language
    AND status = '0';

	IF v_cnt = 0  THEN 

		INSERT INTO
			tbl_exam_course
				(exam_id,
				course_id,
				exam_date,
				subject_id,
				syllabus,
				exam_time,
				pass_marks,
				max_marks,
				last_date_entry,
				result_type,
				status,
				branch_id,
				year_id,
				created_by,
				created_date,
				section_id,
                is_language)					
		VALUES		
				(p_exam_id,
				p_course_id,
				p_exam_date,
				p_subject_id,
				p_syllabus,
				p_exam_time,
				p_pass_marks,
				p_max_marks,
				p_last_date_entry,
				p_result_type,
				p_status,
				p_branch_id,
				p_year_id,
				p_created_by,
				p_created_date,
				p_section_id,
                p_is_language);

				IF row_count() = 0 THEN
					SET p_result = "Sorry!Please try once again";
                ELSE
					SET p_result = LAST_INSERT_ID();				
                END IF;
			
	ELSE

		UPDATE tbl_exam_course SET
						exam_date = p_exam_date,
						syllabus = p_syllabus,
						exam_time = p_exam_time,
						pass_marks = p_pass_marks,
						max_marks = p_max_marks,
						last_date_entry = p_last_date_entry,
						result_type = p_result_type,
                        modified_by = p_created_by,
                        modified_date = p_created_date
		WHERE course_id = p_course_id
		AND section_id = p_section_id
		AND exam_id = p_exam_id
		AND subject_id = p_subject_id;

		IF row_count() = 0 THEN
			SET p_result = "Sorry!Please try once again";
		ELSE
		   SET p_result = 'Success';
					
	END IF;

	END IF;
    

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_feeAccount` (IN `p_branch_id` INT(11), IN `p_fee_account_name` VARCHAR(250), IN `p_fee_bank_name` VARCHAR(250), IN `p_status` ENUM('0','1'), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_fee_account_branch` VARCHAR(250), OUT `p_error_flag` ENUM('0','1'))  BEGIN

		DECLARE  v_cnt int;

			SET v_cnt=0;

			SELECT 
					count(1)
			INTO
					v_cnt
			FROM
					tbl_fee_accounts
			WHERE
					branch_id = p_branch_id
			AND
					upper(fee_account_name) = upper(p_fee_account_name);
			
			IF(v_cnt =0) THEN
			
				INSERT INTO 
							tbl_fee_accounts
							(branch_id,
                            fee_account_name,
                            fee_bank_name,
                            fee_account_branch,
                            status,
                            created_by,

                            created_date
		                    )
				VALUES
							(p_branch_id,
                            p_fee_account_name,
                            p_fee_bank_name,
                            p_fee_account_branch,
                            p_status,
                            p_created_by,
                            p_created_date
                            );


               IF row_count() = 0 THEN
                   SET p_result = "Sorry!Please try once again";
				   SET p_error_flag = 1;
                ELSE
                       SET p_result = "Account Added Successfully";
						SET p_error_flag = 0;
				
                END IF;

			ELSE
					 SET p_result = "Sorry!Please try once again,Account name already exist";
						SET p_error_flag = 1;
			END IF;

		


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_feeCategory` (IN `p_fee_category_name` VARCHAR(150), IN `p_fee_category_code` VARCHAR(15), IN `p_branch_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_status` ENUM('0','1'), OUT `p_error_flag` ENUM('0','1'))  BEGIN

DECLARE v_check INT (11) DEFAULT 0;
DECLARE v_cnt int(11);

	SELECT count(1)
	INTO v_check 
	FROM tbl_fee_category
	WHERE fee_category_name = p_fee_category_name
	AND branch_id = p_branch_id;

	IF v_check = 0 THEN


			SELECT
					MAX(category_position)
			INTO
					v_cnt
			FROM
					tbl_fee_category;
			
IF v_cnt IS NULL THEN SET v_cnt = 1; END IF;

			
			INSERT INTO
						tbl_fee_category(fee_category_name,
                        fee_category_code,
                        category_position,
                        branch_id,
                        status, 
                        created_by,
                        created_date)
			VALUES
						(p_fee_category_name,
                        UPPER(p_fee_category_code),
                        (v_cnt+1),
                        p_branch_id,
                        p_status,
                        p_created_by,
                        p_created_date
                        );

			
				IF row_count() = 0 THEN
                   SET p_result = "Sorry!Please try once again";
					SET p_error_flag = 1;
                ELSE
                       SET p_result = "Fee category added successfully";
					   SET p_error_flag = 0;
				
                END IF;
	ELSE 
		SET p_result = "Sorry! Fee category name already exists";
		SET p_error_flag = 1;
	END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_feeConcession` (IN `p_concession_name` VARCHAR(250), IN `p_category_id` INT(11), IN `p_concession_type_id` INT(11), IN `p_percentage` FLOAT, IN `p_adjustment_type` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_concession_id` INT)  BEGIN

	DECLARE v_cnt int;

	if p_concession_id =0 Then

	INSERT INTO 
						tbl_fee_concession
						(concession_name,
                        category_id,
						concession_type_id,
						percentage,
						adjustment_type,
						branch_id,
						year_id,
						status,
						created_by,
						created_date
						)
		VALUES
						(p_concession_name,
						p_category_id,
						p_concession_type_id,
						p_percentage,
						p_adjustment_type,
						p_branch_id,
						p_year_id,
						p_status,
						p_created_by,
						p_created_date);

				 IF row_count() = 0 THEN
						SET p_result = "Sorry!Please try once again";
				 ELSE
						                        SET p_result = LAST_INSERT_ID();
				 END IF; 
	ELSE
			
       		SET v_cnt = 0;
    		
				SELECT  
						count(1)
				INTO
						v_cnt
				FROM	
						tbl_student_plan_type
				WHERE
						concession_id = p_concession_id;
				
							
			IF v_cnt =0 THEN
				

				UPDATE
						tbl_fee_concession
				SET
					concession_name = 	p_concession_name,
					category_id = p_category_id,
					concession_type_id = p_concession_type_id,
					percentage = p_percentage,
					adjustment_type = p_adjustment_type,
					status = p_status
			   WHERE
					concession_id= p_concession_id ;

				 IF row_count() = 0 THEN
						SET p_result = "Sorry!Please try once again";
				 ELSE
						SET p_result = "Concessions Updated Successfully.";
				 END IF; 
			ELSE
					SET p_result = "Sorry!Alreadt discount applied to students";
			
			END IF;

    END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_feeCoursePlan` (IN `p_fee_plan_id` INT(11), IN `p_cource_id` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

					INSERT INTO
												tbl_fee_cource_plan
												(fee_plan_id,
                                                cource_id,
                                                branch_id,
                                                year_id,
                                                status,
                                                created_by,
                                                created_date
                                                )
					VALUES
												(p_fee_plan_id,
                                                p_cource_id,
                                                p_branch_id,
                                                p_year_id,
                                                p_status,
                                                p_created_by,
                                                p_created_date
                                                );


							IF row_count() = 0 THEN
                                    SET p_result = "Sorry!Please try once again";
                             ELSE
                                        SET p_result = "Sucess";
                             END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_feePlan` (IN `p_fee_plan_name` VARCHAR(250), IN `p_new_admissions` TINYINT(1), IN `p_existing_admission` TINYINT(1), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), OUT `p_error_flag` INT)  BEGIN
DECLARE  v_cnt int;

SET v_cnt=0;

			SELECT 
					count(1)
			INTO
					v_cnt
			FROM
					tbl_fee_plan
			WHERE
					branch_id = p_branch_id
			AND
					year_id = p_year_id
			AND
					upper(fee_plan_name) = upper(p_fee_plan_name);
			
			IF(v_cnt =0) THEN

			INSERT INTO
											tbl_fee_plan
											(fee_plan_name,
                                            new_admissions,
                                            existing_admission,
                                            branch_id,
                                            year_id,
                                            status,
                                            created_by,
                                            created_date)
					VALUES
											(p_fee_plan_name,
                                            p_new_admissions,
                                            p_existing_admission,
                                            p_branch_id,
                                            p_year_id,
                                            p_status,
                                            p_created_by,
                                            p_created_date);

                                     IF row_count() = 0 THEN
                                                SET p_result = "Sorry!Please try once again";
												SET p_error_flag = 0;
                                     ELSE
                                               SET p_result = LAST_INSERT_ID();
											SET p_error_flag = 1;
                                     END IF;        

			ELSE
				SET p_result = "Sorry!Please try once again,Plan name already exist";
				SET p_error_flag = 0;
			END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_feeTerm` (IN `p_type_id` INT(11), IN `p_amount` FLOAT, IN `p_start_date` DATETIME, IN `p_due_date` DATETIME, IN `p_end_date` DATETIME, IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_status` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

		INSERT INTO
					tbl_fee_terms
					(type_id,
                    amount,
                    start_date,
                    due_date,
                    end_date,
                    branch_id,
                    year_id,
                    status,
                    created_by,
                    created_date
                    )
		VALUES
					(p_type_id,
                    p_amount,
                    p_start_date,
                    p_due_date,
                    p_end_date,
                    p_branch_id,
                    p_year_id,
                    p_status,
                    p_created_by,
                    p_created_date

                    );

				IF row_count() = 0 THEN
                   SET p_result = "Sorry!Please try once again";
                ELSE
                       SET p_result = "Sucess";
				
                END IF;
		

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_feeTransactions` (IN `p_manual_receipt_number` VARCHAR(250), IN `p_system_receipt_number` VARCHAR(250), IN `p_studnet_id` INT(11), IN `p_terms_id` INT(11), IN `p_fee_type_id` INT, IN `p_type_plan_id` INT(11), IN `p_transaction_date` DATETIME, IN `p_amount` FLOAT, IN `p_branch_id` INT(11), IN `p_cource_plan_id` INT(11), IN `p_status` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_application_id` INT, IN `p_pay_mode` INT, IN `p_bank_name` VARCHAR(250), IN `p_check_transaction_num` VARCHAR(250), IN `p_transaction_number` VARCHAR(250), IN `p_siri_number` VARCHAR(250), IN `p_bank_branch` VARCHAR(250), IN `p_remarks` VARCHAR(250), IN `p_pay_date` DATE, IN `p_micr_code` VARCHAR(250), IN `p_cheque_category` VARCHAR(250), IN `p_payee_name` VARCHAR(250), IN `p_mobile_number` VARCHAR(50))  BEGIN
DECLARE v_out_amount float;
DECLARE v_input_amount float;
DECLARE v_term_id int;
DECLARE v_input_term_id int;
DECLARE v_term_till_amount float; 
DECLARE v_current_term_amount float;
DECLARE v_type_id int;
DECLARE v_cnt int ;
DECLARE v_system_number VARCHAR(250);


SET v_term_id =0;
SET v_term_till_amount = 0;

SET v_out_amount = p_amount;

SELECT MAX(system_receipt_number)+1 
INTO v_system_number
FROM `tbl_fee_transactions`;


IF p_studnet_id <>  0 THEN
SELECT 
	terms_id,
	sum(amount) 
INTO 
	v_term_id,
	v_term_till_amount  
FROM  
	tbl_fee_transactions  
WHERE 
	studnet_id  =  p_studnet_id AND  type_plan_id = p_type_plan_id
AND 
	status = '0'

GROUP BY 
	terms_id 
ORDER BY 
	terms_id 
DESC 
LIMIT 0,1;

end if;

	 IF v_term_id = 0 THEN

		SELECT terms_id,amount,type_id,1  INTO	v_term_id,v_current_term_amount, v_type_id ,v_cnt FROM  tbl_fee_terms WHERE type_id =p_fee_type_id ORDER bY type_id LIMIT 0 ,1 ;


	 ELSE 


		SELECT 
				terms_id, (amount-v_term_till_amount) ,type_id , (CASE WHEN amount >  v_term_till_amount  THEN  1 ELSE 0 end ) 
		INTO	v_term_id,v_current_term_amount, v_type_id ,v_cnt
		FROM  tbl_fee_terms 
		WHERE  terms_id  = v_term_id ;

	END IF;

	IF v_cnt = 0 THEN

		SELECT 
				terms_id, amount ,type_id , 1 
		INTO	v_term_id,v_current_term_amount, v_type_id ,v_cnt
		FROM  tbl_fee_terms 
		WHERE  terms_id  > v_term_id and type_id = p_fee_type_id ORDER BY terms_id LIMIT 0,1 ;


	END IF;

    WHILE( v_cnt > 0 )  DO 

	IF v_current_term_amount >= v_out_amount THEN 

	 SET v_cnt =0 ;
	 SET v_input_amount = v_out_amount;
	 SET v_input_term_id = v_term_id;

	ELSE

	 SET v_cnt =0 ; 
	 SET v_input_amount = v_current_term_amount;
	 SET v_input_term_id = v_term_id;
	 SET v_out_amount = v_out_amount - v_current_term_amount;

	 SELECT 
				terms_id, amount ,type_id , 1 
		INTO	v_term_id,v_current_term_amount, v_type_id ,v_cnt
		FROM  tbl_fee_terms 
		WHERE  terms_id  > v_term_id and type_id = p_fee_type_id ORDER BY terms_id LIMIT 0,1 ;


	END IF;

	INSERT INTO
							tbl_fee_transactions
							(manual_receipt_number,
                             system_receipt_number,
                             studnet_id,
                             application_id,
                             terms_id,
                             type_plan_id,
                             transaction_date,
                             amount,
                             branch_id,
                             cource_plan_id,
                             status,
                             created_by,
                             created_date,
                             pay_mode,
                             check_transaction_num,
                             bank_name,
                             transaction_number,
                             siri_number,
                             bank_branch,
                             remarks,
                             pay_date,
                             micr_code,
                             cheque_category,
                             payee_name,
                             mobile_number
                            )
			VALUES
							(p_manual_receipt_number,
                             p_system_receipt_number,
                             p_studnet_id,
                             p_application_id,
                             v_input_term_id,
                             p_type_plan_id,
                             p_transaction_date,
                             v_input_amount,
                             p_branch_id,
                             p_cource_plan_id,
                             p_status,
                             p_created_by,
                             p_created_date,
                             p_pay_mode,
                             p_check_transaction_num,
                             p_bank_name,
                             p_transaction_number,
                             p_siri_number,
                             p_bank_branch,
                             p_remarks,
                             p_pay_date,
                             p_micr_code,
                             p_cheque_category,
                             p_payee_name,
                             p_mobile_number
                            );

	END WHILE;

									IF row_count() = 0 THEN
                                    
                                                SET p_result = "Sorry!Please try once again";
                                     ELSE
                                                SET p_result = p_system_receipt_number;

                                     END IF;	
	

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_feeType` (IN `p_fee_type_name` VARCHAR(250), IN `p_fee_type_code` VARCHAR(250), IN `p_fee_account_id` INT(11), IN `p_fee_category_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_fee_terms` INT, IN `p_print_name` VARCHAR(250), IN `p_year_id` INT, OUT `p_error_flag` ENUM('0','1'))  BEGIN

DECLARE  v_cnt int;

SET v_cnt=0;

SELECT 
	count(1)
INTO
	v_cnt
FROM
	tbl_fee_type
WHERE
	branch_id = p_branch_id
AND
	year_id = p_year_id
AND
	upper(fee_type_name) = upper(p_fee_type_name);

IF(v_cnt =0) THEN
	
		INSERT INTO
					 tbl_fee_type
					 	(fee_type_name,
                         print_name,
                        fee_type_code,
                        fee_account_id,
                        fee_category_id,
                        status,
                        branch_id,
                        fee_terms,
                        created_by,
                        created_date,
                        year_id)
		VALUES
                    (p_fee_type_name,
                    p_print_name,
                    p_fee_type_code,
                    p_fee_account_id,
                    p_fee_category_id,
                    p_status,
                    p_branch_id,
                    p_fee_terms,
                    p_created_by,
                    p_created_date,
                    p_year_id);

				IF row_count() = 0 THEN
                   SET p_result = "Sorry!Please try once again";
					SET p_error_flag = 0;
                ELSE
                    SET p_result = LAST_INSERT_ID();
					SET p_error_flag = 0;
				
                END IF;
		
	ELSE
		SET p_result = "Sorry!Please try once again,Fee type name already exist";
		SET p_error_flag = 1;
	END IF;



END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_feeTypePlan` (IN `p_fee_type_id` INT(11), IN `p_mandatory` TINYINT(1), IN `p_status` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_fee_plan_id` INT)  BEGIN

					
					INSERT INTO
											tbl_fee_type_plan
											(fee_plan_id,
                                            fee_type_id,
                                            mandatory,
                                             status,
                                            branch_id,
                                            year_id,
                                            created_by,
                                            created_date)
					VALUES
										(p_fee_plan_id,
                                        p_fee_type_id,
                                        p_mandatory,
                                        p_status,
                                        p_branch_id,
                                        p_year_id,
                                        p_created_by,
                                        p_created_date);


							IF row_count() = 0 THEN
                                    SET p_result = "Sorry!Please try once again";
                             ELSE
                                        SET p_result = "Sucess";
                             END IF;

				


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_inventory_item` (IN `p_item_name` VARCHAR(250), IN `p_inv_category_id` INT(11), IN `p_quantity_count` INT(11), IN `p_price` FLOAT(10,2), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

DECLARE v_item_id INT(11);

INSERT INTO tbl_inventory_items (item_name, inv_category_id, branch_id, year_id, status, created_by, created_date) 
						VALUES (p_item_name, p_inv_category_id, p_branch_id, p_year_id, p_status, p_created_by, p_created_date);
SET v_item_id = LAST_INSERT_ID();

IF v_item_id > 0 THEN

	INSERT INTO tbl_item_quantity (item_id, quantity_count, price, status, created_by, created_date)
				VALUES(v_item_id, p_quantity_count, p_price, p_status, p_created_by, p_created_date);
	SET p_result = LAST_INSERT_ID();
END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_leadFollowup` (IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_lead_id` INT(11), IN `p_followup_by` VARCHAR(250), IN `p_followup_date` DATETIME, IN `p_next_followup_date` DATETIME, IN `p_comments` TEXT, IN `p_followup_status` INT, IN `p_created_date` DATETIME, IN `p_created_by` INT(11), OUT `p_result` VARCHAR(250))  BEGIN

UPDATE tbl_lead_followups SET followed_status = '0' WHERE lead_id = p_lead_id;

		INSERT INTO
					tbl_lead_followups
                    (branch_id,
					 year_id,
					 lead_id,
					 followup_by,
					 followup_date,
                     next_followup_date,
					 comments,
					 followup_status,
					 created_date,
					 created_by,
                     followed_status
					 )
		VALUES 
				 (p_branch_id,
                  p_year_id,
                  p_lead_id,
                  p_followup_by,
                  p_followup_date,
                  p_next_followup_date,
                  p_comments,
                  p_followup_status,
                  p_created_date,
                  p_created_by,
                  '1'
                 );
                 
	
		 IF row_count() = 0 THEN
                        SET p_result = "Record not updated ! Please try once again.";
                ELSE
                       SET p_result = "Sucess";
		 END IF;
   

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_misFeeTransactions` (IN `p_manual_receipt_number` VARCHAR(250), IN `p_system_receipt_number` VARCHAR(250), IN `p_byer_id` INT, IN `p_byer_type_id` INT, IN `p_item_id` INT, IN `p_quantity` INT, IN `p_amount` FLOAT(10,2), IN `p_transaction_date` DATE, IN `p_branch_id` INT, IN `p_status` ENUM('0','1'), IN `p_created_by` INT, IN `p_created_date` DATETIME, IN `p_pay_mode` INT, IN `p_bank_name` VARCHAR(250), IN `p_check_transaction_num` VARCHAR(250), IN `p_transaction_number` VARCHAR(250), IN `p_siri_number` VARCHAR(250), IN `p_bank_branch` VARCHAR(250), IN `p_remarks` VARCHAR(250), IN `p_pay_date` DATE, IN `p_micr_code` VARCHAR(250), IN `p_cheque_category` VARCHAR(250), OUT `p_result` VARCHAR(250), IN `p_year_id` INT, IN `p_payee_name` VARCHAR(250), IN `p_mobile_number` VARCHAR(50))  NO SQL
BEGIN


DECLARE v_out_amount float;
DECLARE v_input_amount float;
DECLARE v_input_term_id int;
DECLARE v_current_term_amount float;
DECLARE v_type_id int;
DECLARE v_account_id int;
DECLARE v_system_number VARCHAR(250);
	
SET v_account_id = '2';

    INSERT INTO
		tbl_mis_transactions
			(mis_transaction_number,
             mis_siri_number,
             manual_receipt_number,
             system_receipt_number,
             account_id,
             byer_id,
			 byer_type_id,
			 Item_id,
			 quantitiy,
             transaction_date,
             unit_price,
			 amount, 
			 pay_mode,
             check_transaction_num,
             bank_name,
             branch_id,
             year_id,
             status,
             created_by,
             created_date,
             bank_branch,
             remarks,
             pay_date,
             micr_code,
             cheque_category,
             payee_name,
             mobile_number
             )
			VALUES
			(p_transaction_number,
			 p_siri_number,
			 p_manual_receipt_number,
             p_system_receipt_number,
             v_account_id,
             p_byer_id,
             p_byer_type_id,
             p_item_id,
             p_quantity,				
             p_transaction_date,
             p_amount,
			 p_amount,
			 p_pay_mode,
             p_check_transaction_num,
             p_bank_name,
             p_branch_id,
			 p_year_id,
             p_status,
             p_created_by,
             p_created_date,                                
             p_bank_branch,
             p_remarks,
             p_pay_date,
             p_micr_code,
             p_cheque_category,
             p_payee_name,
             p_mobile_number
             );

		IF row_count() = 0 THEN
                           SET p_result = "Sorry!Please try once again";
                ELSE
                           SET p_result = p_system_receipt_number;
                END IF;		

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_parentUser` (IN `p_student_id` INT, IN `p_parent_id` INT, IN `p_admission_number` VARCHAR(250), IN `p_status` INT, IN `p_created_by` INT, IN `p_created_date` DATETIME, IN `p_primary_contact` INT, OUT `p_result` VARCHAR(250))  NO SQL
BEGIN


UPDATE 
	tbl_parent_student
SET
	status = '1'
WHERE
	parent_id = p_parent_id;

INSERT INTO tbl_parent_student
						(student_id,
                        admission_number,
                        parent_id,
                        status,
                        created_by,
                        created_date,
                        primary_contact)
			VALUES(p_student_id,
                   p_admission_number,
                   p_parent_id,
                   p_status,
                   p_created_by,
                   p_created_date,
                   p_primary_contact);
SET p_result = 'success';

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_question` (IN `p_exam_course_id` INT(11), IN `p_exam_id` INT(11), IN `p_qn_number` VARCHAR(250), IN `p_question_description` TEXT, IN `p_question_answer` TEXT, IN `p_question_category` INT(11), IN `p_question_type` INT(11), IN `p_marks` FLOAT(11,2), IN `p_parent_id` INT(11), IN `p_option_A` TEXT, IN `p_option_B` TEXT, IN `p_option_C` TEXT, IN `p_option_D` TEXT, IN `p_option_E` TEXT, IN `p_status` VARCHAR(10), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, IN `p_order_id` INT(11), IN `p_rand_number` VARCHAR(250), OUT `p_result` VARCHAR(250), IN `p_set_id` INT(11))  BEGIN
																		
     INSERT INTO tbl_questions
		(exam_course_id,exam_id,qn_number,question_description,question_answer,
		question_category,question_type,marks,parent_id,option_A,option_B,option_C,option_D,option_E,status,
        branch_id,year_id,created_by,created_date,order_id,rand_number, set_id)
	VALUES (p_exam_course_id,p_exam_id,p_qn_number,p_question_description,p_question_answer,
		p_question_category,p_question_type,p_marks,p_parent_id,p_option_A,p_option_B,p_option_C,p_option_D,p_option_E,p_status,
        p_branch_id,p_year_id,p_created_by,p_created_date,p_order_id,p_rand_number, p_set_id);
         IF row_count() = 0 THEN
			 SET p_result = "Sorry!Please try once again";
					  ELSE
			 SET p_result = LAST_INSERT_ID();
					  END IF;
        
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_question_marks` (IN `p_question_marks_id` INT(11), IN `p_question_id` INT, IN `p_exam_course_id` INT, IN `p_exam_id` INT, IN `p_question_student_answer` VARCHAR(250), IN `p_student_id` INT, IN `p_question_marks` FLOAT, IN `p_teacher_id` INT, IN `p_status` VARCHAR(10), IN `p_branch_id` INT, IN `p_year_id` INT, IN `p_created_by` INT, IN `p_created_date` DATETIME)  BEGIN
	        
         if (p_question_marks_id != 0) then
         
    
     UPDATE 
								tbl_student_question_marks 
							SET question_student_answer=p_question_student_answer,question_marks=p_question_marks,modified_by=p_created_by,modified_date=p_created_date
							WHERE question_marks_id = p_question_marks_id ;
     
                                                    
         
         
         else
         INSERT 
										INTO 
											tbl_student_question_marks (question_id,exam_course_id,exam_id,question_student_answer,
												student_id,question_marks,teacher_id,status,branch_id,year_id,created_by,created_date) 
									VALUES(p_question_id,p_exam_course_id,p_exam_id,p_question_student_answer,p_student_id,p_question_marks,
													p_teacher_id,p_status,p_branch_id,p_year_id,p_created_by,p_created_date);
         
         
         
		
       
                            
          end if;                                          
                                                   
     
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_route` (IN `p_branchi_id` INT(11), IN `p_route_name` VARCHAR(250), IN `p_start_point` VARCHAR(250), IN `p_end_point` VARCHAR(250), IN `p_threshold` VARCHAR(250), IN `p_status` ENUM('0','1'), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

INSERT INTO
														tbl_route
														(branchi_id,
route_name,
start_point,
end_point,
threshold_km,
status,
created_by,
created_date)
						VALUES 	
														(p_branchi_id,
p_route_name,
p_start_point,
p_end_point,
p_threshold,
p_status,
p_created_by,
p_created_date);
					

IF row_count() = 0 THEN
               
				SET p_result = "Sorry!Please try once again";
            ELSE
                       SET p_result = "Sucess";
				
             END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_SchemePlan` (IN `p_special_scheme_id` INT(11), IN `p_fee_plan_id` INT(11), IN `p_status` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  NO SQL
BEGIN

					INSERT INTO
												tbl_scheme_plans
												(special_scheme_id,
                                                fee_plan_id,
                                                branch_id,
                                                year_id,
                                                status,
                                                created_by,
                                                created_date
                                                )
					VALUES
												(p_special_scheme_id,
                                                p_fee_plan_id,
                                                p_branch_id,
                                                p_year_id,
                                                p_status,
                                                p_created_by,
                                                p_created_date
                                                );


							IF row_count() = 0 THEN
                                    SET p_result = "Sorry!Please try once again";
                             ELSE
                                        SET p_result = "Sucess";
                             END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_sendEmailgroup` (IN `p_group_id` INT, IN `p_template_id` INT, IN `p_email_insert_date` DATETIME, IN `p_sent_date` DATETIME, IN `p_group_category` INT, IN `p_year_id` INT, IN `p_branch_id` INT, IN `p_uniq_number` VARCHAR(255), IN `p_user_type` INT, IN `p_created_by` INT, IN `p_created_date` DATETIME, IN `p_sender_type` INT, OUT `p_result` VARCHAR(255), IN `p_campaign_name` VARCHAR(255))  NO SQL
BEGIN
	DECLARE v_templatebody text DEFAULT '';
	DECLARE v_group_category varchar(255);
	DECLARE v_email_attachment varchar(255);
    DECLARE v_email_subject varchar(255);
	SET v_email_subject = '';
	SELECT  template_content into v_templatebody  FROM tbl_template where template_id = p_template_id;
	SELECT  template_attachment into v_email_attachment  FROM tbl_template where template_id = p_template_id;
	SELECT g.item_name into v_group_category FROM tbl_general_items g where g.item_id =p_group_category;
	SELECT  template_subject into v_email_subject   FROM tbl_template where template_id = p_template_id;	
IF v_group_category ='Regular' THEN
		
		INSERT 
  			INTO tbl_send_email
								(sender_type,
								to_name,
								to_email,
								to_id,
								body_html,
								branch_id,
								year_id,
								email_insert_date,
                                 sent_date,
								uniq_number,
								user_type,
								created_by,
								created_date,
								email_attachment,
								body_text,
								campaign_name,
								template_id,
								send_to)
		 	SELECT
							p_sender_type,
                            first_name,
                            email,
                            contact_id,
							(SELECT  
									template_content  
                             FROM 	
									tbl_template 
							 where 
									template_id = p_template_id),
							p_branch_id,
                            p_year_id,
                            p_email_insert_date,
							p_sent_date,
                            p_uniq_number,
							p_user_type,
                            p_created_by,
                            p_created_date,
                            v_email_attachment,
                            v_email_subject,
                            p_campaign_name,
                            p_template_id,2
			FROM 
							tbl_contacts 
			WHERE 
							contact_id IN (SELECT gc.contact_id FROM tbl_group_contact gc WHERE gc.group_id=p_group_id AND status='0' );
else 
    INSERT 
  			INTO tbl_send_email
								(sender_type,
                                to_name,
                                to_email,
                                to_id,
								body_html,
                                branch_id,
                                year_id,
                                email_insert_date,
								uniq_number,
                                user_type,
                                created_by,
                                created_date,
								email_attachment,
                                body_text,
                                campaign_name,
                                template_id,
                                send_to)
				SELECT
								p_sender_type,
                                first_name,
                                email,
                                cam_contact_id,
                                (SELECT  
									template_content  
								FROM 	
									tbl_template 
								where 
									template_id = p_template_id),
								p_branch_id,
                                p_year_id,
                                p_email_insert_date,
                                p_uniq_number,
								p_user_type,
                                p_created_by,
                                p_created_date,
                                v_email_attachment,
                                v_email_subject,
                                p_campaign_name,
                                p_template_id,1 
				FROM 
								tbl_campaign_contact 
				WHERE
								group_id =p_group_id 
				AND 
								status='0';
	END IF;
	SET p_result='Success';
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_sendEmailIndividual` (IN `p_contact_id` VARCHAR(255), IN `p_template_id` INT, IN `p_email_insert_date` DATETIME, IN `p_sent_date` DATETIME, IN `p_year_id` INT, IN `p_branch_id` INT, IN `p_uniq_number` VARCHAR(255), IN `p_user_type` INT, IN `p_created_by` INT, IN `p_created_date` DATETIME, IN `p_sender_type` INT, OUT `p_result` VARCHAR(255), IN `p_campaign_name` VARCHAR(255))  NO SQL
BEGIN
	DECLARE v_templatebody text;
	DECLARE v_group_category varchar(255);
    DECLARE v_email_attachment varchar(255);
    DECLARE v_email_subject varchar(255);
    SET v_templatebody = '';
    SET v_email_subject = '';
	SELECT  template_content into v_templatebody  FROM tbl_template where template_id = p_template_id;
	SELECT  template_attachment into v_email_attachment   FROM tbl_template where template_id = p_template_id;
	SELECT  template_subject into v_email_subject   FROM tbl_template where template_id = p_template_id;
			
		INSERT 
  			INTO tbl_send_email
       			(sender_type,to_name,to_email,to_id,
        		body_html,branch_id,year_id,email_insert_date,
        		uniq_number,user_type,created_by,created_date,email_attachment,body_text,campaign_name,template_id,send_to,sent_date)
		 	SELECT p_sender_type,first_name,email,contact_id,
            (SELECT  template_content   FROM tbl_template where template_id = p_template_id),
				p_branch_id,p_year_id,p_email_insert_date,p_uniq_number,
				p_user_type,p_created_by,p_created_date,v_email_attachment,v_email_subject,p_campaign_name,p_template_id,1,p_sent_date 
			FROM tbl_contacts 
			WHERE contact_id IN (SELECT c.contact_id FROM tbl_contacts c WHERE FIND_IN_SET(c.contact_id,p_contact_id) );
    SET p_result='Success';
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_sendSmsGroup` (IN `p_group_id` INT, IN `p_template_id` INT, IN `p_sms_insert_date` DATETIME, IN `p_sent_date` DATETIME, IN `p_group_category` INT, IN `p_year_id` INT, IN `p_branch_id` INT, IN `p_uniq_number` VARCHAR(255), IN `p_user_type` INT, IN `p_created_by` INT, IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(255))  NO SQL
BEGIN
	DECLARE v_templatebody text;
	DECLARE v_group_category varchar(255);
	SELECT  template_content into v_templatebody  FROM tbl_template where template_id = p_template_id;
	SELECT g.item_name into v_group_category FROM tbl_general_items g where g.item_id =p_group_category;
	IF v_group_category ='Reguler' THEN
		
		INSERT 
  			INTO tbl_sms
       			(sms_type,to_name,to_phone_number,to_number,
        		sms_text,branch_id,year_id,sms_insert_date,
        		sent_date,uniq_number,user_type,created_by,created_date)
		 	SELECT 11,first_name,mobile,contact_id,v_templatebody,
				p_branch_id,p_year_id,p_sms_insert_date,p_sent_date,p_uniq_number,
				p_user_type,p_created_by,p_created_date 
			FROM tbl_contacts 
			WHERE contact_id IN (SELECT gc.contact_id FROM tbl_group_contact gc WHERE gc.group_id=p_group_id );
else 
    INSERT 
  			INTO tbl_sms
       			(sms_type,to_name,to_phone_number,to_number,
        		sms_text,branch_id,year_id,sms_insert_date,
        		sent_date,uniq_number,user_type,created_by,created_date)
		 	SELECT 11,first_name,email,cam_contact_id,v_templatebody,
				p_branch_id,p_year_id,p_sms_insert_date,p_sent_date,p_uniq_number,
				p_user_type,p_created_by,p_created_date 
			FROM tbl_campaign_contact 
			WHERE group_id =p_group_id;
	END IF;
	SET p_result='Success';
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_sendSmsIndividual` (IN `p_contact_id` VARCHAR(255), IN `p_template_id` INT, IN `p_sms_insert_date` DATETIME, IN `p_sent_date` DATETIME, IN `p_year_id` INT, IN `p_branch_id` INT, IN `p_uniq_number` VARCHAR(255), IN `p_user_type` INT, IN `p_created_by` INT, IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(255))  NO SQL
BEGIN
	DECLARE v_templatebody text;
	SELECT  template_content into v_templatebody  FROM tbl_template where template_id = p_template_id;
	INSERT 
  			INTO tbl_sms
       			(sms_type,to_name,to_phone_number,to_number,
        		sms_text,branch_id,year_id,sms_insert_date,
        		sent_date,uniq_number,user_type,created_by,created_date)
		 	SELECT 11,first_name,mobile,contact_id,v_templatebody,
				p_branch_id,p_year_id,p_sms_insert_date,p_sent_date,p_uniq_number,
				p_user_type,p_created_by,p_created_date 
			FROM tbl_contacts 
			WHERE contact_id IN (SELECT c.contact_id FROM tbl_contacts c WHERE FIND_IN_SET(c.contact_id,p_contact_id) );
	SET p_result='Success';
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_sms` (IN `p_to_name` VARCHAR(100), IN `p_to_number` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_to_phone_number` VARCHAR(50), IN `p_sms_insert_date` DATETIME, IN `p_sms_text` VARCHAR(500), IN `p_sms_type` INT(11), IN `p_sent_date` DATETIME, IN `p_sent_flag` INT(11), IN `p_sms_status` INT(11), IN `p_uniq_number` VARCHAR(50), IN `p_user_type` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(50))  NO SQL
BEGIN
	INSERT INTO tbl_sms(to_name,
                        to_number,
                        branch_id,
                        year_id,
                        to_phone_number,
                        sms_insert_date,
                        sms_text,
                        sms_type,
                        sent_date,
                        sent_flag,
                        sms_status,
                        uniq_number,
                        user_type,
                        created_by,
                        created_date) 
		values(p_to_name,
              	p_to_number,
              p_branch_id,
             p_year_id,
               p_to_phone_number,
              p_sms_insert_date,
              p_sms_text,
              p_sms_type,
              p_sent_date,
              p_sent_flag,
              p_sms_status,
              p_uniq_number,
             p_user_type,
              p_created_by,
              p_created_date);
              IF row_count() = 0 THEN
               		  SET p_result = "Sorry!Please try once again";
                ELSE
                       SET p_result = LAST_INSERT_ID();
				
                END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_specialScheme` (IN `p_special_scheme_name` VARCHAR(250), IN `p_status` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, IN `p_fee_categories` TEXT, OUT `p_result` VARCHAR(250), OUT `p_error_flag` INT)  NO SQL
BEGIN
DECLARE  v_cnt int;

SET v_cnt=0;

			SELECT 
					count(1)
			INTO
					v_cnt
			FROM
					tbl_special_schemes
			WHERE
					branch_id = p_branch_id
			AND
					year_id = p_year_id
			AND
					upper(special_scheme_name) = upper(p_special_scheme_name);
			
			IF(v_cnt =0) THEN

			INSERT INTO
											tbl_special_schemes
											(special_scheme_name, 
                                             fee_categories,
                                            branch_id,
                                            year_id,
                                            status,
                                            created_by,
                                            created_date)
					VALUES
											(p_special_scheme_name,
                                             p_fee_categories,
                                            p_branch_id,
                                            p_year_id,
                                            p_status,
                                            p_created_by,
                                            p_created_date);

                                     IF row_count() = 0 THEN
                                                SET p_result = "Sorry!Please try once again";
												SET p_error_flag = 0;
                                     ELSE
                                               SET p_result = LAST_INSERT_ID();
											SET p_error_flag = 1;
                                     END IF;        

			ELSE
				SET p_result = "Sorry!Please try once again, special scheme  name already exist";
				SET p_error_flag = 0;
			END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_stop` (IN `p_route_id` INT(11), IN `p_stop_number` VARCHAR(25), IN `p_stop_name` VARCHAR(250), IN `p_landmark` VARCHAR(250), IN `p_distance` FLOAT, IN `p_pickup_time` TIME, IN `p_drop_time` TIME, IN `p_type_plan_id` INT, IN `p_branch_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN
						
	INSERT INTO
							tbl_stops
                                                        (route_id,
							stop_number,
							stop_name,
							landmark,
							distance,
							pickup_time,
							drop_time,
							type_plan_id,
							branch_id,
							status,
							created_by,
							created_date)
                                    VALUES
							(p_route_id,
							p_stop_number,
							p_stop_name,
							p_landmark,
							p_distance,
							p_pickup_time,
							p_drop_time,
							p_type_plan_id,
							p_branch_id,
							p_status,
							p_created_by,
							p_created_date);

			
									IF row_count() = 0 THEN
               
										SET p_result = "Sorry!Please try once again";

									ELSE

										SET p_result = "Sucess";
				
									END IF;		
		



END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_student` (IN `p_admission_number` VARCHAR(250), IN `p_student_number` INT(11), IN `p_student_name` VARCHAR(250), IN `p_student_middlename` VARCHAR(250), IN `p_student_lastname` VARCHAR(250), IN `p_family_doctor` VARCHAR(250), IN `p_doctor_mobile` VARCHAR(250), IN `p_gender` ENUM('Male','Female'), IN `p_student_dob` DATETIME, IN `p_place_birth` VARCHAR(250), IN `p_student_email` VARCHAR(250), IN `p_address` VARCHAR(250), IN `p_landmark` VARCHAR(250), IN `p_area_id` INT(11), IN `p_pincode` VARCHAR(250), IN `p_present_landmark` VARCHAR(250), IN `p_present_address` VARCHAR(250), IN `p_present_area_id` INT(11), IN `p_present_pincode` VARCHAR(250), IN `p_blood_group` VARCHAR(250), IN `p_moleidentity1` VARCHAR(250), IN `p_moleidentity2` VARCHAR(250), IN `p_religion_id` INT(11), IN `p_nationality_id` INT(11), IN `p_mother_tongue` INT(11), IN `p_referred_by` INT(11), IN `p_referred_name` VARCHAR(250), IN `p_previous_school` VARCHAR(250), IN `p_application_id` INT(11), IN `p_enquery_id` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_cast_id` INT, IN `p_course_id` INT, IN `p_daycare_id` INT, IN `p_category_id` INT, IN `p_quota_id` INT, IN `p_studnet_photo` INT, OUT `p_student_academic_id` INT, IN `p_section_id` INT)  BEGIN

	DECLARE v_country_id INT;
	DECLARE v_state_id INT;
	DECLARE v_city_id INT;
	DECLARE v_p_country_id INT;

	DECLARE v_p_state_id INT;
	DECLARE v_p_city_id INT;
    DECLARE  v_admission_number INT;
	DECLARE  v_student_id INT;
	DECLARE v_student_academic_id INT;

	

		SELECT
							MAX(admission_number)+1
		INTO 
							v_admission_number
								
        FROM
							tbl_student;
		
IF v_admission_number IS NULL THEN SET v_admission_number = 1; END IF;


		SELECT 
			country_id,
			state_id,
			city_id
		INTO
			v_country_id,
			v_state_id,
			v_city_id

		FROM
			tbl_area 
		WHERE 
			area_id = p_area_id;

		SELECT 
			country_id,
			state_id,
			city_id
		INTO
			v_p_country_id,
			v_p_state_id,
			v_p_city_id

		FROM
			tbl_area 
		WHERE 
			area_id = p_present_area_id;


		INSERT INTO
					tbl_student
					(admission_number,
					student_number,
					student_name,
					student_middlename,
					student_lastname,
					family_doctor,
					doctor_mobile,
					gender,
					student_dob,
					place_birth,
					student_email,
					address,
					landmark,
					area_id,
					city_id,
					state_id,
					country_id,
					pincode,
					present_landmark,
					present_address,
					present_area_id,
					present_city_id,
					present_state_id,
					present_country_id,
					present_pincode,
					blood_group,
					moleidentity1,
					moleidentity2,
					religion_id,
					nationality_id,
                    cast_id,
					mother_tongue,
					referred_by,
					referred_name,
					previous_school,
					application_id,
					enquery_id,
					branch_id,
					year_id,
					status,
					created_by,
					created_date)
		VALUES
					(p_admission_number,
					v_admission_number,
					p_student_name,
					p_student_middlename,
					p_student_lastname,
					p_family_doctor,
					p_doctor_mobile,

					p_gender,
					p_student_dob,
					p_place_birth,
					p_student_email,
					p_address,
					p_landmark,
					p_area_id,
					v_city_id,
					v_state_id,
					v_country_id,
					p_pincode,
					p_present_landmark,
					p_present_address,
					p_present_area_id,
					v_p_city_id,
					v_p_state_id,
					v_p_country_id,
					p_present_pincode,
					p_blood_group,
					p_moleidentity1,
					p_moleidentity2,
					p_religion_id,
					p_nationality_id,
                    p_cast_id,
					p_mother_tongue,
					p_referred_by,
					p_referred_name,
					p_previous_school,
					p_application_id,
					p_enquery_id,
					p_branch_id,
					p_year_id,
					p_status,
					p_created_by,
					p_created_date
					);

	SET v_student_id =   LAST_INSERT_ID();
	SET p_result = v_student_id;
  
	INSERT INTO 
							tbl_student_academic
							(branch_id,
							year_id,
							admission_number,
							student_id,
							course_id,
                            section_id,
							daycare_id,
                            category_id,
                            quota_id,
                            studnet_photo,
							status,
							created_by,
							created_date
							)
			VALUES
							(p_branch_id,
							p_year_id,
							p_admission_number,
							v_student_id,
							p_course_id,
                            p_section_id,
							p_daycare_id,
                            p_category_id,
                            p_quota_id,
                            p_studnet_photo,
							p_status,
							p_created_by,
							p_created_date);






			IF row_count() = 0 THEN
				SET p_result = "Sorry!Please try once again";
			ELSE
                SET v_student_academic_id =   LAST_INSERT_ID();
				SET p_student_academic_id = v_student_academic_id;
			END IF;  


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_student1` (IN `p_admission_number` VARCHAR(250), IN `p_student_number` INT(11), IN `p_student_name` VARCHAR(250), IN `p_student_middlename` VARCHAR(250), IN `p_student_lastname` VARCHAR(250), IN `p_family_doctor` VARCHAR(250), IN `p_doctor_mobile` VARCHAR(250), IN `p_gender` ENUM('Male','Female'), IN `p_student_dob` DATETIME, IN `p_place_birth` VARCHAR(250), IN `p_student_email` VARCHAR(250), IN `p_address` VARCHAR(250), IN `p_landmark` VARCHAR(250), IN `p_area_id` INT(11), IN `p_pincode` VARCHAR(250), IN `p_present_landmark` VARCHAR(250), IN `p_present_address` VARCHAR(250), IN `p_present_area_id` INT(11), IN `p_present_pincode` VARCHAR(250), IN `p_blood_group` VARCHAR(250), IN `p_moleidentity1` VARCHAR(250), IN `p_moleidentity2` VARCHAR(250), IN `p_religion_id` INT(11), IN `p_nationality_id` INT(11), IN `p_mother_tongue` INT(11), IN `p_referred_by` INT(11), IN `p_referred_name` VARCHAR(250), IN `p_previous_school` VARCHAR(250), IN `p_application_id` INT(11), IN `p_enquery_id` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_cast_id` INT, IN `p_course_id` INT, IN `p_daycare_id` INT, IN `p_category_id` INT, IN `p_quota_id` INT, IN `p_studnet_photo` INT, OUT `p_student_academic_id` INT, IN `p_section_id` INT, IN `p_subcast_id` INT(11), IN `p_sibling_student` INT, IN `p_sibling_type` INT)  BEGIN

	DECLARE v_country_id INT;
	DECLARE v_state_id INT;
	DECLARE v_city_id INT;
	DECLARE v_p_country_id INT;
	DECLARE v_p_state_id INT;
	DECLARE v_p_city_id INT;
    DECLARE  v_admission_number INT;
	DECLARE  v_student_id INT;
	DECLARE v_student_academic_id INT;
	

		SELECT
							MAX(admission_number)+1
		INTO 
							v_admission_number
								
        FROM
							tbl_student;
		
IF v_admission_number IS NULL THEN SET v_admission_number = 1; END IF;

		SELECT 
			country_id,
			state_id,
			city_id
		INTO
			v_country_id,
			v_state_id,
			v_city_id

		FROM
			tbl_area 
		WHERE 
			area_id = p_area_id;

		SELECT 
			country_id,
			state_id,
			city_id
		INTO
			v_p_country_id,
			v_p_state_id,
			v_p_city_id

		FROM
			tbl_area 
		WHERE 
			area_id = p_present_area_id;


		INSERT INTO
					tbl_student
					(admission_number,
					student_number,
					student_name,
					student_middlename,
					student_lastname,
					family_doctor,
					doctor_mobile,
					gender,
					student_dob,
					place_birth,
					student_email,
					address,
					landmark,
					area_id,
					city_id,
					state_id,
					country_id,
					pincode,
					present_landmark,
					present_address,
					present_area_id,
					present_city_id,
					present_state_id,
					present_country_id,
					present_pincode,
					blood_group,
					moleidentity1,
					moleidentity2,
					religion_id,
					nationality_id,
                    cast_id,
					mother_tongue,
					referred_by,
					referred_name,
					previous_school,
					application_id,
					enquery_id,
					branch_id,
					year_id,
					status,
					created_by,
					created_date,
                    subcast_id)
		VALUES
					(p_admission_number,
					v_admission_number,
					p_student_name,
					p_student_middlename,
					p_student_lastname,
					p_family_doctor,
					p_doctor_mobile,

					p_gender,
					p_student_dob,
					p_place_birth,
					p_student_email,
					p_address,
					p_landmark,
					p_area_id,
					v_city_id,
					v_state_id,
					v_country_id,
					p_pincode,
					p_present_landmark,
					p_present_address,
					p_present_area_id,
					v_p_city_id,
					v_p_state_id,
					v_p_country_id,
					p_present_pincode,
					p_blood_group,
					p_moleidentity1,
					p_moleidentity2,
					p_religion_id,
					p_nationality_id,
                    p_cast_id,
					p_mother_tongue,
					p_referred_by,
					p_referred_name,
					p_previous_school,
					p_application_id,
					p_enquery_id,
					p_branch_id,
					p_year_id,
					p_status,
					p_created_by,
					p_created_date,
                    p_subcast_id
					);

	SET v_student_id =   LAST_INSERT_ID();
	SET p_result = v_student_id;
  
	INSERT INTO 
							tbl_student_academic
							(branch_id,
							year_id,
							admission_number,
							student_id,
							course_id,
                            section_id,
							daycare_id,
                            category_id,
                            quota_id,
                            studnet_photo,
							status,
							created_by,
							created_date,
                            sibling_student,
                            sibling_type
							)
			VALUES
							(p_branch_id,
							p_year_id,
							p_admission_number,
							v_student_id,
							p_course_id,
                            p_section_id,
							p_daycare_id,
                            p_category_id,
                            p_quota_id,
                            p_studnet_photo,
							p_status,
							p_created_by,
							p_created_date,
							p_sibling_student,
							p_sibling_type
                            );
			IF row_count() = 0 THEN
				SET p_result = "Sorry!Please try once again";
			ELSE
                SET v_student_academic_id =   LAST_INSERT_ID();
				SET p_student_academic_id = v_student_academic_id;
			END IF;  
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_studentAcademic` (IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_admission_number` INT(11), IN `p_student_id` INT(11), IN `p_roll_number` INT(11), IN `p_course_id` INT(11), IN `p_daycare_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN


			INSERT INTO 
							tbl_student_academic
							(branch_id,
							year_id,
							admission_number,
							student_id,
							roll_number,
							course_id,
							daycare_id,
							status,
							created_by,
							created_date
							)
			VALUES
							(p_branch_id,
							p_year_id,
							p_admission_number,
							p_student_id,
							p_roll_number,
							p_course_id,
							p_daycare_id,
							p_status,
							p_created_by,
							p_created_date);


			IF row_count() = 0 THEN

				SET p_result = "Sorry!Please try once again";
			ELSE
				SET p_result = "Sucess";
			END IF;  


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_studentAttendance` (IN `p_attendance_flag` ENUM('P','A','L'), IN `p_course_id` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_student_academic_id` INT(11), IN `p_student_id` INT(11), IN `p_subject_id` INT(11), IN `p_period_id` INT(11), IN `p_remarks` VARCHAR(250), IN `p_leave_flag` TINYINT(1), IN `p_leave_confirmed_by` INT(11), IN `p_status` ENUM('0','1','2'), IN `p_attendance_by` INT(11), IN `p_attendance_date` DATETIME, IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN
			

INSERT INTO
							tbl_student_attendance
						(attendance_flag,
                         course_id,
						branch_id,
						year_id,
						student_academic_id,
						student_id,
						subject_id,
						period_id,
						remarks,
						leave_flag,
						leave_confirmed_by,
						status,
						attendance_by,
						attendance_date,
						created_by,
						created_date)

			VALUES
						(p_attendance_flag,
                         p_course_id,
						p_branch_id,
						p_year_id,
						p_student_academic_id,
						p_student_id,
						p_subject_id,
						p_period_id,
						p_remarks,
						p_leave_flag,
						p_leave_confirmed_by,
						p_status,
						p_attendance_by,
						p_attendance_date,
						p_created_by,
						p_created_date);


				IF row_count() = 0 THEN

					   SET p_result = "Sorry!Please try once again";
                ELSE
                       SET p_result = LAST_INSERT_ID();
				
                END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_studentLanguage` (IN `p_student_id` INT, IN `p_language_id` INT, IN `p_write` INT, IN `p_read` INT, IN `p_speak` INT, IN `p_branch_id` INT, OUT `p_result` INT)  NO SQL
BEGIN


INSERT INTO tbl_student_languages
		(student_id, language_id, l_write, l_read, l_speak, branch_id )
		VALUES(p_student_id, p_language_id,p_write, p_read, p_speak, p_branch_id);

IF row_count() = 0 THEN
   	SET p_result = "Sorry!Please try once again";
ELSE
	SET p_result = LAST_INSERT_ID();
END IF;   

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_studentParent` (IN `p_application_id` INT(11), IN `p_parent_firstname` VARCHAR(250), IN `p_parent_lastname` VARCHAR(250), IN `p_parent_dob` DATE, IN `p_parent_nationality` INT(11), IN `p_parent_qualification` INT(11), IN `p_parent_designation` VARCHAR(250), IN `p_parent_company` VARCHAR(250), IN `p_parent_address` VARCHAR(250), IN `p_parent_occupation` VARCHAR(250), IN `p_parent_office_number` VARCHAR(50), IN `p_parent_mobile_number` VARCHAR(20), IN `p_parent_email_id` VARCHAR(250), IN `p_relation_type` INT(11), IN `p_primary_contact` VARCHAR(50), IN `p_area_id` INT(11), IN `p_address` VARCHAR(250), IN `p_landmark` VARCHAR(250), IN `p_pincode` VARCHAR(11), IN `p_id_proof_type` VARCHAR(250), IN `p_id_proof_number` VARCHAR(250), OUT `p_result` VARCHAR(250), IN `p_created_by` INT, IN `p_created_date` DATETIME, IN `p_parent_middlename` VARCHAR(250), IN `p_parent_id` INT, IN `p_parent_photo` VARCHAR(250), IN `p_student_id` INT)  BEGIN

	
	
	Declare v_country_id int;
	Declare v_state_id int;
	Declare v_city_id int;

		UPDATE 
				tbl_student_parents
		SET
				STATUS = '1'
		WHERE
				parent_id = p_parent_id;

		

		SELECT 
			country_id,
			state_id,
			city_id
		INTO
			v_country_id,
			v_state_id,
			v_city_id

		FROM
			tbl_area 
		WHERE 
			area_id = p_area_id;
		
		

		
		INSERT INTO 
					tbl_student_parents (application_id,
                                        parent_firstname,
                                        parent_middlename,
                                        parent_lastname,
                                        parent_dob,
                                        parent_nationality,
                                        parent_qualification,
                                        parent_designation,
                                        parent_company,
                                        parent_address,
                                        parent_occupation,
                                        parent_office_number,
                                        parent_mobile_number,
                                        parent_email_id,
                                        relation_type,
                                        primary_contact,
                                        country_id,
                                        city_id,
                                        area_id,
                                        address,
                                        landmark,
                                        state_id,
                                        pincode,
                                        id_proof_type,
                                        id_proof_number,
                                        created_by,
                                        created_date,
                                        parent_photo,
                                        student_id)
		VALUES
				(p_application_id,
                p_parent_firstname,
                p_parent_middlename,
                p_parent_lastname,
                p_parent_dob,
                p_parent_nationality,
                p_parent_qualification,
                p_parent_designation,
                p_parent_company,
                p_parent_address,
                p_parent_occupation,
                p_parent_office_number,
                p_parent_mobile_number,
                p_parent_email_id,
                p_relation_type,
                p_primary_contact,
                v_country_id,
                v_city_id,
                p_area_id,
                p_address,
                p_landmark,
                v_state_id,
                p_pincode,
                p_id_proof_type,
                p_id_proof_number,
                p_created_by,
                p_created_date,
                p_parent_photo,
                p_student_id);
		
		IF row_count() = 0 THEN
                SET p_result = "Sorry!Please try once again";
        ELSE
			SET p_result = LAST_INSERT_ID();			
            
         END IF;
	

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_studentPlanType` (IN `p_student_id` INT, IN `p_application_id` INT, IN `p_admission_number` INT, IN `p_student_academic_id` INT, IN `p_type_plan_id` INT(11), IN `p_concession_id` INT(11), IN `p_discount_amount` FLOAT, IN `p_mode_flag` ENUM('credit','debit'), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN


DECLARE v_limitcnt INT;
DECLARE v_user_min FLOAT;
DECLARE v_discount FLOAT;
DECLARE  v_pendingdiscount FLOAT;
DECLARE v_actualamount FLOAT;
DECLARE v_paidAmount FLOAT;
DECLARE v_concession FLOAT;

SET v_limitcnt = 0;
SET v_user_min = 0;
SET v_discount = 0;
SET v_pendingdiscount = 0;
SET v_actualamount = 0;
SET v_paidAmount = 0;
SET v_concession = 0;

INSERT INTO
                        tbl_student_plan_type
                        (student_id,
                         application_id,
                         admission_number,
                         student_academic_id,
                         type_plan_id,
                         concession_id,
                         discount_amount,
                         mode_flag,
                         status,
                         branch_id,
                         year_id,
                         created_by,
                         created_date
                                    )
            
            VALUES
                    (p_student_id,
                     p_application_id,
                     p_admission_number,
                     p_student_academic_id,
                     p_type_plan_id,
                     0,
                     0,
                     'credit',
                     p_status,
                     p_branch_id,
                     p_year_id,
                     p_created_by,
                     p_created_date);


    IF row_count() = 0 THEN
                    
                    SET p_result = "Sorry!Please try once again";

    ELSE
    
    IF p_discount_amount  > 0   OR  p_concession_id > 0 THEN
    
            SELECT   
                    IFNULL(SUM(IFNULL(amount,0)),0)
            INTO    
                    v_paidAmount
            FROM    
                    tbl_fee_transactions pt
            WHERE     
                    pt.studnet_id = p_student_id
            AND
                    pt.type_plan_id = p_type_plan_id;
            
                          SELECT   
                                    get_feeTypeamount(fee_type_id)
                          INTO
                                    v_actualamount
                          FROM         
                                    tbl_fee_type_plan tp where tp.type_plan_id = p_type_plan_id;
                        
     SELECT IFNULL(get_S_F_discount(p_type_plan_id,p_student_id,p_branch_id,p_year_id),0) INTO v_discount;
     
     SELECT IFNULL(get_S_F_concession (p_type_plan_id , v_actualamount ,p_student_id,p_branch_id,p_year_id),0) INTO v_concession;
     
     SELECT   IFNULL(SUM(IFNULL(discount_amount,0)),0) INTO v_pendingdiscount FROM tbl_approval_requests WHERE  student_id = p_student_id  and type_plan_id = p_type_plan_id and branch_id = p_branch_id and approval_status = 'Pending';
        
    
       IF (v_actualamount - v_paidAmount- v_discount - v_pendingdiscount - v_concession) >= (p_discount_amount )  THEN   
            
           
    
    
    
        IF p_discount_amount  > 0 THEN          
       
            
            
            SELECT 
                        min(min_limit)
             INTO 
                        v_user_min    
             FROM 
                        tbl_approvals 
             WHERE 
                        approval_type ='discounts'
             AND 
                        branch_id = p_branch_id;
             
           IF v_user_min >   p_discount_amount THEN
             
             INSERT INTO
                            tbl_student_plan_type
                            (student_id,
                             application_id,
                             admission_number,
                             student_academic_id,
                             type_plan_id,
                             concession_id,
                             discount_amount,
                             mode_flag,
                             status,
                             branch_id,
                             year_id,
                             created_by,
                             created_date
                                        )
            
            VALUES
                            (p_student_id,
                             p_application_id,
                             p_admission_number,
                             p_student_academic_id,
                             p_type_plan_id,
                             0,
                             p_discount_amount,
                             'debit',
                             p_status,
                             p_branch_id,
                             p_year_id,
                             p_created_by,
                             p_created_date);
                             
                ELSE 
                            INSERT INTO 
                                        tbl_approval_requests
                                        (user_id,
                                         student_id,
                                         type_plan_id,
                                         discount_amount,
                                         concession_id,
                                         branch_id,
                                         year_id,
                                         status,
                                         approval_status,
                                         created_by,
                                         created_date)
                                VALUES 
                                        (p_created_by,
                                        p_student_id,
                                        p_type_plan_id,
                                        p_discount_amount,
                                        0,
                                        p_branch_id, 
                                        p_year_id,
                                        p_status,
                                        'Pending',
                                        p_created_by,
                                        p_created_date);
                                        
                
                         
                END IF;
                
                SET p_result = "Sucess";
                
            
             
             
             
             END IF; 
             
        IF p_concession_id  > 0 THEN     
     
                INSERT INTO
                            tbl_student_plan_type
                            (student_id,
                             application_id,
                             admission_number,
                             student_academic_id,
                             type_plan_id,
                             concession_id,
                             discount_amount,
                             mode_flag,
                             status,
                             branch_id,
                             year_id,
                             created_by,
                             created_date
                                        )
            
            VALUES
                            (p_student_id,
                             p_application_id,
                             p_admission_number,
                             p_student_academic_id,
                             p_type_plan_id,
                             p_concession_id,
                             0,
                             'debit',
                             p_status,
                             p_branch_id,
                             p_year_id,
                             p_created_by,
                             p_created_date);
                
        END IF; 
        
        
        ELSE 
                 SET p_result = "We can't provide the discoumt more then balence";    
                    
            END IF; 
    
    END IF; 
    END IF;  
                
 
 
    

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_studentPrevSchool` (IN `p_school_name` VARCHAR(100), IN `p_student_id` INT(11), IN `p_class_id` INT(11), IN `p_medium_id` INT(11), IN `p_board_id` INT(11), IN `p_prevresult` VARCHAR(200), IN `p_year_id` INT(11), IN `p_address` VARCHAR(250), IN `p_location` VARCHAR(250), IN `p_area_id` INT(11), IN `p_city_id` INT(11), IN `p_state_id` INT(11), IN `p_country_id` INT(11), IN `p_pincode` VARCHAR(20), IN `p_status` ENUM('0','1'), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

		INSERT INTO
					 tbl_student_previousschool
					(school_name,
					student_id,
					class_id,
					medium_id,
					board_id,
					prevresult,
					year_id,                    
					address,
					location,
					area_id,
					city_id,
					state_id,
					country_id,
					pincode,
					status,
					created_by,
					created_date
					)
		values
					(p_school_name,
					p_student_id,
					p_class_id,
					p_medium_id,
					p_board_id,
					p_prevresult,
					p_year_id,
					p_address,
					p_location,
					p_area_id,
					p_city_id,
					p_state_id,
					p_country_id,
					p_pincode,
					p_status,
					p_created_by,
					p_created_date
					);


				IF row_count() = 0 THEN
               		  SET p_result = "Sorry!Please try once again";
                ELSE
                       SET p_result = LAST_INSERT_ID();
				
                END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_student_activity_marks` (IN `p_student_id` INT(11), IN `p_student_academic_id` INT(11), IN `p_activity_id` INT(11), IN `p_activity_course_id` INT(11), IN `p_marks` FLOAT(10,2), IN `p_remarks` VARCHAR(250), IN `p_teacher_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_attendance_flag` VARCHAR(10))  BEGIN

DECLARE v_cnt INT DEFAULT 0;

SELECT activity_marks_id INTO v_cnt 
FROM tbl_activity_marks 
WHERE student_id = p_student_id
AND activity_id = p_activity_id
AND activity_course_id = p_activity_course_id
AND student_academic_id = p_student_academic_id;

IF v_cnt = 0 THEN 

INSERT INTO `tbl_activity_marks` (`student_id`, `student_academic_id`, `activity_id`, `activity_course_id`, `marks`, `remarks`, `evaluated_by`, `status`, `branch_id`, `year_id`, `created_by`, `created_date`, `modified_by`, `modified_date`,`attendance_flag`) 
VALUES (p_student_id, p_student_academic_id, p_activity_id, p_activity_course_id, p_marks, p_remarks, p_teacher_id, p_status, p_branch_id, p_year_id, p_created_by, p_created_date, p_modified_by, p_modified_date, p_attendance_flag);

    IF row_count() = 0 THEN
        SET p_result = "Sorry!Please try once again";
    ELSE
        SET p_result = LAST_INSERT_ID();

    END IF;
ELSE 

    UPDATE tbl_activity_marks 
    SET marks = p_marks, remarks = p_remarks,
    modified_by=p_modified_by, modified_date=p_modified_date,
	attendance_flag = p_attendance_flag
    WHERE student_id = p_student_id
    AND activity_id = p_activity_id
    AND activity_course_id = p_activity_course_id
    AND student_academic_id = p_student_academic_id;

	IF row_count() = 0 THEN
        SET p_result = "Sorry!Please try once again2";
    ELSE
        SET p_result = v_cnt;

    END IF;
END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_student_coarea_grades` (IN `p_student_id` INT(11), IN `p_student_academic_id` INT(11), IN `p_area_course_id` INT(11), IN `p_grade_id` VARCHAR(11), IN `p_remarks` VARCHAR(250), IN `p_teacher_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_marks` VARCHAR(10), IN `p_attendance_flag` ENUM('A','P'))  BEGIN
DECLARE v_cnt INT DEFAULT 0;

SELECT area_grade_id INTO v_cnt 
FROM tbl_coscholastic_grades 
WHERE student_id = p_student_id
AND area_course_id = p_area_course_id
AND student_academic_id = p_student_academic_id;

IF v_cnt = 0 THEN 

INSERT INTO `tbl_coscholastic_grades` (`student_id`, `student_academic_id`, `area_course_id`, `grade_id`, `remarks`, `evaluated_by`, `status`, `branch_id`, `year_id`, `created_by`, `created_date`, `modified_by`, `modified_date`, `marks`, `attendance_flag`) 
VALUES (p_student_id, p_student_academic_id, p_area_course_id, p_grade_id, p_remarks, p_teacher_id, p_status, p_branch_id, p_year_id, p_created_by, p_created_date, p_modified_by, p_modified_date, p_marks, p_attendance_flag);

    IF row_count() = 0 THEN
        SET p_result = "Sorry!Please try once again";
    ELSE
        SET p_result = LAST_INSERT_ID();

    END IF;
ELSE 

    UPDATE tbl_coscholastic_grades 
    SET grade_id = p_grade_id, remarks = p_remarks, marks = p_marks, attendance_flag = p_attendance_flag 
    WHERE student_id = p_student_id
    AND area_course_id = p_area_course_id
    AND student_academic_id = p_student_academic_id;

    IF row_count() = 0 THEN
        SET p_result = "Sorry! Please try once again";
    ELSE
        SET p_result = v_cnt;
    END IF;
END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_student_exam_marks` (IN `p_student_id` INT(11), IN `p_student_academic_id` INT(11), IN `p_exam_id` INT(11), IN `p_exam_course_id` INT(11), IN `p_marks` FLOAT(10,2), IN `p_attendance_flag` ENUM('A','P'), IN `p_remarks` VARCHAR(250), IN `p_teacher_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

DECLARE v_cnt INT DEFAULT 0;

SELECT marks_id INTO v_cnt 
FROM tbl_student_exam_marks 
WHERE student_id = p_student_id
AND exam_id = p_exam_id
AND exam_course_id = p_exam_course_id
AND student_academic_id = p_student_academic_id;

IF v_cnt = 0 THEN 

INSERT INTO `tbl_student_exam_marks` (`student_id`, `student_academic_id`, `exam_id`, `exam_course_id`, `marks`, `attendance_flag`, `remarks`, `teacher_id`, `status`, `branch_id`, `year_id`, `created_by`, `created_date`, `modified_by`, `modified_date`) 
VALUES (p_student_id, p_student_academic_id, p_exam_id, p_exam_course_id, p_marks, p_attendance_flag, p_remarks, p_teacher_id, p_status, p_branch_id, p_year_id, p_created_by, p_created_date, p_modified_by, p_modified_date);

   IF row_count() = 0 THEN
       SET p_result = "Sorry!Please try once again";
   ELSE
       SET p_result = LAST_INSERT_ID();

   END IF;
ELSE 

   UPDATE tbl_student_exam_marks 
   SET marks = p_marks,remarks = p_remarks, attendance_flag = p_attendance_flag 
   WHERE student_id = p_student_id
   AND exam_id = p_exam_id
   AND exam_course_id = p_exam_course_id
   AND student_academic_id = p_student_academic_id;

IF row_count() = 0 THEN
       SET p_result = "Sorry!Please try once again";
   ELSE
       SET p_result = v_cnt;

   END IF;
END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_tblPeriods` (IN `p_timetable_id` INT(11), IN `p_subject_id` INT(11), IN `p_teacher_id` INT(11), IN `p_week_day` INT(11), IN `p_duration` INT, IN `p_start_time` TIME, IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_created_by` INT(11), OUT `p_result` VARCHAR(250), IN `p_created_date` DATETIME, IN `p_is_break` ENUM('0','1'))  BEGIN

INSERT INTO
						tbl_periods	
					(timetable_id,
					subject_id,
					teacher_id,
					week_day,
					duration,
					start_time,
					branch_id,
					year_id,
					status,
					created_by,
					created_date,
                    is_break)
		VALUES
					(p_timetable_id,
					p_subject_id,
					p_teacher_id,
					p_week_day,
					p_duration,
					p_start_time,
					p_branch_id,
					p_year_id,
					p_status,
					p_created_by,
					p_created_date,
                    p_is_break);
                    
			
				IF row_count() = 0 THEN
						SET p_result = "Sorry!Please try once again";
                ELSE
                       SET p_result = LAST_INSERT_ID();
				
                END IF;	
		



END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_temp_application1` (IN `p_application_number` VARCHAR(250), IN `p_reference_no` VARCHAR(250), IN `p_lead_id` INT(11), IN `p_year_id` INT(11), IN `p_branch_id` INT(11), IN `p_student_firstname` VARCHAR(250), IN `p_student_middlename` VARCHAR(250), IN `p_student_lastname` VARCHAR(250), IN `p_course_id` INT(11), IN `p_gender` ENUM('Male','Female'), IN `p_dob` DATE, IN `p_student_email` VARCHAR(250), IN `p_previous_school` VARCHAR(250), IN `p_area_id` INT(11), IN `p_landmark` VARCHAR(250), IN `p_address` VARCHAR(250), IN `p_present_area_id` INT(11), IN `p_present_landmark` VARCHAR(250), IN `p_present_address` VARCHAR(250), IN `p_pincode` VARCHAR(50), IN `p_religion_id` INT(11), IN `p_cast_id` INT(11), IN `p_nationality` INT(11), IN `p_mother_tongue` INT(11), IN `p_referrence_name` VARCHAR(250), IN `p_application_status` ENUM('application','admission'), IN `p_created_date` DATETIME, IN `p_created_by` INT(11), OUT `p_result` VARCHAR(250), IN `p_student_photo` VARCHAR(250), IN `p_subcast_id` INT(11), IN `p_payee_email` VARCHAR(150), IN `p_payee_name` VARCHAR(150), IN `p_payee_mobile` VARCHAR(150))  BEGIN

	
Declare v_country_id int;
	Declare v_state_id int;
	Declare v_city_id int;
	

		SELECT 
			country_id,
			state_id,
			city_id
		INTO
			v_country_id,
			v_state_id,
			v_city_id

		FROM
			tbl_area 
		WHERE 
			area_id = p_area_id;

		INSERT INTO 
					tbl_temp_applications (application_number,
									reference_no,
                                    lead_id,
                                    year_id,
                                    branch_id,
                                    student_firstname,
                                    student_middlename,
                                    student_lastname,
                                    course_id,
                                    gender,
                                    dob,
                                    student_email,
                                    country_id,
                                    previous_school,
                                    state_id,
                                    city_id,
                                    area_id,
                                    landmark,
                                    address,
                                    present_country_id,
                                    present_state_id,
                                    present_city_id,
                                    present_area_id,
                                    present_landmark,
                                    present_address,
                                    pincode,
                                    religion_id,
                                    cast_id,
                                    nationality,
                                    mother_tongue,
                                    referrence_name,
                                    application_status,
                                    created_date,
                                    created_by,
                                    status,
                                    student_photo,
                                     subcast_id,
                                     payee_email,
                                     payee_name,
                                     payee_mobile)
		VALUES
					(p_application_number,
                    p_reference_no,
                    p_lead_id,
                    p_year_id,
                    p_branch_id,
                    p_student_firstname,
                    p_student_middlename,
                    p_student_lastname,
                    p_course_id,
                    p_gender,
                    p_dob,
                    p_student_email,
                    v_country_id,
                    p_previous_school,
                    v_state_id,
                    v_city_id,
                    p_area_id,
                    p_landmark,
                    p_address,
                    v_country_id,
                    v_state_id,
                    v_city_id,
                    p_present_area_id,
                    p_present_landmark,
                    p_present_address,
                    p_pincode,
                    p_religion_id,
                    p_cast_id,
                    p_nationality,
                    p_mother_tongue,
                    p_referrence_name,
                    p_application_status,
                    p_created_date,
                    p_created_by,
                    '0',
                    p_student_photo,
                    p_subcast_id,
                    p_payee_email,
                    p_payee_name,
                    p_payee_mobile);
		
		IF row_count() = 0 THEN
                SET p_result = "Sorry!Please try once again";
                ELSE
                       SET p_result = LAST_INSERT_ID();
				UPDATE tbl_leads SET lead_status= 'application' WHERE lead_id = p_lead_id;
                END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_temp_studentParent` (IN `p_application_id` INT(11), IN `p_parent_firstname` VARCHAR(250), IN `p_parent_lastname` VARCHAR(250), IN `p_parent_dob` DATE, IN `p_parent_nationality` INT(11), IN `p_parent_qualification` INT(11), IN `p_parent_designation` VARCHAR(250), IN `p_parent_company` VARCHAR(250), IN `p_parent_address` VARCHAR(250), IN `p_parent_occupation` VARCHAR(250), IN `p_parent_office_number` VARCHAR(50), IN `p_parent_mobile_number` VARCHAR(20), IN `p_parent_email_id` VARCHAR(250), IN `p_relation_type` INT(11), IN `p_primary_contact` VARCHAR(50), IN `p_area_id` INT(11), IN `p_address` VARCHAR(250), IN `p_landmark` VARCHAR(250), IN `p_pincode` VARCHAR(11), IN `p_id_proof_type` VARCHAR(250), IN `p_id_proof_number` VARCHAR(250), OUT `p_result` VARCHAR(250), IN `p_created_by` INT, IN `p_created_date` DATETIME, IN `p_parent_middlename` VARCHAR(250), IN `p_parent_id` INT, IN `p_parent_photo` VARCHAR(250), IN `p_student_id` INT)  BEGIN

	
	
	Declare v_country_id int;
	Declare v_state_id int;
	Declare v_city_id int;

		UPDATE 
				tbl_student_parents
		SET
				STATUS = '1'
		WHERE
				parent_id = p_parent_id;

		

		SELECT 
			country_id,
			state_id,
			city_id
		INTO
			v_country_id,
			v_state_id,
			v_city_id

		FROM
			tbl_area 
		WHERE 
			area_id = p_area_id;
		
		

		
		INSERT INTO 
					tbl_temp_student_parents (application_id,
                                        parent_firstname,
                                        parent_middlename,
                                        parent_lastname,
                                        parent_dob,
                                        parent_nationality,
                                        parent_qualification,
                                        parent_designation,
                                        parent_company,
                                        parent_address,
                                        parent_occupation,
                                        parent_office_number,
                                        parent_mobile_number,
                                        parent_email_id,
                                        relation_type,
                                        primary_contact,
                                        country_id,
                                        city_id,
                                        area_id,
                                        address,
                                        landmark,
                                        state_id,
                                        pincode,
                                        id_proof_type,
                                        id_proof_number,
                                        created_by,
                                        created_date,
                                        parent_photo,
                                        student_id)
		VALUES
				(p_application_id,
                p_parent_firstname,
                p_parent_middlename,
                p_parent_lastname,
                p_parent_dob,
                p_parent_nationality,
                p_parent_qualification,
                p_parent_designation,
                p_parent_company,
                p_parent_address,
                p_parent_occupation,
                p_parent_office_number,
                p_parent_mobile_number,
                p_parent_email_id,
                p_relation_type,
                p_primary_contact,
                v_country_id,
                v_city_id,
                p_area_id,
                p_address,
                p_landmark,
                v_state_id,
                p_pincode,
                p_id_proof_type,
                p_id_proof_number,
                p_created_by,
                p_created_date,
                p_parent_photo,
                p_student_id);
		
		IF row_count() = 0 THEN
                SET p_result = "Sorry!Please try once again";
        ELSE
			SET p_result = LAST_INSERT_ID();			
            
         END IF;
	

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_timeTable` (IN `p_timetable_name` VARCHAR(50), IN `p_course_id` INT(11), IN `p_section_id` INT(11), IN `p_num_periods` INT(11), IN `p_start_time` TIME, IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  Begin

		
INSERT INTO 
					tbl_timetable
					(timetable_name,
					course_id,
					section_id,
					num_periods,
					start_time,
					status,
					branch_id,
					year_id,
					created_by,
					created_date)
		VALUES
					(p_timetable_name,
					p_course_id,
					p_section_id,
					p_num_periods,
					p_start_time,
					p_status,
					p_branch_id,
					p_year_id,
					p_created_by,
					p_created_date);


				IF row_count() = 0 THEN

					SET p_result = "Sorry!Please try once again";

                ELSE
                       SET p_result = LAST_INSERT_ID();
				
                END IF;



END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_user` (IN `p_branch_id` INT(11), IN `p_role_id` INT(11), IN `p_user_name` VARCHAR(250), IN `p_login_id` VARCHAR(50), IN `p_user_password` VARCHAR(250), IN `p_user_email` VARCHAR(100), IN `p_user_status` ENUM('0','1','2','3'), IN `p_user_photo` VARCHAR(250), IN `p_created_date` DATETIME, IN `p_created_by` INT(11), OUT `p_result` VARCHAR(250), IN `p_passkey` VARCHAR(250))  ThisSP: BEGIN

DECLARE  v_cnt int(11);





 


			SELECT 
					 COUNT(1) INTO 	v_cnt
			FROM
					tbl_users
			WHERE
					login_id =UPPER(p_login_id);

	IF  v_cnt >= 1	THEN
   
		SET p_result ='Provided login details already exist in system.';
		
        LEAVE ThisSP;
		
	END IF;		
	

    INSERT INTO
                 tbl_users (branch_id,
                            role_id,
                            user_name,
                            login_id,
                            user_password,
                            user_email,
                            user_status,
                            user_photo,
                            created_date,
                            created_by
                            )
     VALUES  
                            (p_branch_id,
                             p_role_id,
                             p_user_name,
                             UPPER(p_login_id),
                             AES_ENCRYPT(p_user_password, p_passkey),
                             p_user_email,
                             p_user_status,
                             p_user_photo,
                             p_created_date,
                             p_created_by
                             );

                    
		SET p_result ='Uset added sucessfully';


                             
                              
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_vechicle` (IN `p_branch_id` INT(11), IN `p_vehicle_type` INT(11), IN `p_fuel_type` INT(11), IN `p_capacity` INT(11), IN `p_vehicle_modal` VARCHAR(50), IN `p_vehicle_name` VARCHAR(150), IN `p_vehicle_number` VARCHAR(25), IN `p_purchased_date` DATETIME, IN `p_ownership_type` INT(11), IN `p_cost` FLOAT, IN `p_manufacturing_company` VARCHAR(250), IN `p_vehicle_chassis_no` VARCHAR(50), IN `p_vehicle_engine_no` VARCHAR(50), IN `p_rc_number` VARCHAR(100), IN `p_start_date` DATETIME, IN `p_expiry_date` DATETIME, IN `p_gps_number` VARCHAR(50), IN `p_gps_url` VARCHAR(500), IN `p_vehicle_details` VARCHAR(150), IN `p_status` ENUM('0','1'), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN


INSERT INTO
						tbl_vehicles
						(branch_id,
						vehicle_type,
						fuel_type,
						capacity,
						vehicle_modal,
						vehicle_name,
						vehicle_number,
						purchased_date,
						ownership_type,
						cost,
						manufacturing_company,
						vehicle_chassis_no,
						vehicle_engine_no,
						rc_number,
						start_date,
						expiry_date,
						gps_number,
						gps_url,
						vehicle_details,
						status,
						created_by,
						created_date)
		VALUES
						(p_branch_id,
						p_vehicle_type,
						p_fuel_type,
						p_capacity,
						p_vehicle_modal,
						p_vehicle_name,
						p_vehicle_number,
						p_purchased_date,
						p_ownership_type,
						p_cost,
						p_manufacturing_company,
						p_vehicle_chassis_no,
						p_vehicle_engine_no,
						p_rc_number,
						p_start_date,
						p_expiry_date,
						p_gps_number,
						p_gps_url,
						p_vehicle_details,
						p_status,
						p_created_by,
						p_created_date);


			IF row_count() = 0 THEN
               
				SET p_result = "Sorry!Please try once again";
            ELSE
                       SET p_result = "Sucess";
				
             END IF;
	
	




END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_vechicleDocument` (IN `p_vehicle_id` INT(11), IN `p_document_name` VARCHAR(250), IN `p_document_number` VARCHAR(100), IN `p_issued_date` DATETIME, IN `p_expiry_date` DATETIME, IN `p_cost` FLOAT, IN `p_document_copy` VARCHAR(250), IN `p_document_type_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

INSERT INTO
								tbl_vehicle_document
								(
									vehicle_id,
									document_name,
									document_number,
									issued_date,
									expiry_date,
									cost,
									document_copy,
									document_type_id,
									status,
									created_by,
									created_date)
					VALUES
							(p_vehicle_id,
							p_document_name,
							p_document_number,
							p_issued_date,
							p_expiry_date,
							p_cost,
							p_document_copy,
							p_document_type_id,
							p_status,
							p_created_by,
							p_created_date
							);

			IF row_count() = 0 THEN

                SET p_result = "Sorry!Please try once again";
            ELSE
                SET p_result =  LAST_INSERT_ID();
                  
			END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_vehicle_to_route` (IN `p_vehicle_id` INT(11), IN `p_route_id` INT(11), IN `p_from_date` DATETIME, IN `p_status` ENUM('0','1'), IN `p_created_date` DATETIME, IN `p_created_by` INT(10), OUT `p_result` VARCHAR(100))  NO SQL
BEGIN

DECLARE r_rowcount INT;
    
    SET r_rowcount=(SELECT r.vechicel_id 
                    from tbl_route_vechicel r 
                    WHERE r.route_id = p_route_id and r.to_date     is null);
    IF  r_rowcount != '' THEN
    
    UPDATE tbl_vehicle_driver vd 
    SET vd.to_date = p_created_date,
        vd.modified_by = p_created_by,
        vd.modified_date = p_created_date
    WHERE vd.vehicle_id = r_rowcount;
    
    
    END IF;
    
	UPDATE tbl_route_vechicel rv 
    SET rv.to_date=p_created_date,
        rv.modified_by = p_created_by,
        rv.modified_date = p_created_date
    WHERE rv.route_id = p_route_id
    and rv.to_date is NULL;
    
    INSERT INTO tbl_route_vechicel(
                                  vechicel_id,
                                  route_id,
                                  from_date,
                                  status,
        	                      created_date,
                                  created_by
                                  )
    VALUES(
         p_vehicle_id,
         p_route_id,
         p_from_date,
         p_status,
         p_created_date,
         p_created_by
    );
    IF row_count() = 0 THEN
      SET p_result = "Sorry!Please try once again";
    ELSE
       SET p_result = "Sucess";
    END IF;
	
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `check_login` (IN `p_loginid` VARCHAR(100), IN `p_password` VARCHAR(50), OUT `p_result` VARCHAR(100), OUT `p_userid` INT, OUT `p_parentid` INT, OUT `p_empid` INT, OUT `p_role_id` VARCHAR(50))  NO SQL
    DETERMINISTIC
ThisSP:Begin

DECLARE v_userid INT;
DECLARE v_loginid INT;
DECLARE v_cnt INT;
DECLARE v_emp_id INT;
DECLARE v_parent_id INT ;
DECLARE v_user_password varchar(100);
DECLARE v_lost_login datetime;
DECLARE v_role_id varchar(50);

  SET p_userid = 0;
  SET p_parentid = 0 ;
  SET p_empid = 0;
  set v_role_id = '';


  SELECT  CASE WHEN  p_loginid  NOT REGEXP '^[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9]@[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9].[a-zA-Z]{2,4}$' Then 0 else 1 end INTO v_cnt;
 
  IF v_cnt = 0 Then


SELECT emp_id , count(1) INTO v_loginid ,v_cnt FROM tbl_employees WHERE emp_number = p_loginid GROUP BY emp_id;

IF v_cnt = 0 Then

 SELECT  parent_id , count(1) INTO v_loginid ,v_cnt  FROM  tbl_parent_student WHERE admission_number = p_loginid  GROUP BY parent_id LIMIT 0,1;

 
IF v_cnt =0 Then

SET p_result = 'Provided Account not exit, Can you verify and retry';
 
LEAVE ThisSP;
 
ELSE

SELECT user_id,emp_id, v_loginid as parent_id , user_password ,lost_login,role_id INTO v_userid,v_emp_id,v_parent_id,v_user_password,v_lost_login,v_role_id FROM tbl_users WHERE user_name = p_loginid and user_password = p_password and user_status ='0' limit 0,1;
               

END IF;

        ELSE

    SELECT user_id,emp_id, parent_id ,user_password ,lost_login,role_id INTO v_userid,v_emp_id,v_parent_id,v_user_password,v_lost_login,v_role_id FROM tbl_users WHERE emp_id = v_loginid and user_status ='0';


        END IF;
 
  ELSE
 

    SELECT user_id,emp_id, parent_id ,user_password ,lost_login,role_id,count(1) INTO v_userid,v_emp_id,v_parent_id,v_user_password,v_lost_login,v_role_id,v_cnt FROM tbl_users WHERE upper(user_email) = upper(p_loginid) and user_status ='0' GROUP BY user_id,emp_id, parent_id ,user_password, lost_login, role_id;  
 
     IF v_cnt =0 Then

SET p_result = 'Provided Email not exist, Can you verify and retry';
 
LEAVE ThisSP;
 END IF;
 
  END IF;

 

  IF v_user_password !=  p_password THEN

 SET p_result = 'Provided password wrong';

 LEAVE ThisSP;

  END IF;

  SET p_userid = v_userid;
  SET p_parentid = v_parent_id ;
  SET p_empid = v_emp_id;
  SET p_role_id = v_role_id;
  end$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `check_login_app` (IN `p_loginid` VARCHAR(100), IN `p_password` VARCHAR(50), OUT `p_result` VARCHAR(100), OUT `p_userid` INT, OUT `p_parentid` INT, OUT `p_empid` INT, OUT `p_role_id` VARCHAR(50))  NO SQL
    DETERMINISTIC
ThisSP:Begin
DECLARE v_userid INT;
DECLARE v_loginid INT;
DECLARE p_v_loginid INT;
DECLARE v_cnt INT;
DECLARE v_emp_id INT;
DECLARE v_parent_id INT ;
DECLARE v_user_password varchar(100);
DECLARE p_v_password varchar(100);
DECLARE v_lost_login datetime;
DECLARE v_role_id varchar(50);

  SET p_userid = 0;
  SET p_parentid = 0 ;
  SET p_empid = 0;
  set v_role_id = '';


  SELECT  CASE WHEN  p_loginid  NOT REGEXP '^[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9]@[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9].[a-zA-Z]{2,4}$' Then 0 else 1 end INTO v_cnt;
 
  IF v_cnt = 0 Then
	SELECT emp_id , count(1) INTO v_loginid ,v_cnt FROM tbl_employees WHERE emp_number = p_loginid 		GROUP BY emp_id;
  	IF v_cnt = 0 Then
	SELECT  parent_id , count(1) INTO v_loginid ,v_cnt  FROM  tbl_parent_student WHERE admission_number = p_loginid and parent_id in (select parent_id from tbl_users  where  role_id='4') ;
		IF v_cnt =0 Then
		SET p_result = 'Provided Account not exit, Can you verify and retry';
 		LEAVE ThisSP;
		ELSE
                SELECT user_name,user_password into p_v_loginid,p_v_password from tbl_users where parent_id = v_loginid;
		SELECT user_id,emp_id, v_loginid as parent_id , user_password ,lost_login,role_id INTO 			v_userid,v_emp_id,v_parent_id,v_user_password,v_lost_login,v_role_id FROM tbl_users WHERE 			user_name = p_v_loginid and user_password  = p_password and user_status ='0' limit 0,1;
         	END IF;
	ELSE
        SELECT user_id,emp_id, parent_id ,user_password ,lost_login,role_id INTO   v_userid,v_emp_id,v_parent_id,v_user_password,v_lost_login,v_role_id FROM tbl_users WHERE emp_id =  v_loginid and user_status ='0';


        END IF;
 
  ELSE
 

    SELECT user_id,emp_id, parent_id ,user_password ,lost_login,role_id,count(1) INTO v_userid,v_emp_id,v_parent_id,v_user_password,v_lost_login,v_role_id,v_cnt FROM tbl_users WHERE upper(user_email) = upper(p_loginid) and user_status ='0' GROUP BY user_id,emp_id, parent_id ,user_password, lost_login, role_id;  
 
     IF v_cnt =0 Then

SET p_result = 'Provided Email not exist, Can you verify and retry';
 
LEAVE ThisSP;
 END IF;
 
  END IF;

 

  IF v_user_password !=  p_password THEN

 SET p_result = 'Provided password wrong';

 LEAVE ThisSP;

  END IF;

  SET p_userid = v_userid;
  SET p_parentid = v_parent_id ;
  SET p_empid = v_emp_id;
  SET p_role_id = v_role_id;



end$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `check_login_app_master` (IN `p_loginid` VARCHAR(100), OUT `p_result` VARCHAR(100), OUT `p_userid` INT, OUT `p_parentid` INT, OUT `p_empid` INT, OUT `p_role_id` VARCHAR(50))  NO SQL
    DETERMINISTIC
ThisSP:Begin
DECLARE v_userid INT;
DECLARE v_loginid INT;
DECLARE p_v_loginid INT;
DECLARE v_cnt INT;
DECLARE v_emp_id INT;
DECLARE v_parent_id INT ;
DECLARE v_lost_login datetime;
DECLARE v_role_id varchar(50);

  SET p_userid = 0;
  SET p_parentid = 0 ;
  SET p_empid = 0;
  set v_role_id = '';


  SELECT  CASE WHEN  p_loginid  NOT REGEXP '^[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9]@[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9].[a-zA-Z]{2,4}$' Then 0 else 1 end INTO v_cnt;
 
  IF v_cnt = 0 Then
	SELECT emp_id , count(1) INTO v_loginid ,v_cnt FROM tbl_employees WHERE emp_number = p_loginid 		GROUP BY emp_id;
  	IF v_cnt = 0 Then
	SELECT  parent_id , count(1) INTO v_loginid ,v_cnt  FROM  tbl_parent_student WHERE admission_number = p_loginid and parent_id in (select parent_id from tbl_users  where  role_id='4') ;
		IF v_cnt =0 Then
		SET p_result = 'Provided Account not exit, Can you verify and retry';
 		LEAVE ThisSP;
		ELSE
                SELECT user_name into p_v_loginid  from tbl_users where parent_id = v_loginid;
		SELECT user_id,emp_id, v_loginid as parent_id , lost_login,role_id INTO 			v_userid,v_emp_id,v_parent_id,v_lost_login,v_role_id FROM tbl_users WHERE 			user_name = p_v_loginid  and user_status ='0' limit 0,1;
         	END IF;
	ELSE
        SELECT user_id,emp_id, parent_id ,lost_login,role_id INTO   v_userid,v_emp_id,v_parent_id,v_lost_login,v_role_id FROM tbl_users WHERE emp_id =  v_loginid and user_status ='0';


        END IF;
 
  ELSE
 

    SELECT user_id,emp_id, parent_id ,lost_login,role_id,count(1) INTO v_userid,v_emp_id,v_parent_id,v_lost_login,v_role_id,v_cnt FROM tbl_users WHERE upper(user_email) = upper(p_loginid) and user_status ='0' GROUP BY user_id,emp_id, parent_id , lost_login, role_id;  
 
     IF v_cnt =0 Then

SET p_result = 'Provided Email not exist, Can you verify and retry';
 
LEAVE ThisSP;
 END IF;
 
  END IF;


  SET p_userid = v_userid;
  SET p_parentid = v_parent_id ;
  SET p_empid = v_emp_id;
  SET p_role_id = v_role_id;



end$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `check_login_master` (IN `p_loginid` VARCHAR(100), OUT `p_result` VARCHAR(100), OUT `p_userid` INT, OUT `p_parentid` INT, OUT `p_empid` INT, OUT `p_role_id` VARCHAR(50))  BEGIN

  DECLARE v_userid INT;
DECLARE v_loginid INT;
DECLARE v_cnt INT;
DECLARE v_emp_id INT;
DECLARE v_parent_id INT ;
DECLARE v_lost_login datetime;
DECLARE v_role_id varchar(50);

  SET p_userid = 0;
  SET p_parentid = 0 ;
  SET p_empid = 0;
  set v_role_id = '';


  SELECT  CASE WHEN  p_loginid  NOT REGEXP '^[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9]@[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9].[a-zA-Z]{2,4}$' Then 0 else 1 end INTO v_cnt;
 
  IF v_cnt = 0 Then


SELECT emp_id , count(1) INTO v_loginid ,v_cnt FROM tbl_employees WHERE emp_number = p_loginid AND status='0' GROUP BY emp_id;

IF v_cnt = 0 Then

 SELECT  parent_id , count(1) INTO v_loginid ,v_cnt  FROM  tbl_parent_student WHERE admission_number = p_loginid  GROUP BY parent_id LIMIT 0,1;

 
IF v_cnt =0 Then

SET p_result = 'Provided Account not exit, Can you verify and retry';
 
 
ELSE

SELECT user_id,emp_id, v_loginid as parent_id , lost_login,role_id INTO v_userid,v_emp_id,v_parent_id,v_lost_login,v_role_id FROM tbl_users WHERE user_name = p_loginid and user_status ='0' limit 0,1;
               

END IF;

        ELSE

    SELECT user_id,emp_id, parent_id ,lost_login,role_id INTO v_userid,v_emp_id,v_parent_id,v_lost_login,v_role_id FROM tbl_users WHERE emp_id = v_loginid and user_status ='0';


        END IF;
 
  ELSE
 

    SELECT user_id,emp_id, parent_id ,lost_login,role_id,count(1) INTO v_userid,v_emp_id,v_parent_id,v_lost_login,v_role_id,v_cnt FROM tbl_users WHERE upper(user_email) = upper(p_loginid) and user_status ='0' GROUP BY user_id,emp_id, parent_id , lost_login, role_id;  
 
     IF v_cnt =0 Then

SET p_result = 'Provided Email not exist, Can you verify and retry';
 

 END IF;
 
  END IF;

  SET p_userid = v_userid;
  SET p_parentid = v_parent_id ;
  SET p_empid = v_emp_id;
  SET p_role_id = v_role_id;
  
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `Dashboard_feeCollection` (IN `p_fromdate` DATE, IN `p_todate` DATE, IN `p_report_type` INT)  BEGIN



IF p_report_type = 13 Then

  
  SELECT 
                
                barnch_name,
                sum(amount) 
  AS             amount
 FROM
(
SELECT 
                get_branchName(branch_id) 
 AS                barnch_name,
                SUM(IFNULL(amount,0)) amount
  
 FROM  
                tbl_fee_transactions
 WHERE
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)
UNION ALL

SELECT 
                get_branchName(branch_id) 
 AS                barnch_name,
                SUM(IFNULL(amount,0)) amount
  
 FROM  
                tbl_mis_transactions
 WHERE
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate) ) a               
                
 GROUP BY
                barnch_name ;

ELSEIF p_report_type = 14  THEN

SELECT 
              Fee_type_name,
              sum(amount) 
  AS           amount
 FROM
(
SELECT 
                get_feeTypeName(type_plan_id) 
  AS            Fee_type_name,
                IFNULL(amount,0) as amount
  
 FROM  
                tbl_fee_transactions
 WHERE
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)
UNION ALL

SELECT 
                'Miscellaneous'
 AS                Fee_type_name,
                IFNULL(amount,0) as amount
  
 FROM  
                tbl_mis_transactions
 WHERE
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate) ) a               
                
 GROUP BY
                Fee_type_name;
                
ELSEIF p_report_type = 15  THEN

SELECT 
              ModeOfPayment,
              sum(amount) as amount
FROM
(SELECT 

                  get_generalItemName(pay_mode) 
 AS                ModeOfPayment,
                IFNULL(amount,0)
AS                amount
  
 FROM  
                
                tbl_fee_transactions 

 WHERE
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)    
 UNION ALL
 
 SELECT 
                
                get_generalItemName(pay_mode) 
 AS                ModeOfPayment,
                   IFNULL(amount,0) 
 AS                amount
 FROM  
                
                tbl_mis_transactions 

 WHERE
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)
 
                ) a
                
  GROUP BY            
                ModeOfPayment;
   




END IF;        
 


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `dashboard_feeDue` (IN `p_year_id` INT, IN `p_tilldate` DATE, IN `p_report_type` INT)  BEGIN

IF p_report_type = 7 Then

SELECT

            feetypename,
            SUM(amount)
AS            amount,
            sum(paid_amount)
AS            paid_amount,
            sum(discuount)
AS            discuount,
            SUM(amount-paid_amount-discuount)
AS            due_amount
            
FROM
        (
SELECT 
           
            get_feeTypeName(type_plan_id)
AS            feetypename,
            IFNULL((SELECT 
                            SUM(IFNULL(amount,0))
                
                        FROM 
                                    tbl_fee_transactions pt
                    
                        WHERE    
                                    pt.studnet_id = s.student_id
                        AND
                                    pt.type_plan_id = s.type_plan_id
                        AND 
                            transaction_date <= date(p_tilldate)),0)
AS             paid_amount ,  
             (SELECT   
                        get_feeTypeamount(fee_type_id)
              FROM         
                        tbl_fee_type_plan tp where tp.type_plan_id = s.type_plan_id)
AS
                Amount,
             IFNULL(get_S_F_discount(type_plan_id,s.student_id,s.branch_id,s.year_id),0)
As             discuount
      
FROM 
             tbl_student_plan_type s
INNER JOIN
            tbl_student_academic a
ON
            s.student_id = a.student_id
AND
            s.student_academic_id = a.student_academic_id
            
WHERE
         
            a.year_id = p_year_id
  AND       
            s.status='0' 
 AND 
            a.status='0'
  AND
            application_id  is null
  AND 
             mode_flag = 'credit')a
  GROUP BY 
            feetypename    ;

ELSEIF p_report_type = 8 Then


SELECT

            branch_name,
            SUM(amount)
AS            amount,
            sum(paid_amount)
AS            paid_amount,
            sum(discuount)
AS            discuount,
            SUM(amount-paid_amount-discuount)
AS            due_amount
            
FROM
        (
SELECT 

            get_branchName(s.branch_id) 
 AS            branch_name,
            IFNULL((SELECT 
                            SUM(IFNULL(amount,0))
                
                        FROM 
                                    tbl_fee_transactions pt
                    
                        WHERE    
                                    pt.studnet_id = s.student_id
                        AND
                                    pt.type_plan_id = s.type_plan_id
                        AND 
                            transaction_date <= date(p_tilldate)),0)
AS             paid_amount ,  
             (SELECT   
                        get_feeTypeamount(fee_type_id)
              FROM         
                        tbl_fee_type_plan tp where tp.type_plan_id = s.type_plan_id)
AS
                Amount,
             IFNULL(get_S_F_discount(type_plan_id,s.student_id,s.branch_id,s.year_id),0)
As             discuount
      
FROM 
             tbl_student_plan_type s
INNER JOIN
            tbl_student_academic a
ON
            s.student_id = a.student_id
AND
            s.student_academic_id = a.student_academic_id
            
WHERE
         
            a.year_id = p_year_id
  AND       
            s.status='0' 
  AND 
            a.status='0'
  AND
            application_id  is null
  AND 
             mode_flag = 'credit')a
  GROUP BY 
            branch_name    ;

END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `delete_exam` (IN `p_exam_id` INT, OUT `p_result` VARCHAR(250))  NO SQL
ThisSP: BEGIN


DECLARE  v_cnt int(11);

	
			SELECT 
					COUNT(1) INTO 	v_cnt
			FROM
					tbl_exam_course
			WHERE
						exam_id = p_exam_id
			AND status != '9';


		IF  v_cnt >= 1	THEN
   
		SET p_result ='Sorry,Please delete child record from system.';
		
        LEAVE ThisSP;
		
		END IF;	

		UPDATE  tbl_exam SET status='9'
			WHERE
						exam_id = p_exam_id;
		
			SET p_result ='Exam Deleted Successfully';


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `delete_feeAccount` (IN `p_fee_account_id` INT, OUT `p_result` VARCHAR(250), OUT `p_error_flag` ENUM('0','1'))  NO SQL
BEGIN

DECLARE  v_cnt int;

			SET v_cnt=0;

			SELECT 
					count(1)
			INTO
					v_cnt
			FROM
					tbl_fee_type
			WHERE
					fee_account_id = p_fee_account_id;
IF (v_cnt = 0) THEN 

DELETE FROM tbl_fee_accounts
WHERE fee_account_id=p_fee_account_id;

SET p_result = "Account Deleted Successfully";
SET p_error_flag = 0;
				

ELSE 
SET p_result = "Account not deleted. Fee Types are assigned to this account.";
SET p_error_flag = 1;

END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `delete_feeCategory` (IN `p_fee_category_id` INT, OUT `p_result` VARCHAR(250), OUT `p_error_flag` ENUM('0','1'))  NO SQL
BEGIN

DECLARE  v_cnt int;

			SET v_cnt=0;

			SELECT 
					count(1)
			INTO
					v_cnt
			FROM
					tbl_fee_type
			WHERE
					fee_category_id = p_fee_category_id;
IF (v_cnt = 0) THEN 

DELETE FROM tbl_fee_category
WHERE fee_category_id=p_fee_category_id;

SET p_result = "Category Deleted Successfully";
SET p_error_flag = 0;
				

ELSE 
SET p_result = "Category not deleted. Fee Types are assigned to this account.";
SET p_error_flag = 1;

END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `delete_feeType` (IN `p_fee_type_id` INT, OUT `p_result` VARCHAR(250), OUT `p_error_flag` ENUM('0','1'))  NO SQL
BEGIN


DECLARE  v_cnt int;

SET v_cnt=0;
	SELECT 
		count(1)
	INTO
		v_cnt
	FROM
		tbl_fee_type_plan
	WHERE
		fee_type_id = p_fee_type_id;
			
IF (v_cnt = 0) THEN 
	
	DELETE FROM tbl_fee_type WHERE fee_type_id=p_fee_type_id;
	SET p_result = "Fee Type Deleted Successfully";
	SET p_error_flag = '0';

ELSE 
	SET p_result = "Fee Type not deleted. Fee Type is assigned to fee plans.";
	SET p_error_flag = '1';

END IF; 

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `gestStudentStops` (IN `p_year_id` INT(11), IN `p_branch_id` INT(11), IN `p_route_id` INT(11))  NO SQL
SELECT  st.student_stop_id,
		concat(s.student_name,' ',s.student_middlename,' ',s.student_lastname) as student_name,
       s.student_id,
       s.admission_number,
       concat(sto.stop_name,'-',DATE_FORMAT(sto.pickup_time,'%h:%i %p') ) as pick_up,
       concat(sto.stop_name,'-',DATE_FORMAT(sto.drop_time,'%h:%i %p' )) as drop_time,
       sa.student_academic_id,
       st.stop_id,
       st.route_id,
       st.status,
       sto.type_plan_id,
       concat(c.course_name,'  ', sc.section_name) as course,
       (SELECT spt.student_type_plan_id FROM tbl_student_plan_type spt 
        WHERE spt.student_id=st.student_id 
        AND spt.student_academic_id = st.student_academic_id
        AND spt.type_plan_id = sto.type_plan_id 
        AND spt.status='0') AS student_type_plan_id 
		FROM tbl_student_stops st


INNER JOIN tbl_student s on s.student_id = st.student_id
INNER JOIN tbl_student_academic sa on sa.student_id=s.student_id
INNER JOIN tbl_stops sto on sto.stop_id = st.stop_id
LEFT JOIN tbl_course c on c.course_id = sa.course_id
LEFT JOIN tbl_section sc on sc.section_id = sa.section_id
WHERE sa.year_id=p_year_id
AND sa.branch_id = p_branch_id
AND st.route_id = p_route_id$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `getColumnName` (IN `p_table_name` VARCHAR(250), IN `p_column_name` VARCHAR(250), IN `p_selcolumn_name` VARCHAR(250), IN `p_selcolumn_id` INT)  NO SQL
BEGIN

DECLARE f_column_name VARCHAR(250);

SET @final_c = CONCAT('SELECT ',p_column_name,' INTO f_column_name FROM ',p_table_name ,' WHERE ',p_selcolumn_name,'=',p_selcolumn_id);
PREPARE sql1 FROM @final_c;

EXECUTE sql1;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `getcoursesubjects` (IN `p_course_id` INT(11), IN `p_year_id` INT(11), IN `p_branch_id` INT(11))  BEGIN
declare v_scnt INT(11);

Select count(section_id) into v_scnt from tbl_section where course_id =p_course_id and year_id = p_year_id and branch_id = p_branch_id;

Select get_subjectName(subject_id) AS subject_name,subject_id,count(subject_id)
  from
	tbl_subject_course
  where
   section_id in ( select section_id from tbl_section where course_id = p_course_id and year_id = p_year_id and branch_id = p_branch_id)
 group by subject_name,subject_id
  Having  count(subject_id)>=v_scnt;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_admissionFeePlans` (IN `p_cource_id` INT, IN `p_app_id` INT, IN `p_branch_id` INT, IN `p_year_id` INT)  NO SQL
BEGIN

DECLARE v_transaction_id INT(11);

SELECT COUNT(transaction_id) INTO v_transaction_id FROM tbl_fee_transactions WHERE application_id=p_app_id;

IF (v_transaction_id > 0 and p_app_id > 0 ) THEN

SELECT p.fee_plan_name  AS	planname,
				t.fee_plan_id,
				t.fee_type_id,
				get_feeTypeamount(t.fee_type_id) 
		AS      
				amount,
				get_feeTypeName(t.type_plan_id)
		AS
				feetypename,
				t.mandatory,
				t.type_plan_id,
                '0' AS paid_amount

		FROM				
				tbl_fee_type_plan t
		LEFT JOIN 
				tbl_fee_plan p 
        ON 
				p.fee_plan_id =t.fee_plan_id
		WHERE
				p.new_admissions =1 AND 
				t.fee_plan_id IN (SELECT
                                		distinct fee_plan_id
                                FROM
                                		tbl_fee_cource_plan
								WHERE
                                		cource_id = p_cource_id
                                AND
										branch_id = p_branch_id
								AND
										year_id = p_year_id
                               	AND
                               			status ='0') 
       	AND  
				t.branch_id = p_branch_id
		AND
				t.year_id = p_year_id
		AND 
				t.status = '0'
		AND 
				p.fee_plan_id NOT IN(SELECT master_id 
									FROM tbl_id_configuration 
                                    WHERE branch_id=p_branch_id 
                                    AND year_id = p_year_id 
                                    AND status ='0' 
                                    AND master_type ='application')
		UNION
				SELECT				
                (SELECT 
							fee_plan_name 
                 FROM 
							tbl_fee_plan p 
				 WHERE 
							p.fee_plan_id = tp.fee_plan_id 
				 LIMIT 0,1) 
		AS      planname,
				tp.fee_plan_id,
				tp.fee_type_id,
				get_feeTypeamount(tp.fee_type_id) 
		AS      
				amount,
				get_feeTypeName(tp.type_plan_id)
		AS
				feetypename,
				tp.mandatory,
				t.type_plan_id,
                t.amount 
		AS		paid_amount
		FROM				
				(SELECT type_plan_id , sum(amount) as amount   FROM tbl_fee_transactions where application_id = p_app_id and status ='0' and branch_id=p_branch_id group by type_plan_id) t
               
		INNER JOIN 
				tbl_fee_type_plan tp
        ON 
				t.type_plan_id = tp.type_plan_id
		WHERE
				
				 tp.status = '0';
                
ELSE		

SELECT p.fee_plan_name  AS	planname,
				t.fee_plan_id,
				t.fee_type_id,
				get_feeTypeamount(t.fee_type_id) 
		AS      
				amount,
				get_feeTypeName(t.type_plan_id)
		AS
				feetypename,
				t.mandatory,
				t.type_plan_id,
                '0' AS paid_amount

		FROM				
				tbl_fee_type_plan t
		LEFT JOIN 
				tbl_fee_plan p 
        ON 
				p.fee_plan_id =t.fee_plan_id
		WHERE
				p.new_admissions =1 AND 
				t.fee_plan_id IN (SELECT
                                		distinct fee_plan_id
                                FROM
                                		tbl_fee_cource_plan
								WHERE
                                		cource_id = p_cource_id
                                AND
										branch_id = p_branch_id
								AND
										year_id = p_year_id
                               	AND
                               			status ='0') 
       	AND  
				t.branch_id = p_branch_id
		AND
				t.year_id = p_year_id
		AND 
				t.status = '0';
          

END IF;
                                		
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_allFeeConcession` (IN `p_branch_id` INT, IN `p_year_id` INT)  NO SQL
BEGIN


		SELECT 
				concession_id,
				concession_name,
				category_id,
				get_generalItemName(c.category_id)
        AS		category_name,
				concession_type_id,
				get_generalItemName(c.concession_type_id)
		AS 		concession_type,
				percentage,
				adjustment_type,
				get_generalItemName(c.adjustment_type)
		AS 		adjustment,
				status,
				DATE_FORMAT(created_date,'%d %b %Y')
	    AS		created_date
				
		FROM
				tbl_fee_concession c
		WHERE
				branch_id = p_branch_id
		AND
				year_id = p_year_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_allfeeType` (IN `p_branch_id` INT(11), IN `p_year_id` INT(11))  NO SQL
BEGIN


SELECT
					a.fee_type_id,
                    fee_type_name,
                    print_name,
                    fee_type_code,
                    fee_account_id,
					(SELECT
                     			b.fee_account_name
                     FROM
                     			tbl_fee_accounts b
                     WHERE
                     			b.fee_account_id= a.fee_account_id
                     LIMIT 0,1) AS fee_account_name,  
                    fee_category_id,
					(SELECT
                     			c.fee_category_name
                     FROM
                     			tbl_fee_category c
                     WHERE
                     			c.fee_category_id = a.fee_category_id
                     LIMIT 0,1) AS fee_category_name,
                    status,
                    branch_id,
                    fee_terms,
					get_feeTypeamount(a.fee_type_id) as amount,
					status,
                    branch_id,
                    fee_terms,					
                    created_by,
                    DATE_FORMAT(created_date, '%D %b, %Y') AS created_date

			FROM
					tbl_fee_type a		
			
			WHERE 
                a.branch_id = p_branch_id
                AND 
                a.year_id = p_year_id;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_applicationFee` (IN `p_cource_id` INT, IN `p_branch_id` INT, IN `p_year_id` INT)  BEGIN



declare v_fee_plan_id int;




  SELECT 
				fp.fee_plan_id
  INTO 
				v_fee_plan_id                
				
  FROM 
				tbl_fee_plan fp
  LEFT JOIN 
				tbl_fee_cource_plan fc 
  ON 
				fc.fee_plan_id = fp.fee_plan_id 
  WHERE 
				fp.fee_plan_id IN (SELECT 
											master_id 
								   FROM 
											`tbl_id_configuration` 
								   WHERE 
											 master_type='application' 
								   AND  
											branch_id = p_branch_id
								   AND 
											year_id = p_year_id
								   AND 
											STATUS ='0') 
  AND 
				fp.branch_id = p_branch_id
  AND 
				fp.year_id = p_year_id
  AND 
				fc.cource_id = p_cource_id;





   SELECT
					tp.type_plan_id,
					tp.fee_plan_id,
					tp.fee_type_id,
					
                    (SELECT  
                     			fee_type_name
                     FROM
                     			tbl_fee_type t
                     WHERE
                     			t.fee_type_id = tp.fee_type_id)
					AS fee_type_name,
                    get_feeTypeamount(tp.fee_type_id) as amount,
					mandatory					

			FROM
					tbl_fee_type_plan tp
			
                    
			WHERE
					tp.fee_plan_id = v_fee_plan_id;



END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_applicationFollowup` (IN `p_application_id` INT(11))  NO SQL
BEGIN

SELECT 
				followup_id ,
                branch_id,
                year_id,
                application_id,
                followup_by,
                followup_date,
                next_followup_date,
                comments,
                get_generalItemName(followup_status) AS followup_status,
                created_date,
                created_by,
                modified_date,
                modified_by

		FROM
				tbl_application_followups
				
		WHERE
				application_id = p_application_id
				
		ORDER BY 
				followup_id
		DESC;
	
		
					





END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_applications` (IN `p_branch_id` INT, IN `p_year_id` INT)  NO SQL
BEGIN


		SELECT 
				a.application_id,
                a.application_number,
                a.lead_id,
                a.year_id,
                a.branch_id,
				concat(a.student_firstname ," " ,a.student_middlename ," " ,a.student_lastname) AS student_fullname,
                get_courseName(a.course_id) AS course_id,

                a.gender,
                a.dob,
                a.student_email,
                a.country_id,
                a.previous_school,
                a.state_id,
                a.city_id,
                a.area_id,
                a.landmark,
                a.address,
                a.present_country_id,
                a.present_state_id,
                a.present_city_id,
                a.present_area_id,
                a.present_landmark,
                a.present_address,
                a.pincode,
                a.religion_id,
                a.cast_id,
                a.nationality,
                a.mother_tongue,
                a.referrence_name,
                a.application_status,
                a.created_date,
                a.created_by,
                a.modified_date,
                a.modified_by,
				(SELECT 
						concat(b.parent_firstname ," " ,b.parent_lastname)
				FROM 
						tbl_student_parents b
				WHERE 

				 		b.application_id = a.application_id LIMIT 0,1) father_name,
				(SELECT 
						b.parent_mobile_number
				FROM 
						tbl_student_parents b
				WHERE 
				 		b.application_id = a.application_id LIMIT 0,1) father_number,
				(SELECT t.system_receipt_number FROM tbl_fee_transactions t WHERE t.application_id=a.application_id LIMIT 0,1) AS system_receipt_number

		FROM
				tbl_applications a 
		WHERE 
				a.branch_id = p_branch_id        
		AND
				a.year_id = p_year_id
        AND 
				a.application_status='application'
		AND a.status != '9'
		ORDER BY 
					a.created_date DESC;
				



END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_bookDetails` (IN `p_book_id` INT, IN `p_branch_id` INT)  NO SQL
Begin

SELECT 
        book_id,
        book_isbn_no,
        book_name,
        subject_id,
        get_subjectName(subject_id)
    AS   subject_name,
        book_category_id,
        (SELECT
                    book_category_name  
                 FROM
                    tbl_book_category
                 WHERE
                    book_category_id = c.book_category_id)
    AS    book_category_name,
        book_author,
        book_edition,
        book_publisher,
        shelf_rack_id,
        (SELECT 
                    shelf_rack_name
                 FROM
                    tbl_book_shelf_rack 
                 WHERE  
                    shelf_rack_id = c.shelf_rack_id)
        AS
                 shelf_rack_name,
                    
        position,
        currency_id,
        get_generalItemName(currency_id)
    AS    currency_name,
        book_cost,
        book_quantity,
        language_id,
        (SELECT 
              language_name  
         FROM  
              tbl_speaking_languages 
         WHERE language_id = c.language_id )
    AS    book_language,
        book_condition,
        get_generalItemName(book_condition)
    AS    book_condition_name,
        status,
        DATE_FORMAT(created_date,'%D %b %Y')
      AS    created_date
        
    FROM
        tbl_books c
    WHERE
        book_id = p_book_id
    AND
        branch_id = p_branch_id;
    


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_bookReturn` (IN `p_searchfield` VARCHAR(100), IN `p_branch_id` INT)  NO SQL
Begin
    
SELECT 
        b.borrow_return_id,
        b.book_id,
        b.book_sequence_id,
        b.book_status,
        b.student_id,
        b.emp_id,
        (SELECT emp_number FROM  tbl_employees 
          WHERE emp_id=b.emp_id
                ) as emp_number,
        get_employeeName(b.emp_id) as emp_firstname,
        (SELECT department_name
                  FROM  tbl_departments
                  WHERE department_id=(SELECT department_id FROM  tbl_employees 
            WHERE emp_id=b.emp_id)
        ) as department_name,
        
        (SELECT admission_number FROM  tbl_student 
          WHERE student_id=b.student_id
                ) as admission_number,
        (SELECT student_name FROM  tbl_student 
          WHERE student_id=b.student_id
                ) as  student_name,
        b.student_academic_id,
        (SELECT section_id FROM  tbl_student_academic
 
          WHERE student_academic_id=b.student_academic_id
                ) as section_id,
        (SELECT course_id FROM  tbl_student_academic
 
          WHERE student_academic_id=b.student_academic_id
                ) as  course_id,
        
        get_courseName((SELECT course_id FROM  tbl_student_academic
 
          WHERE student_academic_id=b.student_academic_id
                )) AS course_name,
        getSectionName((SELECT section_id FROM  tbl_student_academic
 
          WHERE student_academic_id=b.student_academic_id
                )) AS section_name,

        DATE_FORMAT(b.issue_date,'%D %b %Y') as issue_date,
        DATE_FORMAT(b.due_date,'%D %b %Y') as due_date,
        book_isbn_no,
        book_name,
        book_category_id,
        (SELECT
                    book_category_name  
                 FROM
                    tbl_book_category
                 WHERE
                    book_category_id = c.book_category_id)
  AS    book_category_name,
        book_author
        
  FROM
        tbl_book_borrow_return b
  INNER JOIN
        tbl_books  AS c ON b.book_id = c.book_id
  WHERE
      book_status=0
  AND
      c.branch_id = p_branch_id
    AND
        ( c.book_name LIKE CONCAT('%', p_searchfield , '%') 
         
        OR
              UPPER(c.book_isbn_no)  =UPPER(p_searchfield)
        OR
              SOUNDEX(c.book_author) = SOUNDEX(p_searchfield));   

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_bookSearchDetails` (IN `p_searchfield` VARCHAR(100), IN `p_branch_id` INT)  NO SQL
Begin

SELECT 
        book_id,
        book_isbn_no,
        book_name,
        subject_id,
        get_subjectName(subject_id)
    AS   subject_name,
        book_category_id,
        (SELECT
                    book_category_name  
                 FROM
                    tbl_book_category
                 WHERE
                    book_category_id = c.book_category_id)
    AS   book_category_name,
        book_author,
        shelf_rack_id,
        (SELECT 
                    shelf_rack_name
                 FROM
                    tbl_book_shelf_rack 
                 WHERE  
                    shelf_rack_id = c.shelf_rack_id)
        AS
                 shelf_rack_name,
         book_quantity,
         (CASE  WHEN  (book_quantity -((SELECT count(book_id)  FROM  tbl_book_borrow_return WHERE book_id = c.book_id  and book_status = 0)+ 
          (SELECT COUNT( book_sequence_id ) FROM  tbl_book_sequence WHERE  book_id = c.book_id
                          AND  book_condition IN ( 62, 63 ) ) )
                      ) >=1 
                        Then 0 ELSE 1 END ) 
       AS     status
        
    FROM
        tbl_books c
    WHERE
        c.branch_id = p_branch_id
    AND
         ( accession_number =  p_searchfield   
         OR 
         book_name LIKE CONCAT('%', p_searchfield , '%')
        
             
        
              
            OR 
              accession_number = p_searchfield
		)

;
      
      

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_bookSearchStudent` (IN `p_search_type` INT, IN `p_searchfield` VARCHAR(150), IN `p_branch_id` INT, IN `p_year_id` INT)  NO SQL
Begin 

 DECLARE cnt int default 0;
 

      IF  p_search_type = 1  THEN

          SELECT 
                  student_academic_id,
                  admission_number,
                  student_id,
                      ( SELECT 
                                              student_name
                                     FROM
                                              tbl_student  s 
                                      WHERE
                                              s.student_id = a.student_id)
              AS          student_name,                                      
                  course_id,
                  section_id,
                  get_courseName(course_id) AS course_name,
                  getSectionName(section_id) AS section_name,
                  (SELECT 
                      count(emp_id)  
                  FROM  
                      tbl_book_borrow_return  
                  WHERE 
                      student_id =  a.student_id  and book_status = 0) 
      AS            taken_books

      FROM
                  tbl_student_academic  a     
      WHERE 
                  branch_id = p_branch_id

	  AND         a.year_id=p_year_id

      AND
                  ( admission_number = p_searchfield
      OR
                    get_courseName(course_id) = p_searchfield
      OR      
                    a.student_id in 
                ( SELECT 
                                          student_id
                                  FROM
                                            tbl_student
                                  WHERE
                                          SOUNDEX(student_name) = SOUNDEX(p_searchfield))
                );
              
  ELSE
      SELECT
              emp_id,
              emp_number,
              emp_firstname,
              (SELECT 
                  count(emp_id)  
               FROM  
                  tbl_book_borrow_return  
              WHERE 
                  emp_id = e.emp_id  and book_status = 0)
      AS        taken_books
      FROM
              tbl_employees e
      WHERE
              branch_id = p_branch_id
      AND
            (  emp_number = p_searchfield
      OR
              SOUNDEX(emp_firstname) = SOUNDEX(p_searchfield));    
  

      END IF;
 
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_borrowedBookDetails` (IN `p_searchfield` VARCHAR(100), IN `p_branch_id` INT)  NO SQL
Begin


SELECT

        c.book_id,
        c.book_isbn_no,
        c.book_name,
        c.subject_id,
        c.book_author,
        c.book_quantity,
        (
          c.book_quantity-(SELECT count(book_id) 
          FROM  tbl_book_borrow_return 
          WHERE book_id = c.book_id  and book_status = 0)
        ) 
AS      available_copies,
        b.emp_id,
        (
          SELECT emp_number FROM  tbl_employees 
          WHERE emp_id=b.emp_id
        ) as emp_number,

        (
          SELECT emp_firstname FROM  tbl_employees 
          WHERE emp_id=b.emp_id
       )
 AS    emp_firstname,
    b.student_id,
       (
          SELECT admission_number FROM  tbl_student 
          WHERE student_id=b.student_id
       ) 
 AS    admission_number,
        (
            SELECT student_name FROM  tbl_student 
          WHERE student_id=b.student_id
       )
AS   student_name




FROM
tbl_books as  c ,tbl_book_borrow_return AS b

    
    WHERE
         
    b.book_id=c.Book_id
AND 
    b.book_status=0

AND 
       c.branch_id = p_branch_id
      

    AND
         ( SOUNDEX(c.book_name) = SOUNDEX(p_searchfield)
        OR
              UPPER(c.book_isbn_no)  =UPPER(p_searchfield)
        OR
              SOUNDEX(c.book_author) = SOUNDEX(p_searchfield) );


End$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_borrowReturnBookDetail` (IN `p_borrow_return_id` INT)  NO SQL
Begin

SELECT 
        b.borrow_return_id,
        b.book_status,
        b.book_sequence_id,
        b.student_id,
        b.emp_id,
        (SELECT emp_number FROM  tbl_employees 
          WHERE emp_id=b.emp_id
                                ) as emp_number,
        get_employeeName(b.emp_id) as emp_firstname,
        (SELECT department_name
                  FROM  tbl_departments
                  WHERE department_id=(SELECT department_id FROM  tbl_employees 
            WHERE emp_id=b.emp_id)
        ) as department_name,
        
        (SELECT admission_number FROM  tbl_student 
          WHERE student_id=b.student_id
                                 ) as admission_number,
        (SELECT student_name FROM  tbl_student 
          WHERE student_id=b.student_id
                                ) as  student_name,
        b.student_academic_id,
        get_courseName((SELECT section_id FROM  tbl_student_academic
 
          WHERE student_academic_id=b.student_academic_id
                )) AS course_name,
        getSectionName((SELECT section_id FROM  tbl_student_academic
 
          WHERE student_academic_id=b.student_academic_id
                )) AS section_name,
      
        DATE_FORMAT(b.issue_date,'%D %b %Y') as issue_date,
        DATE_FORMAT(b.due_date,'%D %b %Y') as due_date,
        DATE_FORMAT(b.return_date,'%D %b %Y') as return_date,
        b.remarks,
        c.book_isbn_no,
        c.book_name,
        c.book_quantity,
        c.book_author,
        c.book_edition,
        c.book_publisher,
        c.book_category_id,
        (SELECT
                    book_category_name  
                 FROM
                    tbl_book_category
                 WHERE
                    book_category_id = c.book_category_id)
  AS    book_category_name
        
        
  FROM
        tbl_book_borrow_return b
  INNER JOIN
        tbl_books  AS c ON c.book_id = b.book_id
  WHERE
      b.borrow_return_id = p_borrow_return_id ;

End$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_borrowReturnViewBook` (IN `p_branch_id` INT)  NO SQL
Begin

SELECT 
        b.borrow_return_id,
        b.book_status,
        b.student_id,
        b.emp_id,
        (SELECT emp_number FROM  tbl_employees 
          WHERE emp_id=b.emp_id
            ) as emp_number,
        get_employeeName(b.emp_id) as emp_firstname,
        (SELECT admission_number FROM  tbl_student 
          WHERE student_id=b.student_id
                ) as admission_number,
        (SELECT student_name FROM  tbl_student 
          WHERE student_id=b.student_id
                ) as  student_name,
        b.student_academic_id,
      
        DATE_FORMAT(b.issue_date,'%D %b %Y') as issue_date,
        DATE_FORMAT(b.due_date,'%D %b %Y') as due_date,
        c.book_isbn_no,
        c.book_name,
        b.status,
        b.branch_id     
  FROM
        tbl_book_borrow_return b
  INNER JOIN
        tbl_books  AS c ON c.book_id = b.book_id
  WHERE
      b.branch_id = p_branch_id;

End$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_campaign` (IN `p_branch_id` INT(11))  NO SQL
BEGIN

SELECT 
			campaigns.campaign_id,
			campaigns.campaign_name,
			campaign_supervisor,
			DATE_FORMAT(campaigns.start_date,'%D %b, %Y') start_date,
			DATE_FORMAT(campaigns.end_date,'%D %b, %Y') end_date,
			campaigns.address,
			campaigns.location,
			campaigns.descriptions,
			DATE_FORMAT(created_date,'%D %b, %Y %h:%i:%s') created_date,
			(
			 SELECT 
					country_name 
			  FROM 
			  		tbl_country AS country
			  WHERE 
			  		country.country_id = campaigns.country_id
			) AS country_name,
( 
			  SELECT 
					state_name 
			  FROM 
			  		tbl_state AS state
			  WHERE 
			  		state.state_id = campaigns.state_id
			) AS state_name ,
			( SELECT 
					city_name 
			  FROM 
			  		tbl_city AS city
			  WHERE
			  		 city.city_id = campaigns.city_id
			) AS city_name ,
			( SELECT 
					area_name 
			  FROM 
			  		tbl_area AS area
			  WHERE 
			  		area.area_id = campaigns.area_id
			) AS area_name 

	 FROM 
				tbl_campaigns AS campaigns

	WHERE 
				campaigns.branch_id  = p_branch_id
	AND 
				campaigns.campaign_status != '9'
	ORDER BY 
		 campaigns.campaign_id DESC ;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_campaigndataFollowup` (IN `p_data_id` INT(11))  NO SQL
BEGIN


	
		SELECT 
				followup_id ,
                branch_id,
                year_id,
                data_id,
                followup_by,
                followup_date,
                next_followup_date,
                comments,
                get_generalItemName(followup_status) AS followup_status,
                created_date,
                created_by,
                modified_date,
                modified_by

		FROM
				tbl_campaigndata_followups
				
		WHERE
				data_id = p_data_id
				
		ORDER BY 
				followup_id
		DESC;
					





END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_concessiondetails` (IN `p_concession_id` INT)  NO SQL
BEGIN


		SELECT 
				concession_id,
				concession_name,
				category_id,
				get_generalItemName(c.category_id)
        AS		category_name,
				concession_type_id,
				get_generalItemName(c.concession_type_id)
		AS 		concession_type,
				percentage,
				adjustment_type,
				get_generalItemName(c.category_id)
		AS 		adjustment,
				status,
				DATE_FORMAT(created_date,'%d %b %Y')
	    AS		created_date
				
		FROM
				tbl_fee_concession c
		WHERE
				concession_id = p_concession_id;




END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_courseidPlan` (IN `p_cource_id` INT, IN `p_branch_id` INT, IN `p_year_id` INT)  NO SQL
BEGIN


			SELECT 
						cource_plan_id,
						fee_plan_id,
						cource_id,
						(SELECT		p.fee_plan_name
                         FROM
                         			tbl_fee_plan p
                         WHERE
                         			p.fee_plan_id =cp.fee_plan_id ) 
			AS 			fee_plan_name
			FROM
					   tbl_fee_cource_plan cp
			WHERE 

					cp.cource_id =p_cource_id
            AND 
            		cp.branch_id =p_branch_id
            AND 
            		cp.year_id =p_year_id;




END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_dailyadmissionsreport` (IN `p_branch_id` INT, IN `p_year_id` INT)  BEGIN
SELECT count(1) as admcnt,(SELECT get_courseName(sa.course_id) AS course_Name FROM tbl_student_academic sa where sa.student_id=s.student_id limit 0,1) course_Name FROM tbl_student s 
						WHERE  s.status='0' and s.branch_id = 1 AND s.year_id = 10
						AND DATE_FORMAT(s.created_date,'%Y-%m-%d') < curdate()-INTERVAL 1 DAY
						group by course_Name
                        union
                        SELECT IFNULL(count(s.student_id),0) as admscnt,get_courseName(sa.course_id) AS course_Name FROM tbl_student s inner join tbl_student_academic sa on  sa.student_id=s.student_id    
						WHERE  s.status='0' and s.branch_id = 1 AND 
						s.year_id = 10
						AND DATE_FORMAT(s.created_date,'%Y-%m-%d') = curdate()
						group by course_Name;
 
						                         
                        
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_dashboard_mail` (IN `p_branch_id` INT(11), IN `p_date` DATE, IN `p_year_id` INT(11), IN `p_from_date` DATE)  BEGIN

SELECT (SELECT IFNULL(COUNT(l.lead_id),0)
FROM tbl_leads l
WHERE DATE_FORMAT(l.lead_date,'%Y-%m-%d') = p_date
AND l.branch_id=p_branch_id
AND l.status='0') AS enquries,

(SELECT IFNULL(COUNT(a.application_id),0)
FROM tbl_applications a
WHERE DATE_FORMAT(a.created_date,'%Y-%m-%d') = p_date
AND a.branch_id=p_branch_id
AND a.status='0') AS applications,

(SELECT IFNULL(COUNT(s.student_id),0)
FROM tbl_student s
WHERE DATE_FORMAT(s.created_date,'%Y-%m-%d') = p_date
AND s.branch_id=p_branch_id
AND s.status='0') AS admissions,

(SELECT IFNULL(COUNT(l2.lead_id),0)
FROM tbl_leads l2
WHERE l2.branch_id=p_branch_id
AND l2.status='0'
        AND DATE_FORMAT(l2.lead_date,'%Y-%m-%d') >= p_from_date
        AND DATE_FORMAT(l2.lead_date,'%Y-%m-%d') <= p_date) AS ttl_enquries,  

(SELECT IFNULL(COUNT(a2.application_id),0)
FROM tbl_applications a2
WHERE a2.branch_id=p_branch_id
AND (a2.status='0' OR a2.status='')
        AND DATE_FORMAT(a2.created_date,'%Y-%m-%d') >= p_from_date
        AND DATE_FORMAT(a2.created_date,'%Y-%m-%d') <= p_date) AS ttl_applications,

(SELECT IFNULL(COUNT(s2.student_id),0)
FROM tbl_student s2
WHERE s2.branch_id=p_branch_id
AND s2.status='0'
        AND DATE_FORMAT(s2.created_date,'%Y-%m-%d') >= p_from_date
                AND s2.year_id = p_year_id
        ) AS ttl_admissions,

(SELECT IFNULL(COUNT(sa.student_id),0)
FROM tbl_student s3
INNER JOIN tbl_student_academic sa ON sa.student_id=s3.student_id AND sa.status='0'
WHERE s3.branch_id=p_branch_id
AND s3.status='0'
AND sa.branch_id=p_branch_id
AND sa.year_id=p_year_id) AS ttl_students;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_discipline` (IN `p_discipline_id` INT ZEROFILL)  BEGIN

		
					IF p_discipline_id = 0 Then

							SELECT 
											discipline_id,
											student_id,
											get_studentName(student_id) AS studentname,
											admission_number,
											description,
											date_of_offense,
											reported_by,
											class_id,
											branch_id,
											year_id,
											status,
											created_by,
											created_date,
											updated_by,
											updated_date


						FROM
											tbl_discipline;

			ELSE 

					SELECT 
											discipline_id,
											student_id,
											get_studentName(student_id) AS studentname,
											admission_number,
											description,
											date_of_offense,
											reported_by,
											class_id,
											branch_id,
											year_id,
											status,
											created_by,
											created_date,
											updated_by,
											updated_date


						FROM
											tbl_discipline
						WHERE
											discipline_id = p_discipline_id;

			END IF;

															

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_EmpAttendance` (IN `p_startdate` DATE, IN `p_enddate` DATE, IN `p_department_id` INT, IN `p_branch_id` INT)  BEGIN
  DECLARE currdate Date;
  DECLARE currdate1 Date;
  DECLARE enddate date;
  DECLARE v_cond varchar(250);
	SET group_concat_max_len = 2048;
  SET @sql = NULL;


  SET v_cond = '';
  IF p_department_id != 0 THEN 
    SET v_cond = CONCAT(' and department_id =',p_department_id );
  END IF;
  SET currdate = p_startdate;
  SET currdate1 = currdate;
  SET enddate =  LAST_DAY(currdate);
   
   IF enddate > p_enddate THEN
   
   SET enddate = p_enddate;
   
   END IF;
  DROP TEMPORARY  TABLE IF exists tbl_temp_calender;


  CREATE TEMPORARY TABLE IF NOT EXISTS tbl_temp_calender(`atd` datetime);
  INSERT INTO tbl_temp_calender (atd) VALUES(currdate);
  WHILE currdate < enddate DO
  
   Set currdate = DATE_ADD(currdate,INTERVAL 1 DAY);
  INSERT INTO tbl_temp_calender (atd) VALUES(currdate);
  END WHILE;

  DROP TEMPORARY TABLE IF exists tbl_temp_str;
  CREATE TEMPORARY  table tbl_temp_str (str_max longtext);

  INSERT INTO  tbl_temp_str  
  SELECT 
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'MAX(IF(d=', date_format(c.atd,'%d'),',f,checkEmpLeave(l.ei,''',date_format(c.atd,'%Y-%m-%d'),''')))''', date_format(c.atd,'%e'),'''' )
      ) str_C
  FROM tbl_temp_calender c;
  SET @sql = CONCAT('select l.emp_firstname,', (SELECT str_max FROM tbl_temp_str) ,' from (SELECT concat(emp_firstname,'' '',emp_middlename,'' '',emp_lastname) as emp_firstname,emp_id as ei, emp_number from tbl_employees WHERE    branch_id =',p_branch_id,'  ',v_cond,' and status=''0'' ) l left join (SELECT emp_id,attn_in_date, date_format(attn_in_date,''%d'') as d,  concat(coalesce(DATE_FORMAT(attn_in_time,''%l:%i %p''),''NAN''),''/'',coalesce(date_format(attn_out_time,''%l:%i %p''),''NAN'')) f from tbl_emp_attendance)p on l.ei = p.emp_id and  date(p.attn_in_date)>='' ',date(currdate1),''' and  date(p.attn_in_date)  <= ''',date(enddate),''' group by l.emp_firstname order by l.ei');

 
  PREPARE stmt FROM @sql;
   
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_empAttnWeekly` (IN `p_startdate` DATE, IN `p_enddate` DATE, IN `p_branch_id` INT)  BEGIN
  DECLARE currdate Date;
  DECLARE currdate1 Date;
  DECLARE enddate date;
  DECLARE v_cond varchar(250);
  DECLARE v_emp_cond varchar(250);
  SET group_concat_max_len = 2048;
  SET @sql = NULL;


  SET v_cond = '';
  SET v_emp_cond = '';
  SET currdate = p_startdate;
  SET currdate1 = currdate;
  SET enddate =  LAST_DAY(currdate);
   
   IF enddate > p_enddate THEN
   
   SET enddate = p_enddate;
   
   END IF;
  DROP   TABLE IF exists tbl_temp_calender;


  CREATE  TABLE IF NOT EXISTS tbl_temp_calender(`emp_id` INT,`currdate` datetime,`attn_in_date` datetime,`attn_out_date` datetime, `emp_name` varchar(50),`emp_num` varchar(50),`department_id` INT, `attn_in_time` time,`attn_out_time` time,`branch_id` INT);
    WHILE currdate <= enddate DO
  
  INSERT INTO tbl_temp_calender  
    SELECT emp_id,currdate,att.attn_in_date,att.attn_out_date,emp_name,emp_num,dept_id,attn_in_time,attn_out_time,branch_id FROM 
      (select e.emp_id,currdate,concat(e.emp_firstname,' ',e.emp_middlename,' ',e.emp_lastname ) AS emp_name,e.department_id AS dept_id, e.emp_number AS emp_num,e.branch_id as branch_id
        from tbl_employees e 
        where e.status='0') f
      left join ( SELECT ea.attn_in_date AS attn_in_date,ea.emp_id AS EMP,ea.attn_out_date,ea.attn_in_time,ea.attn_out_time  FROM tbl_emp_attendance ea 
                 ) att
        ON att.EMP = f.emp_id  AND date(att.attn_in_date)= date(currdate);
        Set currdate = DATE_ADD(currdate,INTERVAL 1 DAY);
       END WHILE;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_emp_attendance_details` (IN `p_department_id` INT(11), IN `p_attendance_date` DATETIME, IN `p_branch_id` INT(11), IN `p_year_id` INT(11))  NO SQL
BEGIN

SELECT e.emp_id, e.emp_number, CONCAT(e.emp_firstname, ' ', e.emp_lastname) AS emp_name,
COALESCE(a.attendance_flag,'') as attendance_flag,
COALESCE(a.remarks,'') as remarks,
COALESCE(a.attn_in_date,'') as attendance_date,
COALESCE(IF(a.attn_in_time !='00:00:00',TIME_FORMAT(a.attn_in_time,'%h:%i %p'),''),'') as attendance_in_time,
COALESCE(IF(a.attn_out_time !='00:00:00',TIME_FORMAT(a.attn_out_time,'%h:%i %p'),'') ,'') as attendance_out_time,
a.user_id
FROM tbl_employees e
LEFT JOIN tbl_emp_attendance a ON a.emp_id = e.emp_id
AND date(a.attn_in_date) = date(p_attendance_date)
WHERE e.department_id=p_department_id
AND e.branch_id = p_branch_id
AND e.status='0';


SELECT count(a.attendance_id) as attendance_count  
FROM tbl_emp_attendance a 
LEFT JOIN tbl_employees e 
on a.emp_id = e.emp_id
WHERE a.attn_in_date=p_attendance_date 
AND e.department_id = p_department_id
AND e.branch_id = p_branch_id
AND e.status='0' AND a.status='0';


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_emp_pending_leaves` (IN `p_emp_id` INT, IN `p_leave_type_id` INT, IN `p_leave_plan_id` INT, IN `p_branch_id` INT)  NO SQL
BEGIN

DECLARE v_desig_leave_count INT(11);
DECLARE v_leave_count INT(11);
DECLARE v_on_before INT(11);
SET v_leave_count = 0;
SET v_desig_leave_count = 0;
SET v_on_before = 0;
select  
((lt.total_leaves)*
( CASE WHEN leave_span='Half-Yearly' THEN 2  WHEN leave_span='Monthly' THEN 12 WHEN leave_span='Quarterly' THEN 3 END)
) INTO v_desig_leave_count
from tbl_leave_plan_types lt where lt.status='0' AND lt.leave_plan_id= p_leave_plan_id AND lt.leave_type_id = p_leave_type_id AND lt.branch_id = p_branch_id;

SELECT on_before INTO v_on_before FROM tbl_leave_types WHERE leave_type_id=p_leave_type_id ;

select sum(no_of_paid_days+no_of_unpaid_days) as leavs INTO v_leave_count from tbl_leave_requests l where l.employee_id = p_emp_id AND l.leave_type_id = p_leave_type_id AND l.request_status=132; 

    IF v_leave_count>0 then
SET v_leave_count = (v_desig_leave_count-v_leave_count);
    ELSE 
SET v_leave_count = 0;
    END IF;
   

SELECT v_leave_count AS leave_count, v_desig_leave_count AS desig_leave_count,v_on_before AS on_before;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_enquiries` (IN `p_branch_id` INT)  NO SQL
BEGIN

SELECT *, 
DATE_FORMAT(lead_date,'%d %M %Y') AS lead_date,
get_branchName(branch_id) as branch_id,
get_courseName(course_id) as course_id 
FROM tbl_leads 
WHERE 
branch_id = p_branch_id
AND status != '9'
AND lead_status='enquiry'

ORDER BY lead_id DESC;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_feeAccount` (IN `p_branch_id` INT)  BEGIN

			SELECT 
				fee_account_id,
                branch_id,
               	fee_account_name,
				fee_bank_name,
                status,
                created_by,
                created_date,
                modified_by,
                modified_date,
				is_trust
		FROM
				tbl_fee_accounts
		WHERE branch_id=p_branch_id AND status='0';	


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_feeAssignPlan` (IN `p_cource_id` INT, IN `p_branch_id` INT, IN `p_year_id` INT)  NO SQL
BEGIN

SELECT p.fee_plan_name  AS	planname,
				t.fee_plan_id,
				t.fee_type_id,
				get_feeTypeamount(t.fee_type_id) 
		AS      
				amount,
				get_feeTypeName(t.type_plan_id)
		AS
				feetypename,
				t.mandatory,
				t.type_plan_id

		FROM
				
				tbl_fee_type_plan t
	LEFT JOIN tbl_fee_plan p ON p.fee_plan_id =t.fee_plan_id
		WHERE
				p.new_admissions =1 AND 
				t.fee_plan_id IN (SELECT
                                		distinct fee_plan_id
                                FROM
                                		tbl_fee_cource_plan
								WHERE
                                		cource_id = p_cource_id
                                AND
										branch_id = p_branch_id
								AND
										year_id = p_year_id
                               	AND
                               			status ='0') 
       	AND  
				t.branch_id = p_branch_id
		AND
				t.year_id = p_year_id
		AND 
				t.status = '0';              


                                		
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_feeConcession` (IN `p_branch_id` INT, IN `p_year_id` INT)  NO SQL
BEGIN


		SELECT 
				concession_id,
				concession_name,
				category_id,
				get_generalItemName(c.category_id)
        AS		category_name,
				concession_type_id,
				get_generalItemName(c.concession_type_id)
		AS 		concession_type,
				percentage,
				adjustment_type,
				get_generalItemName(c.adjustment_type)
		AS 		adjustment,
				status,
				DATE_FORMAT(created_date,'%d %b %Y')
	    AS		created_date
				
		FROM
				tbl_fee_concession c
		WHERE
				status = '0'
		AND
				branch_id = p_branch_id
		AND
				year_id = p_year_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_feeManagment` (IN `p_cource_id` INT, IN `p_branch_id` INT, IN `p_year_id` INT, IN `p_studentid` INT)  NO SQL
BEGIN

DECLARE v_yearid  INT;

SET v_yearid = 0;

SELECT  year_id INTO  v_yearid   FROM  tbl_student WHERE  student_id = p_studentid;

 IF ( v_yearid = p_year_id ) THen


SELECT
				(SELECT
                		p.fee_plan_name
                 FROM
                 		tbl_fee_plan p
                 WHERE
                 		p.fee_plan_id =t.fee_plan_id
                 LIMIT
                 		0,1) 
       AS
				planname,
				fee_plan_id,
				fee_type_id,
				get_feeTypeamount(fee_type_id) 
		AS      
				amount,
				get_feeTypeName(type_plan_id)
		AS
				feetypename,
				mandatory,
				type_plan_id

		FROM
				
				tbl_fee_type_plan t
		WHERE
				
				t.fee_plan_id IN (SELECT
                                		distinct c.fee_plan_id
                                FROM
                                		tbl_fee_cource_plan c
								INNER JOIN
										tbl_fee_plan fp
								ON
									    c.fee_plan_id = fp.fee_plan_id
								AND
										fp.new_admissions =1
								WHERE
                                		c.cource_id =p_cource_id
                                AND
										c.branch_id = p_branch_id
								AND
										c.year_id =p_year_id
                               	AND
                               			c.status ='0') 
       	AND  
				branch_id =p_branch_id
		AND
				year_id =p_year_id
		AND 
				status = '0'
		AND 
				t.fee_plan_id NOT IN(SELECT master_id 
									FROM tbl_id_configuration 
                                    WHERE branch_id=p_branch_id 
                                    AND year_id = p_year_id 
                                    AND status ='0' 
                                    AND master_type ='application');
                
                
 ELSEIF  v_yearid < p_year_id THEN
 
				 SELECT
								(SELECT
										p.fee_plan_name
								 FROM
										tbl_fee_plan p
								 WHERE
										p.fee_plan_id =t.fee_plan_id
								 LIMIT
										0,1) 
					   AS
								planname,
								fee_plan_id,
								fee_type_id,
								get_feeTypeamount(fee_type_id) 
						AS      
								amount,
								get_feeTypeName(type_plan_id)
						AS
								feetypename,
								mandatory,
								type_plan_id

						FROM
								
								tbl_fee_type_plan t
						WHERE
								
								t.fee_plan_id IN (SELECT
															distinct c.fee_plan_id
													FROM
															tbl_fee_cource_plan c
													INNER JOIN
															tbl_fee_plan fp
													ON
															c.fee_plan_id = fp.fee_plan_id
													AND
															fp.existing_admission =1
													WHERE
															c.cource_id =p_cource_id
													AND
															c.branch_id = p_branch_id
													AND
															c.year_id =p_year_id
													AND
															c.status ='0'
												    						AND   fp.fee_plan_id = (select fee_plan_id from tbl_fee_type_plan where status='0' and type_plan_id = (select type_plan_id from tbl_student_plan_type where student_id = p_studentid and year_id = p_year_id and status='0' limit 0,1) limit 0,1)

                                                    AND c.fee_plan_id not in (SELECT sp.fee_plan_id FROM tbl_scheme_plans sp where sp.branch_id = p_branch_id AND sp.year_id =  p_year_id AND status = '0')
                                                            
                                                            ) 
                        
							AND	branch_id =p_branch_id
						AND
								year_id =p_year_id
						AND 
								status = '0';
				 
				 
 END IF;

                                		
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_feeManagment1` (IN `p_cource_id` INT, IN `p_branch_id` INT, IN `p_year_id` INT, IN `p_studentid` INT)  NO SQL
BEGIN

DECLARE v_yearid  INT;

SET v_yearid = 0;

SELECT  year_id INTO  v_yearid   FROM  tbl_student WHERE  student_id = p_studentid;

 IF ( v_yearid = p_year_id ) THen


SELECT
				(SELECT
                		p.fee_plan_name
                 FROM
                 		tbl_fee_plan p
                 WHERE
                 		p.fee_plan_id =t.fee_plan_id
                 LIMIT
                 		0,1) 
       AS
				planname,
				fee_plan_id,
				fee_type_id,
				get_feeTypeamount(fee_type_id) 
		AS      
				amount,
				get_feeTypeName(type_plan_id)
		AS
				feetypename,
				mandatory,
				type_plan_id

		FROM
				
				tbl_fee_type_plan t
		WHERE
				
				t.fee_plan_id IN (SELECT
                                		distinct c.fee_plan_id
                                FROM
                                		tbl_fee_cource_plan c
								INNER JOIN
										tbl_fee_plan fp
								ON
									    c.fee_plan_id = fp.fee_plan_id
								AND
										fp.new_admissions =1
								WHERE
                                		c.cource_id =p_cource_id
                                AND
										c.branch_id = p_branch_id
								AND
										c.year_id =p_year_id
                               	AND
                               			c.status ='0') 
       	AND  
				branch_id =p_branch_id
		AND
				year_id =p_year_id
		AND 
				status = '0'
		AND 
				t.fee_plan_id NOT IN(SELECT master_id 
									FROM tbl_id_configuration 
                                    WHERE branch_id=p_branch_id 
                                    AND year_id = p_year_id 
                                    AND status ='0' 
                                    AND master_type ='application');
                
                
 ELSEIF  v_yearid < p_year_id THEN
 
				 SELECT
								(SELECT
										p.fee_plan_name
								 FROM
										tbl_fee_plan p
								 WHERE
										p.fee_plan_id =t.fee_plan_id
								 LIMIT
										0,1) 
					   AS
								planname,
								fee_plan_id,
								fee_type_id,
								get_feeTypeamount(fee_type_id) 
						AS      
								amount,
								get_feeTypeName(type_plan_id)
						AS
								feetypename,
								mandatory,
								type_plan_id

						FROM
								
								tbl_fee_type_plan t
						WHERE
								
								t.fee_plan_id IN (SELECT
															distinct c.fee_plan_id
													FROM
															tbl_fee_cource_plan c
													INNER JOIN
															tbl_fee_plan fp
													ON
															c.fee_plan_id = fp.fee_plan_id
													AND
															fp.existing_admission =1
													WHERE
															c.cource_id =p_cource_id
													AND
															c.branch_id = p_branch_id
													AND
															c.year_id =p_year_id
													AND
															c.status ='0'
												    AND c.fee_plan_id not in (SELECT sp.fee_plan_id FROM tbl_scheme_plans sp where sp.branch_id = p_branch_id AND sp.year_id =  p_year_id AND status = '0')
                                                            
                                                            ) 
						AND  
								branch_id =p_branch_id
						AND
								year_id =p_year_id
						AND 
								status = '0';
				 
				 
 END IF;

                                		
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_feeplan` (IN `p_fee_plan_id` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11))  NO SQL
BEGIN

		SELECT 
				fee_plan_id,
                fee_plan_name,
				new_admissions,
				existing_admission,
				status
		FROM
				tbl_fee_plan
		WHERE
				fee_plan_id = p_fee_plan_id;


		SELECT 
				course_id,
				course_name,
				course_code,
				(SELECT
                 		cp.cource_plan_id
                 FROM
                 		tbl_fee_cource_plan cp
                 WHERE
                 		cp.fee_plan_id = p_fee_plan_id
                 AND
                 		cp.cource_id = c.course_id
                 AND cp.status= '0'
                 
                 LIMIT 0,1) As cource_plan_id
				
		FROM
				tbl_course c
		WHERE 
				c.branch_id = p_branch_id
        AND c.course_status='0';
		
		SELECT 
				type_plan_id,
				fee_plan_id,
				fee_type_id,
				mandatory,
				(SELECT
                 		ft.fee_type_name
                 FROM
                 		tbl_fee_type ft
                 WHERE
                 		ft.fee_type_id = tp.fee_type_id
                 LIMIT 0,1) AS fee_type_name,
				(SELECT get_feeTypeamount(tp.fee_type_id)) AS amount,
				(SELECT COUNT(t.terms_id) 
                 FROM tbl_fee_terms t 
                 WHERE t.type_id = tp.fee_type_id) AS terms
	    FROM
				tbl_fee_type_plan tp
		WHERE 
				tp.fee_plan_id = p_fee_plan_id
		AND 	tp.status='0';

		SELECT
				fee_type_id,
				fee_type_name
		FROM
				tbl_fee_type
		WHERE
				
				branch_id = p_branch_id
       AND
               year_id = p_year_id
		AND
				fee_type_id NOT IN ( SELECT 
                                    		fee_type_id
                                    			                                  FROM                                    
                                           tbl_fee_type_plan
                                    WHERE
                                    		fee_plan_id = p_fee_plan_id AND status = '0')
		AND status = '0';


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_feePlans` (IN `p_branch_id` INT(11), IN `p_year_id` INT(11))  NO SQL
BEGIN

SELECT *, DATE_FORMAT(created_date,'%D %b, %Y') AS created_date FROM tbl_fee_plan WHERE 
branch_id = p_branch_id
AND 
year_id = p_year_id  ;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_feeType` (IN `p_branch_id` INT(11), IN `p_year_id` INT(11))  NO SQL
BEGIN


			SELECT
					a.fee_type_id,
                    fee_type_name,
                    print_name,
                    fee_type_code,
                    fee_account_id,
					(SELECT
                     			b.fee_account_name
                     FROM
                     			tbl_fee_accounts b
                     WHERE
                     			b.fee_account_id= a.fee_account_id
                     LIMIT 0,1) AS fee_account_name,  
                    fee_category_id,

					(SELECT
                     			c.fee_category_name
                     FROM
                     			tbl_fee_category c
                     WHERE
                     			c.fee_category_id = a.fee_category_id
                     LIMIT 0,1) AS fee_category_name,
                    a.status,
                    branch_id,
                    fee_terms,
					get_feeTypeamount(a.fee_type_id) as amount,
                    branch_id,
                    fee_terms,					
                    created_by,
                    DATE_FORMAT(created_date, '%D %b, %Y %H:%I:%S') AS 						created_date

			FROM
					tbl_fee_type a
			WHERE 
					a.branch_id = p_branch_id
            and 
            		a.year_id= p_year_id
            and 
            		a.status='0';
			


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_feeTypecond` (IN `p_fee_type_id` INT)  NO SQL
BEGIN

		SELECT
					a.fee_type_id,
                    fee_type_name,
                    print_name,
                    fee_type_code,
                    fee_account_id,
					fee_category_id,
					status,
                    branch_id,
                    fee_terms,
					get_feeTypeamount(a.fee_type_id) as ttl_amount

			FROM
					tbl_fee_type a
			WHERE
					a.fee_type_id = p_fee_type_id;


			SELECT
					*
			FROM
					tbl_fee_terms
        	WHERE
                	type_id =p_fee_type_id;



					 SELECT
                     			b.fee_account_name,

								b.fee_account_id
                     FROM
                     			tbl_fee_accounts b ;
                     
					 SELECT
								c.fee_category_id,
                     			c.fee_category_name
                     FROM
                     			tbl_fee_category c ; 
					


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_generalItems` (IN `p_category` VARCHAR(250))  NO SQL
BEGIN

SELECT item_id, item_name 
FROM tbl_general_items
WHERE category = p_category
AND status = '0'
ORDER BY item_id ASC;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_inactiveEmpAttnWeekly` (IN `p_startdate` DATE, IN `p_enddate` DATE, IN `p_branch_id` INT)  BEGIN
  DECLARE currdate Date;
  DECLARE currdate1 Date;
  DECLARE enddate date;
  DECLARE v_cond varchar(250);
  DECLARE v_emp_cond varchar(250);
  SET group_concat_max_len = 2048;
  SET @sql = NULL;


  SET v_cond = '';
  SET v_emp_cond = '';
  SET currdate = p_startdate;
  SET currdate1 = currdate;
  SET enddate =  LAST_DAY(currdate);
   
   IF enddate > p_enddate THEN
   
   SET enddate = p_enddate;
   
   END IF;
  DROP   TABLE IF exists tbl_temp_calender;


  CREATE  TABLE IF NOT EXISTS tbl_temp_calender(`emp_id` INT,`currdate` datetime,`attn_in_date` datetime,`attn_out_date` datetime, `emp_name` varchar(50),`emp_num` varchar(50),`department_id` INT, `attn_in_time` time,`attn_out_time` time,`branch_id` INT);
    WHILE currdate <= enddate DO
  
  INSERT INTO tbl_temp_calender  
    SELECT emp_id,currdate,att.attn_in_date,att.attn_out_date,emp_name,emp_num,dept_id,attn_in_time,attn_out_time,branch_id FROM 
      (select e.emp_id,currdate,concat(e.emp_firstname,' ',e.emp_middlename,' ',e.emp_lastname ) AS emp_name,e.department_id AS dept_id, e.emp_number AS emp_num,e.branch_id as branch_id
        from tbl_employees e 
        where e.status='9' AND e.emp_id  in (select emp_id from tbl_emp_attendance where date_format(created_date,'%Y-%m') = date_format(p_startdate,'%Y-%m') AND emp_id in (select e.emp_id  from tbl_employees e where status='9') )) f
      left join ( SELECT ea.attn_in_date AS attn_in_date,ea.emp_id AS EMP,ea.attn_out_date,ea.attn_in_time,ea.attn_out_time  FROM tbl_emp_attendance ea 
                where emp_id in (select emp_id from tbl_emp_attendance where date_format(created_date,'%Y-%m') = date_format(p_startdate,'%Y-%m') AND emp_id in (select e.emp_id  from tbl_employees e where status='9') ) ) att
        ON att.EMP = f.emp_id  AND date(att.attn_in_date)= date(currdate);
        Set currdate = DATE_ADD(currdate,INTERVAL 1 DAY);
       END WHILE;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_inactiveStudentProfile` (IN `p_student_id` INT, IN `p_year_id` INT, IN `p_branch_id` INT)  NO SQL
BEGIN

DECLARE v_course_id INT;
        DECLARE v_section_id INT;
        DECLARE second_language_id INT;
        DECLARE third_language_id INT;
        DECLARE category_id INT;
        DECLARE studnet_photo VARCHAR(250);
        DECLARE v_parent_email_id varchar(250);
        DECLARE v_father_name varchar(250);
        DECLARE v_father_number varchar(150);
        DECLARE v_father_occupation varchar(250);
        DECLARE v_father_address varchar(250);

        
                 SELECT 
                        concat(b.parent_firstname ," " ,b.parent_lastname),
                          parent_mobile_number,
                          parent_email_id,
                        IFNULL(parent_occupation, ''),
                        IFNULL(parent_address, '')
                INTO
                        
                        v_father_name,
                        v_father_number,

                        v_parent_email_id,
                        v_father_occupation,
                        v_father_address
                        
                        
                FROM 
                        tbl_student_parents b
                WHERE 

                         b.student_id = p_student_id LIMIT 0,1;
        



            SELECT
             s.student_id AS student_id, 
             s.admission_number AS admission_number,
             s.student_name AS student_name,
             s.student_middlename AS student_middlename,
             s.student_lastname AS student_lastname,
             s.family_doctor AS family_doctor,
             s.doctor_mobile AS doctor_mobile,
             s.gender AS gender,
             DATE_FORMAT(s.student_dob,'%d %M %Y') AS student_dob,
             s.place_birth AS place_birth,
             s.student_email AS student_email,
             s.address AS address,
             s.landmark AS landmark,
             s.area_id AS area_id,
             s.city_id AS city_id,
             s.state_id AS state_id,
             s.country_id AS country_id,
             s.pincode AS pincode,
             s.present_landmark AS present_landmark,
             s.present_address AS present_address,
             s.present_area_id AS present_area_id,
             s.present_city_id AS present_city_id,
             s.present_state_id AS present_state_id,
             s.present_country_id AS present_country_id,
             s.present_pincode AS present_pincode,
             s.blood_group AS blood_group,
             s.moleidentity1 AS moleidentity1,
             s.moleidentity2 AS moleidentity2,
             s.religion_id AS religion_id,
             s.cast_id AS cast_id,
             s.nationality_id AS nationality_id,
             s.mother_tongue AS mother_tongue,
             s.referred_name AS referred_name,
             s.application_id AS application_id,
             s.enquery_id AS enquery_id,
             a.course_id AS course_id,
             a.student_academic_id AS student_academic_id,
             a.roll_number AS roll_number,
             a.section_id AS section_id,
             a.third_language_id AS third_language_id,
             a.second_language_id AS second_language_id,
             a.category_id AS category_id,
             a.quota_id AS quota_id,
             a.daycare_id AS daycare_id,
             a.studnet_photo AS studnet_photo,
             DATE_FORMAT(s.created_date, '%d %M %Y') AS created_date,
             get_courseName(a.course_id) AS course_name,
             getSectionName(a.section_id) AS section_name,
             get_generalItemName(a.category_id) as category_name,
             v_father_name,
             v_father_number,
             v_parent_email_id,
             v_father_occupation,
             v_father_address

FROM
            tbl_student s 
LEFT JOIN 
            (SELECT student_academic_id,
                    branch_id,
                    year_id,
                    admission_number,
                    student_id,
                    roll_number,
                    course_id ,
                    section_id,
                    second_language_id,
                    third_language_id,
                    category_id,
                    quota_id ,
                    daycare_id ,
                    studnet_photo
            FROM
                    tbl_student_academic 
            WHERE 
                    student_id = p_student_id
            AND
                    branch_id = p_branch_id
            AND
                    year_id = p_year_id
            AND
                    status = '1') a 
ON  
            s.student_id = a.student_id
WHERE
            s.student_id = p_student_id;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_inactiveStudents` (IN `p_branch_id` INT, IN `p_year_id` INT)  NO SQL
BEGIN

SELECT 
student_id,
admission_number,
concat(a.student_name ," " ,a.student_middlename ," " ,a.student_lastname) AS student_fullname,
gender,
branch_id,
year_id,
status,
created_by,
DATE_FORMAT(created_date,'%d %b,%Y %H:%i') AS created_date,
modified_by,
DATE_FORMAT(modified_date,'%d %b,%Y %H:%i') AS modified_date,
( SELECT 
 	get_courseName(sa.course_id) 
  FROM
 	tbl_student_academic sa
 WHERE 
 	sa.student_id = a.student_id
 AND 
 	sa.status='1'
 AND sa.year_id = p_year_id
 LIMIT 0,1)  AS course_id ,
	(SELECT 
		concat(b.parent_firstname ," " ,b.parent_lastname)
	FROM 
		tbl_student_parents b
	WHERE 
		b.student_id = a.student_id   and b.status = '0'  LIMIT 0,1) father_name,
	(SELECT 
			b.parent_mobile_number
	FROM 
			tbl_student_parents b
	WHERE 
			b.student_id = a.student_id  and  b.status = '0'  LIMIT 0,1) father_number,
   ( SELECT 
 	sa.inactive_reason 
  FROM
 	tbl_student_academic sa
 WHERE 
 	sa.student_id = a.student_id
 AND 
 	sa.status='1'
 LIMIT 0,1)  AS inactive_reason
FROM
	tbl_student a 
   WHERE a.status = '1' 
AND branch_id = p_branch_id
AND 
student_id in (SELECT sa.student_id from tbl_student_academic sa WHERE sa.year_id=p_year_id and sa.status='1')
ORDER BY a.created_date DESC;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_leadFollowup` (IN `p_lead_id` INT(11))  NO SQL
BEGIN


	
		SELECT 
				followup_id ,
                branch_id,
                year_id,
                lead_id,
                followup_by,
                followup_date,
                next_followup_date,
                comments,
                get_generalItemName(followup_status) AS followup_status,
                created_date,
                created_by,
                modified_date,
                modified_by

		FROM
				tbl_lead_followups
				
		WHERE
				lead_id = p_lead_id
				
		ORDER BY 
				followup_id
		DESC;
					





END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_mis_receipt` (IN `p_system_receipt_number` VARCHAR(250))  NO SQL
BEGIN

DECLARE  v_student_id  int;
DECLARE  v_year_id  int;
DECLARE  v_paymode  int;
DECLARE v_parent_name VARCHAR(250);
DECLARE v_parent_mobile VARCHAR(50);
DECLARE v_parent_email VARCHAR(50);
DECLARE v_parent_address VARCHAR(50);
DECLARE v_course_name VARCHAR(250);
DECLARE v_section_name VARCHAR(250);

SET v_student_id  = 0 ;
SELECT byer_id,year_id
    	INTO v_student_id,v_year_id
	FROM tbl_mis_transactions
	WHERE system_receipt_number  = p_system_receipt_number 
	LIMIT 0,1;
    
SELECT get_courseName(course_id),getSectionName(section_id) 
		INTO v_course_name,v_section_name
        FROM tbl_student_academic 
        WHERE student_id=v_student_id AND year_id=v_year_id AND status='0';

SELECT concat(b.parent_firstname ," " ,b.parent_lastname), b.parent_mobile_number,b.parent_email_id, b.address 
	INTO v_parent_name, v_parent_mobile, v_parent_email, v_parent_address
	FROM tbl_student_parents b
    WHERE b.student_id = v_student_id LIMIT 0,1;
    
SELECT a.student_id, concat(a.student_name ," " ,a.student_middlename ," " ,a.student_lastname) AS student_fullname, v_parent_name AS father_name, v_parent_mobile AS father_mobile, a.admission_number, v_parent_email AS parent_email, v_parent_address AS parent_address, v_course_name AS course_name, v_section_name AS section_name
    FROM tbl_student a
    WHERE a.student_id =  v_student_id ;
    
SELECT sum(ft.amount) as amount,  ft.mis_transaction_number,ft.manual_receipt_number, ft.system_receipt_number, 
DATE_FORMAT(ft.transaction_date,'%D %b %Y %H:%i') AS transaction_date, 
get_generalItemName(ft.pay_mode) AS pay_mode,
(SELECT item_name FROM tbl_inventory_items WHERE item_id=ANY_VALUE(ft.Item_id)) AS item_name,
ANY_VALUE(ft.check_transaction_num) AS check_transaction_num,  ANY_VALUE(ft.quantitiy) AS quantitiy
    FROM tbl_mis_transactions ft
	WHERE ft.system_receipt_number  = p_system_receipt_number
	AND ft.byer_id = v_student_id
	GROUP BY ft.mis_transaction_number, ft.manual_receipt_number,  ft.system_receipt_number,
    ft.transaction_date, ft.pay_mode;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_pendingapplications` (IN `p_branch_id` INT, IN `p_year_id` INT)  BEGIN
SELECT 
                a.application_id,
                a.application_number,
                a.lead_id,
                a.year_id,
                a.branch_id,
                concat(a.student_firstname ," " ,a.student_lastname) AS student_fullname,
                get_courseName(a.course_id) AS course_id,
                a.gender,
                a.dob,
                a.student_email,
                a.country_id,
                a.previous_school,
                a.state_id,
                a.city_id,
                a.area_id,
                a.landmark,
                a.address,
                a.present_country_id,
                a.present_state_id,
                a.present_city_id,
                a.present_area_id,
                a.present_landmark,
                a.present_address,
                a.pincode,
                a.religion_id,
                a.cast_id,
                a.nationality,
                a.mother_tongue,
                a.referrence_name,
                a.application_status,
                a.created_date,
                a.created_by,
                a.modified_date,
                a.modified_by,
                (SELECT 
                        concat(b.parent_firstname ," " ,b.parent_lastname)
                FROM 
                        tbl_temp_student_parents b
                WHERE 

                        b.application_id = a.application_id LIMIT 0,1) father_name,
                (SELECT 
                        b.parent_mobile_number
                FROM 
                        tbl_temp_student_parents b
                WHERE 
                        b.application_id = a.application_id LIMIT 0,1) father_number,
                         (SELECT 
                        b.parent_email_id
                FROM 
                        tbl_temp_student_parents b
                WHERE 
                        b.application_id = a.application_id LIMIT 0,1) father_email

        FROM
                tbl_temp_applications a 
        WHERE 
                 a.reference_no not in (select transaction_number from tbl_fee_transactions) 
        AND 
                 a.branch_id = p_branch_id        
        AND
                a.year_id = p_year_id
        AND 
                a.application_status='application' 
        AND a.status != '9'
        ORDER BY 
                    a.created_date desc;



END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_planType` (IN `p_fee_plan_id` INT)  NO SQL
BEGIN



			SELECT
					type_plan_id,
					fee_plan_id,
					fee_type_id,
					(SELECT  
                     			fee_type_name
                     FROM
                     			tbl_fee_type t
                     WHERE
                     			t.fee_type_id = tp.fee_type_id)
					AS fee_type_name,
					mandatory
					

			FROM
					tbl_fee_type_plan tp
			WHERE
					tp.fee_plan_id = p_fee_plan_id;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_QuestionMarks` (IN `p_student_id` INT(11), IN `p_exam_course_id` INT, IN `p_set_id` INT)  BEGIN
		
select 
			sq.question_marks_id,
            q.question_id,
            q.exam_course_id,
            q.qn_number,
            q.exam_id,
            q.question_description,
			q.marks,
            q.parent_id,
            ifnull(sq.question_student_answer,'') as question_student_answer,
            sq.student_id,ifnull(sq.question_marks,'') as question_marks 
FROM 
			tbl_questions q 
LEFT JOIN 
		(select question_marks_id,question_id,question_student_answer,student_id,question_marks from 	tbl_student_question_marks where student_id = p_student_id) sq 
ON 
			q.question_id = sq.question_id
			
WHERE 

			q.exam_course_id =  p_exam_course_id
AND 
			q.STATUS='0' 
AND 
			q.set_id= p_set_id
ORDER by 
			q.question_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_receipt` (IN `p_manual_receipt_number` VARCHAR(50))  BEGIN
DECLARE  v_student_id  int;
DECLARE  v_application_id int;
DECLARE  v_cource_plan_id int;
DECLARE  v_paymode  int;
DECLARE v_parent_name VARCHAR(250);
DECLARE v_parent_mobile VARCHAR(50);
DECLARE v_cource_id int;
SET v_student_id  = 0 ;
SET v_application_id = 0;

    select * 
    INTO v_student_id, v_application_id, v_cource_plan_id
        from (SELECT IFNULL(studnet_id,0),application_id, cource_plan_id
        
            FROM tbl_fee_transactions 
        WHERE system_receipt_number  = p_manual_receipt_number 
        UNION 
        select IFNULL(studnet_id,0),0 as application_id,0 as  cource_plan_id
                    from tbl_admission_fee_transactions
        WHERE system_receipt_number  = p_manual_receipt_number 
        LIMIT 0,1) a;
    
IF (v_student_id = 0) THEN
    SELECT concat(b.parent_firstname ," " ,b.parent_lastname), b.parent_mobile_number    
        INTO v_parent_name, v_parent_mobile
        FROM    tbl_student_parents b
        WHERE b.application_id = v_application_id LIMIT 0,1;
    
        SELECT concat(a.student_firstname ," " ,a.student_middlename ," " ,a.student_lastname) AS student_fullname, get_courseName(a.course_id) AS course_id, v_parent_name AS father_name, v_parent_mobile AS father_mobile
        FROM tbl_applications a
        WHERE a.application_id =  v_application_id ;

ELSE 
    SELECT concat(b.parent_firstname ," " ,b.parent_lastname), b.parent_mobile_number 
    INTO v_parent_name, v_parent_mobile
    FROM tbl_student_parents b
    WHERE b.student_id = v_student_id LIMIT 0,1;
	SELECT course_id into  v_cource_id  from tbl_student_academic sa WHERE sa.student_id = v_student_id and promoted = 0;    
    SELECT a.student_id, concat(a.student_name ," " ,a.student_middlename ," " ,a.student_lastname) AS student_fullname, coalesce(get_courseName_cp_id(v_cource_plan_id),get_courseName(v_cource_id),NULL) as course_id, v_parent_name AS father_name, v_parent_mobile AS father_mobile, a.admission_number
    FROM tbl_student a
    WHERE a.student_id =  v_student_id ;

END IF;

     SET @Y ='0';
    SELECT transaction_number, manual_receipt_number, type_plan_id,system_receipt_number
         , get_feeTypePrintName( type_plan_id) AS fee_name, DATE_FORMAT(min(transaction_date),'%D %b %Y %H:%i') AS transaction_date, reason,
     GROUP_CONCAT( IF(@Y = '0', @Y := CONCAT( termposition(ft.terms_id,ft.type_plan_id ), ft.terms_id,':',ft.amount) , CONCAT(ft.terms_id,':',ft.amount))  SEPARATOR  ';' ) terms,
     sum(amount) as amount,get_generalItemName(min(pay_mode)) AS pay_mode, (SELECT user_name FROM tbl_users WHERE user_id = min(ft.created_by) LIMIT 0,1) AS user_name,min(check_transaction_num)check_transaction_num , @Y := '0'
    FROM tbl_fee_transactions ft
    WHERE system_receipt_number  = p_manual_receipt_number AND status= '0'
    GROUP BY transaction_number, manual_receipt_number, type_plan_id, system_receipt_number
    union
    SELECT 
        transaction_number, manual_receipt_number,0 as type_plan_id, system_receipt_number
         , 'Facilities and Infrastructure Fee' AS fee_name, DATE_FORMAT(min(transaction_date),'%D %b %Y %H:%i') AS transaction_date, reason,
      @Y := CONCAT('0',':',sum(af.amount))terms,
     sum(amount) as amount,get_generalItemName(min(pay_mode)) AS pay_mode, (SELECT user_name FROM tbl_users WHERE user_id = min(af.created_by) LIMIT 0,1) AS user_name,min(check_transaction_num)check_transaction_num , @Y := '0'
    FROM tbl_admission_fee_transactions af
    WHERE system_receipt_number  = p_manual_receipt_number AND status= '0'
    GROUP BY transaction_number, manual_receipt_number,  system_receipt_number
    ;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_receipt_1` (IN `p_manual_receipt_number` VARCHAR(50))  BEGIN

DECLARE  v_student_id  int;
DECLARE  v_application_id int;
DECLARE  v_cource_plan_id int;
DECLARE  v_paymode  int;

					SET v_student_id  = 0 ;
					SET v_application_id = 0;

	

						SELECT 
											IFNULL(studnet_id,0),
											application_id,
											cource_plan_id
						INTO
											v_student_id,
											v_application_id,
											v_cource_plan_id
					   FROM

											tbl_fee_transactions 
					  WHERE 
											system_receipt_number  = p_manual_receipt_number 
						LIMIT 0,1;
				
					
						IF (v_student_id = 0) THEN

	SELECT 
															concat(a.student_firstname ," " ,a.student_middlename ," " ,a.student_lastname) AS 				student_fullname,
                get_courseName(a.course_id) AS course_id,
										(SELECT 
						concat(b.parent_firstname ," " ,b.parent_lastname)
				FROM 
						tbl_student_parents b
				WHERE 
				 		b.application_id = a.application_id LIMIT 0,1) father_name
									FROM
														tbl_applications a
									WHERE
															a.application_id =  v_application_id ;

ELSE 

SELECT 
				a.student_id, concat(a.student_name ," " ,a.student_middlename ," " ,a.student_lastname) AS student_fullname,
				get_courseName_cp_id(v_cource_plan_id) as course_id, 

										(SELECT 
						concat(b.parent_firstname ," " ,b.parent_lastname)
				FROM 
						tbl_student_parents b
				WHERE 
				 		b.student_id = a.student_id LIMIT 0,1) father_name,
						a.admission_number
									FROM
														tbl_student a
									WHERE
															a.student_id =  v_student_id ;

					END IF;

						SELECT
											transaction_number,
											manual_receipt_number,
											DATE_FORMAT(transaction_date,'%D %b %Y') AS transaction_date,
											system_receipt_number,
											terms_id,
											amount,
											type_plan_id,
											get_feeTypeName( type_plan_id) AS fee_name 
						FROM
										tbl_fee_transactions ft
						WHERE
										system_receipt_number  = p_manual_receipt_number ;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_specialScheme` (IN `p_special_scheme_id` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11))  NO SQL
BEGIN

		SELECT 
				special_scheme_id,
                special_scheme_name,				
				status
		FROM
				tbl_special_schemes

		WHERE
				special_scheme_id = p_special_scheme_id;


		SELECT 
				fee_plan_id,
				fee_plan_name,				
				(SELECT
                 		sp.scheme_plan_id
                 FROM
                 		tbl_scheme_plans sp
                 WHERE
                 		sp.special_scheme_id = p_special_scheme_id 
                 AND
                 		sp.fee_plan_id = fp.fee_plan_id
                 AND sp.status= '0'
                 
                 LIMIT 0,1) As scheme_plan_id
				
		FROM
				tbl_fee_plan fp
		WHERE 
				fp.branch_id = p_branch_id AND fp.year_id= p_year_id 
        AND fp.status='0';
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_StudentAttendance` (IN `p_startdate` DATE, IN `p_enddate` DATE, IN `p_course_id` INT, IN `p_section_id` INT, IN `p_branch_id` INT, IN `p_year_id` INT)  BEGIN

DECLARE currdate Date;
DECLARE currdate1 Date;
DECLARE enddate date;
DECLARE v_cond varchar(250);
SET group_concat_max_len = 2048;

SET @sql = NULL;


SET v_cond = '';

IF p_section_id != 0 THEN 

  SET v_cond = CONCAT(' and section_id =',p_section_id );

END IF;


SET currdate = p_startdate;

SET currdate1 = currdate;
SET enddate =  LAST_DAY(currdate);
 
 IF enddate > p_enddate THEN
 
 SET enddate = p_enddate;
 
 END IF;
  


DROP TEMPORARY TABLE IF exists tbl_temp_calender;


CREATE TEMPORARY TABLE IF NOT EXISTS tbl_temp_calender(`atd` datetime);
INSERT INTO tbl_temp_calender (atd) VALUES(currdate);


WHILE currdate < enddate DO
  
 Set currdate = DATE_ADD(currdate,INTERVAL 1 DAY);
INSERT INTO tbl_temp_calender (atd) VALUES(currdate);
END WHILE;

DROP  TABLE IF exists tbl_temp_str;
CREATE   table tbl_temp_str (str_max Text);

INSERT INTO  tbl_temp_str  
SELECT 
GROUP_CONCAT(DISTINCT
    CONCAT(
      'MAX(IF(d=', date_format(c.atd,'%d'),',f, checkStudentHoliday(''',date_format(c.atd,'%Y-%m-%d'),''')))''', date_format(c.atd,'%e'),'''' )
        ) str_C
FROM tbl_temp_calender c;

 SET @sql = CONCAT('select ca.student_name,', (SELECT str_max FROM tbl_temp_str) ,' from (SELECT get_studentName(student_id) as student_name,student_id, admission_number from tbl_student_academic WHERE  course_id = ',p_course_id ,v_cond,' and year_id =',p_year_id ,' and branch_id =',p_branch_id,' and status=''0'' ) ca left join (SELECT student_id,attendance_date, date_format(attendance_date,''%d'') as d, attendance_flag f from tbl_student_attendance where year_id =',p_year_id ,' and branch_id =',p_branch_id,')p on ca.student_id = p.student_id and  p.attendance_date>='' ',currdate1,''' and  p.attendance_date  <= ''',enddate,''' group by ca.student_name,ca.student_id order by ca.student_id');
 
  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_studentCond` (IN `p_student_id` INT(11), IN `p_branch_id` INT, IN `p_year_id` INT)  NO SQL
BEGIN

DECLARE v_course_name VARCHAR(50);
DECLARE v_studentphoto VARCHAR(250);
DECLARE v_admission_type VARCHAR(100);
DECLARE v_section_name VARCHAR(50);
DECLARE v_section_id INT;
DECLARE v_course_id INT;
DECLARE v_father_name VARCHAR(250);
DECLARE v_father_mobile VARCHAR(50);
DECLARE v_father_email VARCHAR(100);

SET v_course_name = '';
SET v_studentphoto = '';
SET v_admission_type = '';
SET v_section_name = '';
SET v_section_id = 0;
SET v_course_id = 0;


SELECT 
            get_courseName(sa.course_id),
            studnet_photo,
            get_generalItemName(category_id),
            section_id,
            sa.course_id
INTO
            v_course_name,
            v_studentphoto,
            v_admission_type,
            v_section_id,
            v_course_id
FROM
            tbl_student_academic sa
WHERE 
            sa.student_id = p_student_id
AND
            sa.branch_id = p_branch_id
AND
            sa.year_id = p_year_id
AND 
            sa.status='0'
ORDER BY sa.student_academic_id DESC
LIMIT 
            0,1 ;

SELECT
            section_name
INTO
            v_section_name
FROM
            tbl_section
WHERE
            section_id = v_section_id
LIMIT 
            0, 1;
            
SELECT concat(b.parent_firstname ," " ,b.parent_lastname),
      b.parent_mobile_number, b.parent_email_id
      INTO v_father_name, v_father_mobile, v_father_email
                 FROM 
                 tbl_student_parents b
                 WHERE 
                 b.student_id = p_student_id  and  b.status = '0'  LIMIT 0,1;

SELECT 
                student_id,
                admission_number,
                student_number,
                concat(a.student_name ," " ,a.student_middlename ," " ,a.student_lastname) AS student_fullname,
                family_doctor,
                doctor_mobile,
                gender,
                DATE_FORMAT(student_dob,'%d %b %Y')
                AS            student_dob    ,
                place_birth,
                student_email,
                address,
                landmark,
                area_id,
                city_id,
                state_id,
                country_id,
                pincode,
                present_landmark,
                present_address,
                present_area_id,
                present_city_id,
                present_state_id,
                present_country_id,
                present_pincode,
                blood_group,
                moleidentity1,
                moleidentity2,
                religion_id,
                cast_id,
                nationality_id,
                mother_tongue,
                referred_by,
                referred_name,
                previous_school,
                application_id,
                enquery_id as lead_id,
                branch_id,
                year_id,
                status,
                created_by,
                created_date,
                modified_by,
                modified_date,
                v_course_name AS course_id,
                v_father_name AS father_name,
                v_father_mobile AS father_number,
                v_father_email AS father_email,
                v_studentphoto
                AS            student_photo,
                v_admission_type
                AS            admission_type,
                v_section_name 
                AS             section_name,
                v_course_id AS courseid,
                v_section_id AS section_id
FROM
                tbl_student a 
WHERE   
            a.student_id = p_student_id ;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_studentFeeDetails` (IN `p_student_id` INT, IN `p_branch_id` INT)  NO SQL
BEGIN

DECLARE v_application_id int;


SELECT 
			application_id
INTO
			v_application_id

FROM
		tbl_student 
WHERE
		student_id = p_student_id;
	



SELECT 
		type_plan_id,
		get_feeTypeName(type_plan_id) as fee_type_namme,
		get_feeTypeamount( (SELECT 
                          			fee_type_id
                          FROM
                          		tbl_fee_type_plan as p
                          WHERE
                          		p.type_plan_id =  t.type_plan_id limit 0,1)) 
AS
		t_amount,		
		get_generalItemName(pay_mode)
AS		pay_mode_name,
		pay_mode,
		system_receipt_number,
		transaction_number,
		DATE_FORMAT(created_date,'%d %b %Y')
AS
		Payment_date
		

FROM 
		tbl_fee_transactions as t
WHERE 
		student_id = p_student_id 
AND
		branch_id  = p_branch_id;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_studentfees` (IN `p_student_id` INT, IN `p_brach_id` INT, IN `p_year_id` INT)  NO SQL
BEGIN

DECLARE v_cource_id INT;


        SELECT  
                course_id 
        INTO 
                v_cource_id
        FROM 
                tbl_student_academic 
        WHERE  
                student_id = p_student_id 
        AND
                branch_id = p_brach_id
        AND
                year_id = p_year_id
        ORDER BY
           student_academic_id desc 
        LIMIT 0,1;


  
        SELECT
                (SELECT
                        p.fee_plan_name
                 FROM
                         tbl_fee_plan p
                 WHERE
                         p.fee_plan_id =t.fee_plan_id
                 LIMIT
                         0,1) 
           AS
                planname,
                 (SELECT
                        ft.fee_type_code
                 FROM
                         tbl_fee_type ft
                 WHERE
                         ft.fee_type_id =t.fee_type_id
                 LIMIT
                         0,1) 
           AS
                fee_type_code,
                t.fee_plan_id,
                 (SELECT
                        ft.print_name
                 FROM
                         tbl_fee_type ft
                 WHERE
                         ft.fee_type_id =t.fee_type_id
                 LIMIT
                         0,1) 
           AS
                print_name,
                fee_type_id,
                t.type_plan_id,
                get_feeTypeamount(fee_type_id) 
        AS      
                Actual_amount,
                get_feeTypeName(t.type_plan_id)
        AS
                feetypename,
                mandatory,
                IFNULL(get_S_F_concession (t.type_plan_id,get_feeTypeamount(fee_type_id),p_student_id,p_brach_id,p_year_id),0)
                
        AS      concession,
                get_S_F_discount (t.type_plan_id,p_student_id,p_brach_id,p_year_id)
        AS 
                discount,
				(SELECT SUM(ar.discount_amount) FROM `tbl_approval_requests` ar WHERE ar.student_id=p_student_id AND ar.type_plan_id=t.type_plan_id AND ar.approval_status='Pending' AND ar.status='0') AS pending_discount,
                IFNULL((SELECT 
                                SUM(IFNULL(amount,0))
                
                        FROM 
                                tbl_fee_transactions pt
                    
                        WHERE    
                                pt.type_plan_id = t.type_plan_id
                        AND
                                pt.studnet_id = p_student_id
                       	 AND 
                        		pt.status='0'),0) 
      AS        paid_amount,
                get_termsserialize(fee_type_id,    p_student_id,t.type_plan_id) as terms,
                (SELECT 
                            cource_plan_id
                 FROM
                            tbl_fee_cource_plan c
                 WHERE 
                            c.fee_plan_id =  t.fee_plan_id
                   AND
                            cource_id = v_cource_id
                LIMIT 0,1) 
     AS
                cource_plan_id,
				s.student_type_plan_id,
				s.year_id
                
      FROM
                
                tbl_fee_type_plan t
     INNER JOIN
                tbl_student_plan_type s
     ON
                t.type_plan_id = s.type_plan_id
     AND 
                s.student_id = p_student_id 
     AND 
                s.mode_flag = 'credit' 
        
     WHERE
                s.branch_id = p_brach_id 
     AND
                s.year_id = p_year_id
     AND            
                s.status ='0';
                    

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_studentfeesmobile` (IN `p_student_id` INT, IN `p_brach_id` INT, IN `p_year_id` INT)  NO SQL
BEGIN

DECLARE v_cource_id INT;


        SELECT  
                course_id 
        INTO 
                v_cource_id
        FROM 
                tbl_student_academic 
        WHERE  
                student_id = p_student_id 
        AND
                branch_id = p_brach_id
        AND
                year_id = p_year_id
        ORDER BY
           student_academic_id desc 
        LIMIT 0,1;


  
        SELECT
                (SELECT
                        p.fee_plan_name
                 FROM
                         tbl_fee_plan p
                 WHERE
                         p.fee_plan_id =t.fee_plan_id
                 LIMIT
                         0,1) 
           AS
                planname,
                t.fee_plan_id,
                fee_type_id,
                t.type_plan_id,
                get_feeTypeamount(fee_type_id) 
        AS      
                Actual_amount,
                get_feeTypePrintName(t.type_plan_id)
        AS
                feetypename,
                mandatory,
                IFNULL(get_S_F_concession (t.type_plan_id,get_feeTypeamount(fee_type_id),p_student_id,p_brach_id,p_year_id),0)
                
        AS      concession,
                get_S_F_discount (t.type_plan_id,p_student_id,p_brach_id,p_year_id)
        AS 
                discount,
				(SELECT SUM(ar.discount_amount) FROM `tbl_approval_requests` ar WHERE ar.student_id=p_student_id AND ar.type_plan_id=t.type_plan_id AND ar.approval_status='Pending' AND ar.status='0') AS pending_discount,
                IFNULL((SELECT 
                                SUM(IFNULL(amount,0))
                
                        FROM 
                                tbl_fee_transactions pt
                    
                        WHERE    
                                pt.type_plan_id = t.type_plan_id
                        AND
                                pt.studnet_id = p_student_id
                       	 AND 
                        		pt.status='0'),0) 
      AS        paid_amount,
                get_termsserialize(fee_type_id,    p_student_id,t.type_plan_id) as terms,
                (SELECT 
                            cource_plan_id
                 FROM
                            tbl_fee_cource_plan c
                 WHERE 
                            c.fee_plan_id =  t.fee_plan_id
                   AND
                            cource_id = v_cource_id
                LIMIT 0,1) 
     AS
                cource_plan_id,
				s.student_type_plan_id,
				s.year_id
                
      FROM
                
                tbl_fee_type_plan t
     INNER JOIN
                tbl_student_plan_type s
     ON
                t.type_plan_id = s.type_plan_id
     AND 
                s.student_id = p_student_id 
     AND 
                s.mode_flag = 'credit' 
        
     WHERE
                s.branch_id = p_brach_id 
     AND
                s.year_id = p_year_id
                
     AND 
                t.fee_type_id NOT IN(SELECT fee_type_id FROM `tbl_fee_type`   WHERE `status` = '0' AND `branch_id` =p_brach_id AND `year_id` =p_year_id and `fee_type_code` ="ADF")
     AND            
                s.status ='0';
                    

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_studentFeeTerms` (IN `p_type_id` INT, IN `p_student_id` INT, IN `p_type_plan_id` INT, IN `p_terms_id` INT)  BEGIN

SELECT 
				   type_id,
                   sum(amount)
AS					amount,
                   sum(paid_amount)
AS					paid_amount

FROM
(SELECT 
					type_id,
                    terms_id,
                    IFNULL(amount,0) as amount,
                    (SELECT ifnull(sum(amount),0) FROM tbl_fee_transactions ft where ft.studnet_id = p_student_id and ft.type_plan_id =p_type_plan_id and ft.terms_id = tr.terms_id)
                    paid_amount
FROM
					tbl_fee_terms tr
WHERE 
					terms_id <= p_terms_id
AND
					type_id = p_type_id) a 
GROUP BY
			type_id;
                    
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_studentParents` (IN `p_id` INT, IN `p_flag` INT)  NO SQL
BEGIN

DECLARE v_app_count INT DEFAULT 0;

IF p_flag =  1 THEN

	SELECT
				parent_id ,
                application_id,
                student_id,
                parent_firstname,
				parent_middlename,
                parent_lastname,
                DATE_FORMAT(parent_dob,'%d %M %Y') AS parent_dob,
                parent_nationality,
                parent_qualification,
                parent_designation,
                parent_company,
                parent_address,
                parent_occupation,
                parent_office_number,
                parent_mobile_number,
                parent_email_id,
                relation_type,
                user_id,
                primary_contact,
                country_id,
                city_id,
                area_id,
                address,
                landmark,
                state_id,
                pincode,
                id_proof_type,
                id_proof_number,
				parent_photo,
                aadhar_number
		FROM
				tbl_student_parents
		WHERE
				application_id = p_id and status='0';

ELSE 

SELECT
				parent_id ,
                application_id,
                student_id,
                parent_firstname,
				parent_middlename,
                parent_lastname,
                DATE_FORMAT(parent_dob,'%d %M %Y') AS parent_dob,
                parent_nationality,
                parent_qualification,
                parent_designation,
                parent_company,
                parent_address,
                parent_occupation,
                parent_office_number,
                parent_mobile_number,
                parent_email_id,
                relation_type,
                user_id,
                primary_contact,
                country_id,
                city_id,
                area_id,
                address,
                landmark,
                state_id,
                pincode,
                id_proof_type,
                id_proof_number,
				parent_photo,
                aadhar_number
		FROM
				tbl_student_parents
		WHERE
				student_id = p_id and status = '0';

END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_studentprimarycontactdetails` (IN `p_student_id` INT)  BEGIN
SELECT relation_type,parent_email_id,parent_mobile_numer  from  tbl_student_parents where student_id = p_student_id and primary_contact ='1';


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_studentProfile` (IN `p_student_id` INT, IN `p_year_id` INT, IN `p_branch_id` INT)  NO SQL
BEGIN

DECLARE v_course_id INT;
        DECLARE v_section_id INT;
        DECLARE second_language_id INT;
        DECLARE third_language_id INT;
        DECLARE category_id INT;
        DECLARE studnet_photo VARCHAR(250);
        DECLARE v_parent_email_id varchar(250);
        DECLARE v_father_name varchar(250);
        DECLARE v_father_number varchar(150);
        DECLARE v_father_occupation varchar(250);
        DECLARE v_father_address varchar(250);

        
                 SELECT 
                        concat(b.parent_firstname ," " ,b.parent_lastname),
                          parent_mobile_number,
                          parent_email_id,
                        IFNULL(parent_occupation, ''),
                        IFNULL(parent_address, '')
                INTO
                        
                        v_father_name,
                        v_father_number,

                        v_parent_email_id,
                        v_father_occupation,
                        v_father_address
                        
                        
                FROM 
                        tbl_student_parents b
                WHERE 

                         b.student_id = p_student_id LIMIT 0,1;
        



            SELECT
             s.student_id AS student_id, 
             s.admission_number AS admission_number,
             s.school_admission_number AS school_admission_number,
             s.student_name AS student_name,
             s.student_middlename AS student_middlename,
             s.student_lastname AS student_lastname,
             s.family_doctor AS family_doctor,
             s.doctor_mobile AS doctor_mobile,
             s.gender AS gender,
             DATE_FORMAT(s.student_dob,'%d %M %Y') AS student_dob,
             s.place_birth AS place_birth,
             s.student_email AS student_email,
             s.address AS address,
             s.landmark AS landmark,
             s.area_id AS area_id,
             s.city_id AS city_id,
             s.state_id AS state_id,
             s.country_id AS country_id,
             s.pincode AS pincode,
             (SELECT country_name FROM tbl_country where country_id = s.country_id)country,
             (SELECT state_name FROM tbl_state WHERE state_id = s.state_id)as state,
             (SELECT city_name FROM tbl_city WHERE city_id =s.city_id)as city,
             (SELECT area_name FROM tbl_area WHERE area_id =s.area_id) as area,
             s.present_landmark AS present_landmark,
             s.present_address AS present_address,
             s.present_area_id AS present_area_id,
             s.present_city_id AS present_city_id,
             s.present_state_id AS present_state_id,
             s.present_country_id AS present_country_id,
             s.present_pincode AS present_pincode,
             s.blood_group AS blood_group,
             s.moleidentity1 AS moleidentity1,
             s.moleidentity2 AS moleidentity2,
             s.religion_id AS religion_id,
             s.cast_id AS cast_id,
             s.nationality_id AS nationality_id,
             s.mother_tongue AS mother_tongue,
             s.referred_name AS referred_name,
             s.application_id AS application_id,
             s.enquery_id AS enquery_id,
             a.course_id AS course_id,
             a.student_academic_id AS student_academic_id,
             a.roll_number AS roll_number,
             a.section_id AS section_id,
             a.third_language_id AS third_language_id,
             a.second_language_id AS second_language_id,
             a.category_id AS category_id,
             a.quota_id AS quota_id,
             a.daycare_id AS daycare_id,
             a.studnet_photo AS studnet_photo,
             DATE_FORMAT(s.created_date, '%d %M %Y') AS created_date,
             get_courseName(a.course_id) AS course_name,
             getSectionName(a.section_id) AS section_name,
             get_generalItemName(a.category_id) as category_name,
             v_father_name,
             v_father_number,
             v_parent_email_id,
             v_father_occupation,
             v_father_address,
             s.aadhar_number AS aadhar_number,
             b.pickup_time,
            b.drop_time,
           
            get_branchName(a.branch_id) as branch_name,
            'Tatva Global School' as school_name
FROM
            tbl_student s 
INNER JOIN 
            (SELECT student_academic_id,
                    branch_id,
                    year_id,
                    admission_number,
                    student_id,
                    roll_number,
                    course_id ,
                    section_id,
                    second_language_id,
                    third_language_id,
                    category_id,
                    quota_id ,
                    daycare_id ,
                    studnet_photo
            FROM
                    tbl_student_academic 
            WHERE 
                    student_id = p_student_id
            AND
                    branch_id = p_branch_id
            AND
                    year_id = p_year_id
            AND
                    status = '0' ORDER BY student_academic_id DESC LIMIT 0,1) a 
ON  
            s.student_id = a.student_id
LEFT JOIN (select pickup_time,drop_time from tbl_stops where stop_id in ( select stop_id from tbl_student_stops where student_id = p_student_id  AND year_id = p_year_id)) b ON 1=1
WHERE
            s.student_id = p_student_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_studentProfile1` (IN `p_student_id` INT, IN `p_year_id` INT, IN `p_branch_id` INT)  NO SQL
BEGIN

DECLARE v_course_id INT;
        DECLARE v_section_id INT;
        DECLARE second_language_id INT;
        DECLARE third_language_id INT;
        DECLARE category_id INT;
        DECLARE studnet_photo VARCHAR(250);
        DECLARE v_parent_email_id varchar(250);
        DECLARE v_father_name varchar(250);
        DECLARE v_father_number varchar(150);
        DECLARE v_father_occupation varchar(250);
        DECLARE v_father_address varchar(250);
		DECLARE v_parent_id INT;
        
                 SELECT 
                        concat(b.parent_firstname ," " ,b.parent_lastname),
                          parent_mobile_number,
                          parent_email_id,
                        IFNULL(parent_occupation, ''),
                        IFNULL(parent_address, ''),
                        b.parent_id
                INTO
                        
                        v_father_name,
                        v_father_number,

                        v_parent_email_id,
                        v_father_occupation,
                        v_father_address,
                        v_parent_id
                        
                FROM 
                        tbl_student_parents b
                WHERE 

                         b.student_id = p_student_id LIMIT 0,1;
        



            SELECT
             s.student_id AS student_id, 
             s.admission_number AS admission_number,
             s.school_admission_number AS school_admission_number,
             s.student_name AS student_name,
             s.student_middlename AS student_middlename,
             s.student_lastname AS student_lastname,
             s.family_doctor AS family_doctor,
             s.doctor_mobile AS doctor_mobile,
             s.gender AS gender,
             DATE_FORMAT(s.student_dob,'%d %M %Y') AS student_dob,
             s.place_birth AS place_birth,
             s.student_email AS student_email,
             s.address AS address,
             s.landmark AS landmark,
             s.area_id AS area_id,
             s.city_id AS city_id,
             s.state_id AS state_id,
             s.country_id AS country_id,
             s.pincode AS pincode,
             s.present_landmark AS present_landmark,
             s.present_address AS present_address,
             s.present_area_id AS present_area_id,
             s.present_city_id AS present_city_id,
             s.present_state_id AS present_state_id,
             s.present_country_id AS present_country_id,
             s.present_pincode AS present_pincode,
             s.blood_group AS blood_group,
             s.moleidentity1 AS moleidentity1,
             s.moleidentity2 AS moleidentity2,
             s.religion_id AS religion_id,
             s.cast_id AS cast_id,
             s.subcast_id AS subcast_id,
             s.nationality_id AS nationality_id,
             s.mother_tongue AS mother_tongue,
             s.referred_name AS referred_name,
             s.application_id AS application_id,
             s.enquery_id AS enquery_id,
             a.course_id AS course_id,
             a.student_academic_id AS student_academic_id,
             a.roll_number AS roll_number,
             a.section_id AS section_id,
             a.third_language_id AS third_language_id,
             a.second_language_id AS second_language_id,
             a.category_id AS category_id,
             a.quota_id AS quota_id,
             a.daycare_id AS daycare_id,
             a.studnet_photo AS studnet_photo,
             DATE_FORMAT(s.created_date, '%d %M %Y') AS created_date,
             get_courseName(a.course_id) AS course_name,
             getSectionName(a.section_id) AS section_name,
             get_generalItemName(a.category_id) as category_name,
             v_father_name,
             v_father_number,
             v_parent_email_id,
             v_father_occupation,
             v_father_address,
             s.aadhar_number AS aadhar_number,
             b.pickup_time,
            b.drop_time,
            v_parent_id,
            get_branchName(a.branch_id) as branch_name,
            'Tatva Global School' as school_name,
            s.previous_school as previous_school
FROM
            tbl_student s 
INNER JOIN 
            (SELECT student_academic_id,
                    branch_id,
                    year_id,
                    admission_number,
                    student_id,
                    roll_number,
                    course_id ,
                    section_id,
                    second_language_id,
                    third_language_id,
                    category_id,
                    quota_id ,
                    daycare_id ,
                    studnet_photo
            FROM
                    tbl_student_academic 
            WHERE 
                    student_id = p_student_id
            AND
                    branch_id = p_branch_id
            AND
                    year_id = p_year_id
            AND
                    status = '0' ORDER BY student_academic_id DESC LIMIT 0,1) a 
ON  
            s.student_id = a.student_id
LEFT JOIN (select pickup_time,drop_time from tbl_stops where stop_id in ( select stop_id from tbl_student_stops where student_id = p_student_id  AND year_id = p_year_id)) b ON 1=1
WHERE
            s.student_id = p_student_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_StudentProfileAttendance` (IN `p_startdate` DATE, IN `p_enddate` DATE, IN `p_student_id` INT, IN `p_branch_id` INT, IN `p_year_id` INT)  BEGIN

DECLARE currdate Date;
DECLARE currdate1 Date;
DECLARE enddate date;
DECLARE v_cond varchar(250);
SET group_concat_max_len = 2048;

SET @sql = NULL;


SET v_cond = '';




SET currdate = p_startdate;

SET currdate1 = currdate;
SET enddate =  LAST_DAY(currdate);
 
 IF enddate > p_enddate THEN
 
 SET enddate = p_enddate;
 
 END IF;
  


DROP TEMPORARY TABLE IF exists tbl_temp_calender;


CREATE TEMPORARY TABLE IF NOT EXISTS tbl_temp_calender(`atd` datetime);
INSERT INTO tbl_temp_calender (atd) VALUES(currdate);


WHILE currdate < enddate DO
  
 Set currdate = DATE_ADD(currdate,INTERVAL 1 DAY);
INSERT INTO tbl_temp_calender (atd) VALUES(currdate);
END WHILE;

DROP  TABLE IF exists tbl_temp_str;
CREATE   table tbl_temp_str (str_max Text);

INSERT INTO  tbl_temp_str  
SELECT 
GROUP_CONCAT(DISTINCT
    CONCAT(
      'MAX(IF(d=', date_format(c.atd,'%d'),',f, checkStudentHoliday(''',date_format(c.atd,'%Y-%m-%d'),''')))''', date_format(c.atd,'%e'),'''' )
        ) str_C
FROM tbl_temp_calender c;

 SET @sql = CONCAT('select ca.student_name,', (SELECT str_max FROM tbl_temp_str) ,' from (SELECT get_studentName(student_id) as student_name,student_id, admission_number from tbl_student_academic WHERE  student_id = ',p_student_id ,' and year_id =',p_year_id ,' and branch_id =',p_branch_id,' and status=''0'' ) ca left join (SELECT student_id,attendance_date, date_format(attendance_date,''%d'') as d, attendance_flag f from tbl_student_attendance where year_id =',p_year_id ,' and branch_id =',p_branch_id,')p on ca.student_id = p.student_id and  p.attendance_date>='' ',currdate1,''' and  p.attendance_date  <= ''',enddate,''' group by ca.student_name,ca.student_id order by ca.student_id');
 
  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_studentReportCard` (IN `p_student_id` INT(11), IN `p_subject_id` INT(11), IN `p_term_id` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_is_language` INT(11), IN `p_section_id` INT(11))  BEGIN

    DECLARE v_course_id INT(11);
    DECLARE v_section_id INT(11);
    DECLARE v_avg_marks FLOAT(10,2);
    DECLARE v_sum_marks FLOAT(10,2);
    DECLARE v_note_marks FLOAT(10,2);
    DECLARE v_subject_marks FLOAT(10,2);
    DECLARE v_avg_hy_marks FLOAT(10,2);
    DECLARE v_avg_ae_marks FLOAT(10,2);
    DECLARE v_sum_hy_marks FLOAT(10,2);
    DECLARE v_sum_ae_marks FLOAT(10,2);
    DECLARE v_sum_nb_marks FLOAT(10,2);
    DECLARE v_sum_se_marks FLOAT(10,2);
    DECLARE v_remarks TEXT;
    DECLARE v_ge_remarks TEXT;
    DECLARE v_academics TEXT;
    DECLARE v_results TEXT;
    DECLARE v_pt_att_flag VARCHAR(10);
    DECLARE v_hy_att_flag VARCHAR(10);
    DECLARE v_ae_att_flag VARCHAR(10);
    DECLARE v_settings_id INT(10);
	DECLARE v_portfolio_marks FLOAT(10,2);
    DECLARE v_sum_pf_marks FLOAT(10,2);
	DECLARE v_round_marks int(10);

    SELECT course_id, section_id INTO v_course_id, v_section_id 
    FROM tbl_student_academic 
    WHERE student_id=p_student_id AND branch_id = p_branch_id AND year_id=p_year_id; 

    select count(setting_id) into v_settings_id  from tbl_settings where field_status='0' AND field_name = 'best_exam' AND  branch_id = p_branch_id AND field_value in (v_course_id);
    if v_settings_id=0 THEN
       SELECT SUM(em.question_marks) , SUM(q.marks) INTO v_avg_marks, v_sum_marks  FROM tbl_questions q  
        LEFT join tbl_student_question_marks em on q.question_id = em.question_id
        and student_id=p_student_id
        WHERE q.status='0' and  q.exam_course_id IN
        (SELECT ec.exam_course_id FROM tbl_exam_course ec 
        LEFT JOIN tbl_subjects s ON s.subject_id = ec.subject_id AND s.is_language=ec.is_language
        WHERE ec.status ='0' and ec.course_id=v_course_id AND ec.section_id= v_section_id AND ec.is_language=p_is_language 
        AND ec.exam_id IN (SELECT exam_id FROM tbl_exam WHERE  term_id=p_term_id AND status = '0' AND exam_type = (SELECT exam_type_id FROM tbl_exam_types where exam_type_code='UT' and status = '0' and branch_id = p_branch_id  LIMIT 0,1)) AND ec.subject_id IN(SELECT subject_id FROM tbl_subjects WHERE subject_code IN (SELECT subject_code FROM tbl_subjects WHERE subject_id in (p_subject_id) )));
    else 
    	SELECT SUM(a.marks),sum(a.max_marks),a.attendance_flag INTO v_avg_marks, v_sum_marks, v_pt_att_flag FROM ( SELECT em.marks,ec.max_marks,em.attendance_flag   FROM tbl_student_exam_marks em	LEFT JOIN tbl_exam_course ec ON ec.exam_course_id = em.exam_course_id WHERE   student_id=p_student_id AND em.status='0' AND ec.status='0' AND ec.exam_course_id IN(SELECT ec.exam_course_id FROM tbl_exam_course ec LEFT JOIN tbl_subjects s ON s.subject_id = ec.subject_id AND s.is_language=ec.is_language WHERE ec.course_id=v_course_id AND ec.section_id= v_section_id AND ec.is_language=p_is_language AND ec.exam_id IN (SELECT exam_id FROM tbl_exam WHERE exam_type = (SELECT exam_type_id FROM tbl_exam_types where exam_type_code='UT' and branch_id = p_branch_id LIMIT 0,1)) AND ec.subject_id IN(SELECT subject_id FROM tbl_subjects WHERE subject_code in (SELECT subject_code FROM tbl_subjects WHERE subject_id in( p_subject_id )))) order by em.marks desc limit 2)a;
    end if;
    
    SELECT marks_calculation into v_round_marks FROM tbl_exam_terms WHERE term_id = p_term_id; 
    
    
	SET v_avg_marks = (v_avg_marks/v_sum_marks) *v_round_marks;
	     SELECT SUM(am.marks), SUM(ac.max_marks) INTO v_note_marks, v_sum_nb_marks FROM tbl_activity_marks am
    LEFT JOIN tbl_activity_course ac ON ac.activity_course_id=am.activity_course_id
    WHERE am.student_id = p_student_id AND ac.section_id = p_section_id  AND ac.status='0'  AND ac.term_id=p_term_id
    AND ac.activity_category_id IN (SELECT activity_category_id FROM tbl_activity_categories WHERE parent_id = 'notebook' AND status='0') AND  ac.subject_id IN (SELECT subject_id FROM tbl_subjects WHERE subject_code in (SELECT subject_code FROM tbl_subjects WHERE subject_id in( p_subject_id) AND status='0'));

    SET v_note_marks = (v_note_marks/v_sum_nb_marks) * 5;   

    SELECT SUM(am.marks), SUM(ac.max_marks) INTO v_subject_marks,v_sum_se_marks FROM tbl_activity_marks am 
    LEFT JOIN tbl_activity_course ac ON ac.activity_course_id=am.activity_course_id
    WHERE am.student_id = p_student_id AND ac.section_id = p_section_id  AND ac.term_id=p_term_id
    AND ac.activity_category_id IN (SELECT activity_category_id FROM tbl_activity_categories WHERE parent_id = 'subject' AND status='0' )
    AND ac.status='0' AND ac.subject_id IN(SELECT subject_id FROM tbl_subjects WHERE subject_code in (SELECT subject_code FROM tbl_subjects WHERE subject_id in ( p_subject_id ) AND status='0'));
            
    SET v_subject_marks = (v_subject_marks/v_sum_se_marks) * 5;    
   
	SELECT SUM(am.marks), SUM(ac.max_marks) INTO v_portfolio_marks,v_sum_pf_marks FROM tbl_activity_marks am 
    LEFT JOIN tbl_activity_course ac ON ac.activity_course_id=am.activity_course_id
    WHERE am.student_id = p_student_id AND ac.section_id = p_section_id  AND ac.term_id=p_term_id
    AND ac.activity_category_id IN (SELECT activity_category_id FROM tbl_activity_categories WHERE parent_id = 'portfolio' AND status='0' )
    AND ac.status='0' AND ac.subject_id IN(SELECT subject_id FROM tbl_subjects WHERE subject_code in (SELECT subject_code FROM tbl_subjects WHERE subject_id in ( p_subject_id ) AND status='0'));
            
    SET v_portfolio_marks = (v_portfolio_marks/v_sum_pf_marks) * 5;  

    SELECT SUM(em.question_marks), SUM(q.marks)
          INTO v_avg_hy_marks,v_sum_hy_marks
          FROM tbl_questions q 
       LEFT join tbl_student_question_marks em on  q.exam_course_id = em.exam_course_id  and q.question_id = em.question_id
    and student_id=p_student_id and q.status='0'
    WHERE  q.status='0' and q.exam_course_id IN 
    ((SELECT ec.exam_course_id FROM tbl_exam_course ec 
    LEFT JOIN tbl_subjects s ON s.subject_id = ec.subject_id AND s.is_language=ec.is_language
     WHERE ec.status ='0' and  ec.course_id=v_course_id AND ec.section_id= v_section_id AND ec.is_language=p_is_language AND ec.exam_id IN (SELECT exam_id FROM tbl_exam WHERE status='0' and exam_type = (
    																					SELECT exam_type_id FROM tbl_exam_types where exam_type_code='HY' 
                                                                                        and branch_id = p_branch_id LIMIT 0,1) 
                                                                                        AND term_id=p_term_id)
    AND ec.subject_id IN(SELECT subject_id FROM tbl_subjects WHERE subject_code IN (SELECT subject_code FROM tbl_subjects WHERE subject_id IN ( p_subject_id) ))));
	
     SET v_avg_hy_marks = (v_avg_hy_marks/v_sum_hy_marks) * 80;
    
    
    SELECT SUM(em.question_marks) , SUM(q.marks)
        INTO v_avg_ae_marks, v_sum_ae_marks
        FROM  tbl_questions q 
        LEFT join tbl_student_question_marks em  on  q.exam_course_id = em.exam_course_id  and q.question_id = em.question_id
    and student_id=p_student_id 
    WHERE q.status='0' AND em.exam_course_id IN 
    ((SELECT ec.exam_course_id FROM tbl_exam_course ec 
    LEFT JOIN tbl_subjects s ON s.subject_id = ec.subject_id AND s.is_language=ec.is_language
     WHERE ec.status ='0' and  ec.course_id=v_course_id AND ec.section_id= v_section_id  AND ec.exam_id IN (SELECT exam_id FROM tbl_exam WHERE status='0' and  exam_type = (
    																					SELECT exam_type_id FROM tbl_exam_types where exam_type_code='AE' 
                                                                                        and branch_id = p_branch_id LIMIT 0,1) 
                                                                                        AND term_id=p_term_id)
    AND ec.subject_id IN(SELECT subject_id FROM tbl_subjects WHERE subject_code in (SELECT subject_code FROM tbl_subjects WHERE subject_id in ( p_subject_id) ))));
    
     SET v_avg_ae_marks = (v_avg_ae_marks/v_sum_ae_marks) * 80;
     
            
    SELECT v_avg_marks AS marks, v_note_marks AS note_marks, v_subject_marks AS subject_marks, v_avg_hy_marks AS half_yearly_marks, v_avg_ae_marks AS annual_marks, v_pt_att_flag AS pt_att_flag, v_hy_att_flag AS hy_att_flag,v_remarks AS remarks,v_ge_remarks AS ge_remarks,v_academics AS academics,v_results AS results ,v_portfolio_marks AS portfolio_marks;
	
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_studentReportCard2020` (IN `p_student_id` INT(11), IN `p_subject_id` INT(11), IN `p_term_id` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_is_language` INT(11), IN `p_section_id` INT(11))  BEGIN

    DECLARE v_course_id INT(11);
    DECLARE v_section_id INT(11);
    DECLARE v_avg_marks FLOAT(10,2);
    DECLARE v_sum_marks FLOAT(10,2);
    DECLARE v_note_marks FLOAT(10,2);
    DECLARE v_ma_marks FLOAT(10,2);
    DECLARE v_rework_marks FLOAT(10,2);
    DECLARE v_subject_marks FLOAT(10,2);
    DECLARE v_avg_hy_marks FLOAT(10,2);
    DECLARE v_avg_ae_marks FLOAT(10,2);
    DECLARE v_sum_hy_marks FLOAT(10,2);
    DECLARE v_sum_ae_marks FLOAT(10,2);
    DECLARE v_sum_nb_marks FLOAT(10,2);
    DECLARE v_sum_ma_marks FLOAT(10,2);
    DECLARE v_sum_rework_marks FLOAT(10,2);
    DECLARE v_sum_se_marks FLOAT(10,2);
    DECLARE v_remarks TEXT;
    DECLARE v_ge_remarks TEXT;
    DECLARE v_academics TEXT;
    DECLARE v_results TEXT;
    DECLARE v_pt_att_flag VARCHAR(10);
    DECLARE v_hy_att_flag VARCHAR(10);
    DECLARE v_ae_att_flag VARCHAR(10);
    DECLARE v_settings_id INT(10);
	
    SELECT course_id, section_id INTO v_course_id, v_section_id 
    FROM tbl_student_academic 
    WHERE student_id=p_student_id AND branch_id = p_branch_id AND year_id=p_year_id; 

    select count(setting_id) into v_settings_id  from tbl_settings where field_status='0' AND field_name = 'best_exam' AND  branch_id = p_branch_id AND field_value in (v_course_id);
    if v_settings_id=0 THEN
       SELECT SUM(em.question_marks) , SUM(q.marks) INTO v_avg_marks, v_sum_marks  FROM tbl_student_question_marks em
        LEFT JOIN tbl_exam_course ec ON ec.exam_course_id = em.exam_course_id
        LEFT join tbl_questions q on  q.exam_course_id = ec.exam_course_id AND q.exam_id = ec.exam_id and q.question_id = em.question_id
        WHERE student_id=p_student_id AND em.status='0' AND ec.status='0' AND ec.exam_course_id IN
        (SELECT ec.exam_course_id FROM tbl_exam_course ec 
        LEFT JOIN tbl_subjects s ON s.subject_id = ec.subject_id AND s.is_language=ec.is_language
        WHERE ec.course_id=v_course_id AND ec.section_id= v_section_id AND ec.is_language=p_is_language 
        AND ec.exam_id IN (SELECT exam_id FROM tbl_exam WHERE  term_id=p_term_id AND exam_type = (SELECT exam_type_id FROM tbl_exam_types where exam_type_code='UT' and branch_id = p_branch_id  LIMIT 0,1)  AND status='0' AND year_id=p_year_id) AND ec.subject_id IN(p_subject_id ));
    else 
    	SELECT SUM(a.marks),sum(a.max_marks),a.attendance_flag INTO v_avg_marks, v_sum_marks, v_pt_att_flag FROM ( SELECT em.marks,ec.max_marks,em.attendance_flag   FROM tbl_student_exam_marks em	LEFT JOIN tbl_exam_course ec ON ec.exam_course_id = em.exam_course_id WHERE   student_id=p_student_id AND em.status='0' AND ec.status='0' AND ec.exam_course_id IN(SELECT ec.exam_course_id FROM tbl_exam_course ec LEFT JOIN tbl_subjects s ON s.subject_id = ec.subject_id AND s.is_language=ec.is_language WHERE ec.course_id=v_course_id AND ec.section_id= v_section_id AND ec.is_language=p_is_language AND ec.exam_id IN (SELECT exam_id FROM tbl_exam WHERE exam_type = (SELECT exam_type_id FROM tbl_exam_types where exam_type_code='UT' and branch_id = p_branch_id LIMIT 0,1)) AND ec.subject_id IN(SELECT subject_id FROM tbl_subjects WHERE subject_code in (SELECT subject_code FROM tbl_subjects WHERE subject_id in( p_subject_id )))) order by em.marks desc limit 2)a;
    end if;
		IF p_term_id =1 THEN
		SET v_avg_marks = (v_avg_marks/v_sum_marks) *10;
        ELSE
        SET v_avg_marks = (v_avg_marks/v_sum_marks) *5;
		END IF;
        
    SELECT SUM(am.marks), SUM(ac.max_marks) INTO v_note_marks, v_sum_nb_marks FROM tbl_activity_marks am
    LEFT JOIN tbl_activity_course ac ON ac.activity_course_id=am.activity_course_id
    WHERE am.student_id = p_student_id AND ac.section_id = p_section_id  AND ac.status='0' AND ac.term_id=p_term_id
    AND ac.activity_category_id ='5'  AND  ac.subject_id IN (p_subject_id);

    SET v_note_marks = (v_note_marks/v_sum_nb_marks) * 10;   

    SELECT SUM(am.marks), SUM(ac.max_marks) INTO v_ma_marks, v_sum_ma_marks FROM tbl_activity_marks am
    LEFT JOIN tbl_activity_course ac ON ac.activity_course_id=am.activity_course_id
    WHERE am.student_id = p_student_id AND ac.section_id = p_section_id  AND ac.status='0' AND ac.term_id=p_term_id
    AND ac.activity_id = '11'
    AND  ac.subject_id IN (p_subject_id);

    SET v_ma_marks = (v_ma_marks/v_sum_ma_marks) * 10;  

	SELECT SUM(am.marks), SUM(ac.max_marks) INTO v_rework_marks, v_sum_rework_marks FROM tbl_activity_marks am
    LEFT JOIN tbl_activity_course ac ON ac.activity_course_id=am.activity_course_id
    WHERE am.student_id = p_student_id AND ac.section_id = p_section_id  AND ac.status='0' AND ac.term_id=p_term_id
    AND ac.activity_id = '12'
    AND  ac.subject_id IN (p_subject_id);

	IF p_term_id =1 THEN
    SET v_rework_marks = (v_rework_marks/v_sum_rework_marks) * 10;  
	ELSE 
    SET v_rework_marks = (v_rework_marks/v_sum_rework_marks) * 5;
    end if;
    
    SELECT SUM(em.question_marks), SUM(q.marks)
     
     INTO v_avg_hy_marks,v_sum_hy_marks
     
     FROM tbl_student_question_marks em
    LEFT JOIN tbl_exam_course ec ON ec.exam_course_id = em.exam_course_id
    LEFT join tbl_questions q on  q.exam_course_id = ec.exam_course_id AND q.exam_id = ec.exam_id and q.question_id = em.question_id
    WHERE student_id=p_student_id AND ec.exam_course_id IN 
    ((SELECT ec.exam_course_id FROM tbl_exam_course ec 
    LEFT JOIN tbl_subjects s ON s.subject_id = ec.subject_id AND s.is_language=ec.is_language
     WHERE ec.course_id=v_course_id AND ec.section_id= v_section_id AND ec.is_language=p_is_language AND ec.exam_id IN (SELECT exam_id FROM tbl_exam WHERE exam_type = (
    																					SELECT exam_type_id FROM tbl_exam_types where exam_type_code='HY' 
                                                                                        and branch_id = p_branch_id LIMIT 0,1) 
                                                                                        AND term_id=p_term_id)
    AND ec.subject_id IN(SELECT subject_id FROM tbl_subjects WHERE subject_code IN (SELECT subject_code FROM tbl_subjects WHERE subject_id IN ( p_subject_id) ))));
	
    
    SET v_avg_hy_marks = (v_avg_hy_marks/v_sum_hy_marks) * 80;

    SELECT SUM(em.question_marks) INTO v_avg_ae_marks    
    FROM tbl_student_question_marks em
    LEFT JOIN tbl_exam_course ec ON ec.exam_course_id = em.exam_course_id
    WHERE student_id=p_student_id AND ec.exam_course_id IN 
    ((SELECT ec.exam_course_id FROM tbl_exam_course ec 
    LEFT JOIN tbl_subjects s ON s.subject_id = ec.subject_id AND s.is_language=ec.is_language
     WHERE ec.course_id=v_course_id AND ec.section_id= v_section_id  AND ec.exam_id IN (SELECT exam_id FROM tbl_exam WHERE exam_type = (
    																					SELECT exam_type_id FROM tbl_exam_types where exam_type_code='AE' 
                                                                                        and branch_id = p_branch_id LIMIT 0,1) 
                                                                                        AND term_id=p_term_id  AND status='0' AND year_id=p_year_id)
    AND ec.subject_id =p_subject_id));
    
    SELECT SUM(q.marks) INTO v_sum_ae_marks
    FROM tbl_questions q
    LEFT JOIN tbl_exam_course ec ON ec.exam_course_id = q.exam_course_id
    WHERE q.status='0' and q.exam_course_id = ec.exam_course_id AND q.exam_id = ec.exam_id
    AND ec.exam_course_id IN 
    ((SELECT ec.exam_course_id FROM tbl_exam_course ec 
    LEFT JOIN tbl_subjects s ON s.subject_id = ec.subject_id AND s.is_language=ec.is_language
     WHERE ec.course_id=v_course_id AND ec.section_id= v_section_id AND ec.exam_id IN (SELECT exam_id FROM tbl_exam WHERE exam_type = (
    																					SELECT exam_type_id FROM tbl_exam_types where exam_type_code='AE' 
                                                                                        and branch_id = p_branch_id LIMIT 0,1) 
                                                                                        AND term_id=p_term_id  AND status='0' AND year_id=p_year_id)
    AND ec.subject_id =p_subject_id));
    
    SET v_avg_ae_marks = (v_avg_ae_marks/v_sum_ae_marks) * 80;
        
    SELECT v_avg_marks AS marks, v_note_marks AS note_marks,  v_subject_marks AS subject_marks, v_avg_hy_marks AS half_yearly_marks, v_avg_ae_marks AS annual_marks, v_pt_att_flag AS pt_att_flag, v_hy_att_flag AS hy_att_flag,v_remarks AS remarks,v_ge_remarks AS ge_remarks,v_academics AS academics,v_results AS results, v_ma_marks AS ma_marks, v_rework_marks AS rework_marks ;
	
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_students` (IN `p_branch_id` INT(11), IN `p_year_id` INT(11))  NO SQL
BEGIN

		SELECT 
student_id,
admission_number,
student_number,
concat(a.student_name ," " ,a.student_lastname) AS student_fullname,
family_doctor,
doctor_mobile,
gender,
student_dob,
place_birth,
student_email,
address,
landmark,
area_id,
city_id,

state_id,
country_id,
pincode,
present_landmark,
present_address,
present_area_id,
present_city_id,
present_state_id,
present_country_id,
present_pincode,
blood_group,
moleidentity1,
moleidentity2,
religion_id,
cast_id,
nationality_id,
mother_tongue,
referred_by,
referred_name,
previous_school,
application_id,
enquery_id as lead_id,
branch_id,
year_id,
status,
created_by,
DATE_FORMAT(created_date,'%d %b,%Y %H:%i') AS created_date,
modified_by,
modified_date,
( SELECT 
					concat(get_courseName(sa.course_id),' &raquo; ',getSectionName(sa.section_id)) 
  FROM
 					tbl_student_academic sa
 WHERE 
 					sa.student_id = a.student_id
 AND
					sa.year_id = p_year_id
 AND 
					sa.status='0'
 LIMIT 0,1)  AS course_id ,
( SELECT 
					sa.course_id 
  FROM
 					tbl_student_academic sa
 WHERE 
 					sa.student_id = a.student_id
 AND
					sa.year_id > p_year_id
 LIMIT 0,1)  AS promoted,
		(SELECT 
						concat(b.parent_firstname ," " ,b.parent_lastname)
				FROM 
						tbl_student_parents b
				WHERE 
				 		b.student_id = a.student_id   and b.status = '0'  LIMIT 0,1) father_name,
				(SELECT 
						b.parent_mobile_number
				FROM 
						tbl_student_parents b
				WHERE 
				 		b.student_id = a.student_id  and  b.status = '0'  LIMIT 0,1) father_number,
( SELECT 
 					  sa.studnet_photo 
  FROM
 						tbl_student_academic sa
 WHERE 
 						sa.student_id = a.student_id
 AND 
 						sa.status='0'
 LIMIT 0,1)  AS studnet_photo
FROM
				tbl_student a 
   WHERE 
branch_id = p_branch_id
AND 
student_id in (SELECT sa.student_id from tbl_student_academic sa WHERE sa.year_id=p_year_id and sa.status='0')
ORDER BY a.created_date DESC;





END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_studenttransactions` (IN `p_student_id` INT, IN `p_branch_id` INT, IN `p_year_id` INT)  NO SQL
BEGIN

SELECT ft.*,DATE_FORMAT(ft.transaction_date, '%d %b,%Y') AS transaction_date,DATE_FORMAT(ft.created_date, '%d %b,%Y %H:%i') AS created_date,
get_generalItemName(ft.pay_mode) AS pay_mode,
get_feeTypeName(ft.type_plan_id) AS fee_type,
(SELECT u.user_name FROM tbl_users u WHERE u.user_id=ft.created_by LIMIT 0,1) AS user_name,SUM(ft.amount) AS amount
FROM tbl_fee_transactions ft
WHERE ft.studnet_id = p_student_id
AND ft.branch_id = p_branch_id AND ft.status in (0,1,9)
AND ft.type_plan_id IN (SELECT type_plan_id 
						FROM tbl_fee_type_plan 
                        WHere fee_plan_id IN (SELECT fee_plan_id 
												FROM tbl_fee_cource_plan 
                                                where year_id=p_year_id))
GROUP BY ft.transaction_number
ORDER BY ft.created_date DESC;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_studenttransactions1` (IN `p_student_id` INT, IN `p_branch_id` INT, IN `p_year_id` INT)  NO SQL
BEGIN

SELECT 
											a.transaction_id,
											a.transaction_number,
											a.siri_number,
											a.manual_receipt_number,
											a.system_receipt_number,
											a.studnet_id,
											a.application_id,
											a.terms_id,
											a.type_plan_id,
											a.transaction_date,
											a.total_amount,
											(a.total_amount - IFNULL(a.till_paid_amount,0)) 
 AS											due_amount,
											a.paid_amount,
											a.status,
											a.pre_transaction_id,
											a.bank_branch,
											a.remarks,
											a.pay_date,
											a.micr_code,
											a.cheque_category,
											a.pay_mode,
											a.fee_type
					
 FROM
 							 ( SELECT 
											transaction_id,
											transaction_number,
											siri_number,
											manual_receipt_number,
											system_receipt_number,
											studnet_id,
											application_id,
											terms_id,
											type_plan_id,
											get_feeTypeamount( (SELECT  fee_type_id FROM tbl_fee_type_plan c WHERE c.type_plan_id = a.type_plan_id) )
							AS				total_amount,
											amount 
							AS				paid_amount,
											( SELECT 
														SUM(IFNULL(amount,0))
											  FROM 
														tbl_fee_transactions b 
											  WHERE 
														b.studnet_id = a.studnet_id 
											  AND		
														b.type_plan_id = a.type_plan_id 
											  AND
														b.transaction_id < a.transaction_id  )
							AS				till_paid_amount,
											status,
											pre_transaction_id,
											bank_branch,
											remarks,
											pay_date,
											micr_code,
											cheque_category,
											DATE_FORMAT(transaction_date, '%D %b %Y') 
							AS 				transaction_date,
											get_generalItemName(pay_mode) 
							AS 				pay_mode,
											get_feeTypeName(type_plan_id) 
							AS 				fee_type
							FROM 
											tbl_fee_transactions a
							WHERE 
											studnet_id = p_student_id
							AND 
											branch_id = p_branch_id ) a 

ORDER BY a.type_plan_id, a.transaction_id;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_student_attendance_details` (IN `p_course_id` INT(11), IN `p_section_id` INT(11), IN `p_period_id` INT(11), IN `p_attendance_date` DATETIME, IN `p_branch_id` INT(11), IN `p_year_id` INT(11))  NO SQL
BEGIN
SELECT  s.student_id,
    s.student_name,
        COALESCE(s.student_middlename,'') as student_middlename,
        COALESCE(s.student_lastname,'') as student_lastname,
        s.admission_number,
        sa.student_academic_id,
        sa.course_id,
        (SELECT c.course_name FROM tbl_course c WHERE  c.course_id =      sa.course_id)as course_name,
        p.parent_mobile_number as phone_number,
        CONCAT(p.parent_firstname,' ',p.parent_middlename,' ',p.parent_lastname) as father_name,
        (SELECT se.section_name from tbl_section se WHERE se.section_id     = sa.section_id) as section_name,
        COALESCE(sta.attendance_flag,'') as attendance_flag,
        COALESCE(sta.remarks,'') as remarks,
        COALESCE(sta.attendance_date,'') as attendance_date
FROM tbl_student s
LEFT JOIN tbl_student_parents p on p.student_id = s.student_id and p.primary_contact='1'
INNER JOIN tbl_student_academic sa 
     on s.student_id=sa.student_id
LEFT JOIN tbl_student_attendance sta 
     on s.student_id = sta.student_id 
     and sa.student_academic_id=sta.student_academic_id
     and sta.period_id = p_period_id
     and sta.attendance_date = p_attendance_date
WHERE s.status='0'
and sa.course_id=p_course_id
and sa.section_id=p_section_id
and sa.branch_id = p_branch_id
and sa.year_id = p_year_id;

SELECT count(stuat.attendance_id) as attendance_count  FROM tbl_student_attendance stuat 
LEFT JOIN tbl_student_academic stuad 
on stuad.student_id = stuat.student_id
WHERE stuat.attendance_date=p_attendance_date 
and stuat.course_id=p_course_id
and stuad.section_id = p_section_id
and stuad.branch_id = p_branch_id
and stuad.year_id = p_year_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_student_graph_category` (IN `p_student_id` INT, IN `p_subject_id` INT, IN `p_cat_id` INT, IN `p_course_id` INT, IN `p_section_id` INT, IN `p_branch_id` INT, IN `p_year_id` INT)  BEGIN

DECLARE v_ttl_marks FLOAT(10,2);
DECLARE v_sum_marks FLOAT(10,2);
DECLARE v_avg_marks FLOAT(10,2);

SELECT SUM(marks) INTO v_ttl_marks FROM tbl_questions where year_id=p_year_id 
AND branch_id=p_branch_id AND exam_course_id IN (SELECT exam_course_id 
		FROM tbl_exam_course where year_id=p_year_id AND course_id=p_course_id 
        AND section_id=p_section_id AND subject_id=p_subject_id AND status='0')
AND exam_id = 46 AND status='0'
AND question_category=p_cat_id;

SELECT SUM(question_marks) INTO v_sum_marks from tbl_student_question_marks 
WHERE exam_course_id IN (SELECT exam_course_id FROM tbl_exam_course
		where year_id=p_year_id AND course_id=p_course_id AND section_id=p_section_id 
        AND subject_id=p_subject_id AND status='0')
AND student_id=p_student_id
AND question_id IN(SELECT question_id FROM tbl_questions where year_id=p_year_id 
		AND question_category=p_cat_id AND status='0'
		AND exam_course_id IN (SELECT exam_course_id FROM tbl_exam_course 
		where year_id=p_year_id AND course_id=p_course_id AND section_id=p_section_id 
        AND subject_id=p_subject_id AND status='0'))
AND exam_id =46;

SET v_avg_marks = (v_sum_marks / v_ttl_marks) * 100;

SELECT ROUND(v_avg_marks) AS avg_marks, v_sum_marks AS sum_marks, v_ttl_marks AS ttl_marks;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_student_graph_exam` (IN `p_student_id` INT, IN `p_subject_id` INT, IN `p_exam_id` INT, IN `p_course_id` INT, IN `p_section_id` INT, IN `p_branch_id` INT, IN `p_year_id` INT)  BEGIN

DECLARE v_ttl_marks FLOAT(10,2);
DECLARE v_sum_marks FLOAT(10,2);
DECLARE v_avg_marks FLOAT(10,2);

SELECT SUM(marks) INTO v_ttl_marks FROM tbl_questions where year_id=p_year_id AND branch_id=p_branch_id 
AND exam_course_id IN (SELECT exam_course_id FROM tbl_exam_course where year_id=p_year_id AND course_id=p_course_id AND section_id=p_section_id AND subject_id=p_subject_id)
AND exam_id =p_exam_id;

SELECT SUM(question_marks) INTO v_sum_marks from tbl_student_question_marks 
WHERE exam_course_id IN (SELECT exam_course_id FROM tbl_exam_course
 where year_id=p_year_id AND course_id=p_course_id AND section_id=p_section_id AND subject_id=p_subject_id)
AND student_id=p_student_id
AND exam_id = p_exam_id;

SET v_avg_marks = (v_sum_marks / v_ttl_marks) * 100;

SELECT ROUND(v_avg_marks) AS avg_marks, v_sum_marks AS sum_marks, v_ttl_marks AS ttl_marks;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_student_mis_transactions` (IN `p_student_id` INT, IN `p_branch_id` INT, IN `p_year_id` INT)  NO SQL
BEGIN

SELECT *,DATE_FORMAT(transaction_date, '%D %b %Y') AS transaction_date,
get_generalItemName(pay_mode) AS pay_mode,
(SELECT i.item_name FROM tbl_inventory_items i WHERE item_id = Item_id LIMIT 0,1) AS item_name
FROM tbl_mis_transactions 
WHERE byer_id = p_student_id
AND branch_id = p_branch_id
AND year_id = p_year_id;	

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_TransportPlan` (IN `p_branch_id` INT(11), IN `p_year_id` INT(11))  NO SQL
BEGIN

DECLARE v_plan_id INT;

IF p_year_id = 4 THEN 
 	SET v_plan_id = 47;
ELSEIF p_year_id = 2 THEN
 	SET v_plan_id = 46;
END IF;

 SELECT ft.*,
 		(SELECT fee_type_name FROM tbl_fee_type tbft WHERE tbft.fee_type_id = 			ft.fee_type_id) as fee_type_name
 from tbl_fee_type_plan ft 
 WHERE ft.fee_plan_id = v_plan_id 
  AND ft.year_id = p_year_id
  and ft.branch_id = p_branch_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_turnoverdetailedreport` (IN `p_year_id` INT, IN `p_branch_id` INT)  BEGIN
 
SELECT 
                        courseName,
                        count(distinct student_academic_id)
                As         Student_count,
                
                        sum( Case WHEN feetypename = 'Facilities and Infrastructure Fee' Then Actual_amount else 0 end)
                As        Admission_fee_Amount,
                        sum( Case WHEN feetypename = 'Facilities and Infrastructure Fee' THEN concession else 0 end ) 
                As        Admission_fee_concession,
                        sum( Case WHEN feetypename = 'Facilities and Infrastructure Fee' THEN discount else 0 end )
                As         Admission_fee_discount,
                        sum( Case WHEN feetypename = 'Facilities and Infrastructure Fee' THEN Actual_amount-concession-discount else 0 end)
                As      Admission_fee_final_amount,
                        sum( Case WHEN feetypename = 'ADF' Then Actual_amount else 0 end)
                As        ADF_Amount,
                        sum( Case WHEN feetypename = 'ADF' THEN concession else 0 end ) 
                As        ADF_concession,
                        sum( Case WHEN feetypename = 'ADF' THEN discount else 0 end )
                As         ADF_discount,
                        sum( Case WHEN feetypename = 'ADF' THEN Actual_amount-concession-discount else 0 end)
                As      ADF_final_amount,
                        sum( Case WHEN feetypename = 'ANF' Then Actual_amount else 0 end)
                As        ANF_Amount,
                        sum( Case WHEN feetypename = 'ANF' THEN concession else 0 end ) 
                As        ANF_concession,
                        sum( Case WHEN feetypename = 'ANF' THEN discount else 0 end )
                As         ANF_discount,
                        sum( Case WHEN feetypename = 'ANF' THEN Actual_amount-concession-discount else 0 end)
                As      ANF_final_amount,
                        sum( Case WHEN feetypename = 'CDF' Then Actual_amount else 0 end)
                As        CDF_Amount,
                        sum( Case WHEN feetypename = 'CDF' THEN concession else 0 end ) 
                As        CDF_concession,
                        sum( Case WHEN feetypename = 'CDF' THEN discount else 0 end )
                As         CDF_discount,
                        sum( Case WHEN feetypename = 'CDF' THEN Actual_amount-concession-discount else 0 end)
                As      CDF_final_amount,
                        sum( Case WHEN feetypename = 'TF' Then Actual_amount else 0 end)
                As        TF_Amount,
                        sum( Case WHEN feetypename = 'TF' THEN concession else 0 end ) 
                As        TF_concession,
                        sum( Case WHEN feetypename = 'TF' THEN discount else 0 end )
                As         TF_discount,
                        sum( Case WHEN feetypename = 'TF' THEN Actual_amount-concession-discount else 0 end)
                As      TF_final_amount,
                        sum( Case WHEN feetypename = 'DF' Then Actual_amount else 0 end)
                As        DF_Amount,
                        sum( Case WHEN feetypename = 'DF' THEN concession else 0 end ) 
                As        DF_concession,
                        sum( Case WHEN feetypename = 'DF' THEN discount else 0 end )
                As         DF_discount,
                        sum( Case WHEN feetypename = 'DF' THEN Actual_amount-concession-discount else 0 end)
                As      DF_final_amount,
                        sum( Case WHEN feetypename = 'UBS' Then Actual_amount else 0 end)
                As        UBS_Amount,
                        sum( Case WHEN feetypename = 'UBS' THEN concession else 0 end ) 
                As        UBS_concession,
                        sum( Case WHEN feetypename = 'UBS' THEN discount else 0 end )
                As         UBS_discount,
                        sum( Case WHEN feetypename = 'UBS' THEN Actual_amount-concession-discount else 0 end)
                As      UBS_final_amount,
                        sum( Case WHEN feetypename = 'TPF' Then Actual_amount else 0 end)
                As        TPF_Amount,
                        sum( Case WHEN feetypename = 'TPF' THEN concession else 0 end ) 
                As        TPF_concession,
                        sum( Case WHEN feetypename = 'TPF' THEN discount else 0 end )
                As         TPF_discount,
                        sum( Case WHEN feetypename = 'TPF' THEN Actual_amount-concession-discount else 0 end)
                As      TPF_final_amount,
                        sum( Case WHEN feetypename = 'DCF' Then Actual_amount else 0 end)
                As        DCF_Amount,
                        sum( Case WHEN feetypename = 'DCF' THEN concession else 0 end ) 
                As        DCF_concession,
                        sum( Case WHEN feetypename = 'DCF' THEN discount else 0 end )
                As         DCF_discount,
                        sum( Case WHEN feetypename = 'DCF' THEN Actual_amount-concession-discount else 0 end)
                As      DCF_final_amount,
                        sum( Actual_amount)
                As        Total_Amount,
                        sum(concession) 
                As        Total_concession,
                        sum(discount)
                As         Total_discount,
                        sum( Actual_amount-concession-discount )
                As      Total_final_amount
                
              FROM
                 (SELECT
                        student_academic_id,
                        student_id,
                        get_courseName((SELECT 
                                    course_id 
                         FROM 
                                    tbl_student_academic ac 
                         WHERE 
                                   ac.student_academic_id = sp.student_academic_id 
                         AND        
                                    ac.year_id = sp.year_id
                        AND ac.status='0' AND ac.promoted='0'
                        LIMIt 0,1))
                AS        courseName,
                        get_feeTypeamount(fee_type_id) 
                AS      
                        Actual_amount,
                        IFNULL(get_S_F_concession (sp.type_plan_id,get_feeTypeamount(fee_type_id),student_id,sp.branch_id,sp.year_id),0)
                
                AS      concession,
                IFNULL(get_S_F_discount (sp.type_plan_id,student_id,sp.branch_id,sp.year_id),0)
        AS 
                discount,
                        get_feeTypeCode(sp.type_plan_id)
                AS
                        feetypename,
                        sp.type_plan_id 
                FROM 
                        tbl_student_plan_type sp
                INNER JOIN
                        tbl_fee_type_plan  tp
                ON
                        sp.type_plan_id = tp.type_plan_id
                            
                WHERE 
                        sp.branch_id = p_branch_id
                AND 
                        sp.year_id = p_year_id
                AND
                        sp.status ='0'
                AND
                        mode_flag = 'credit'
                        
                AND      
                       sp.student_academic_id not in(select student_academic_id from tbl_student_academic where year_id=p_year_id and status!='0')        
                 UNION ALL
         SELECT sa.student_academic_id ,sd.student_id,
                    get_courseName(sa.course_id) AS courseName,
                    sd.actual_fee AS Actual_amount,
                    0 as concession,
                            (ifnull(sd.discount_1,0)+ifnull(sd.discount_2,0)+ifnull(sd.discount_3,0))as discuount,
                           "Facilities and Infrastructure Fee" AS
                        feetypename,
                        0 as type_plan_id
        FROM tbl_student_admission_fee sd  
         INNER JOIN tbl_student_academic sa 
                on
                    sa.student_id = sd.student_id
         where sd.branch_id = p_branch_id
         AND sd.year_id = p_year_id
         AND sa.year_id = p_year_id
        AND sd.status = '0'    AND sa.status='0' and sa.promoted='0'   ) a 

            GROUP BY courseName with rollup;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_attendance` (IN `p_fromdate` DATE, IN `p_todate` DATE, IN `p_branch_id` INT, IN `p_year_id` INT, IN `p_report_type` INT)  BEGIN

IF p_report_type = 21 Then
 

SET @sql= '';



select 

GROUP_CONCAT(DISTINCT
    CONCAT(
      'get_studentAttendance(''', DATE_FORMAT(m1, '%b %Y'), ''' , student_id ) as ''', DATE_FORMAT(m1, '%b %Y'),'''' )
        ) 
INTO @sql
from
(
select 
(date(p_fromdate) - INTERVAL DAYOFMONTH(date(p_fromdate))-1 DAY) 
+INTERVAL m MONTH as m1
from
(
select @rownum:=@rownum+1 as m from
(select 1 union select 2 union select 3 union select 4) t1,
(select 1 union select 2 union select 3 union select 4) t2,
(select 1 union select 2 union select 3 union select 4) t3,
(select 1 union select 2 union select 3 union select 4) t4,
(select @rownum:=-1) t0
) d1
) d2 
where m1<= date(p_todate)
order by m1;


 

SET @sql = CONCAT('SELECT get_studentName(student_id) Student_Name,admission_number , get_courseName(course_id) Course_Name, getSectionName(section_id) section_name,' , @sql,' FROM tbl_student_academic WHERE branch_id = ',p_branch_id ,' and year_id = ',p_year_id , ' and status =''0'' order by course_id, section_id ');


PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

ELSEIF  p_report_type = 22 THEN 

DROP TEMPORARY TABLE IF exists temp_working_days;
CREATE TEMPORARY  table temp_working_days (course_id int, workingdays int);

INSERT INTO 
				temp_working_days 
					SELECT course_id, 
						   count(distinct attendance_date) 
                    FROM
							tbl_student_attendance
					WHERE 
							  
								branch_id = p_branch_id 
					AND 
								year_id = p_year_id
					AND
								attendance_date>= p_fromdate
					AND 
								attendance_date  <= p_todate
					AND 
								attendance_flag in ('A','P')
				
					GROUP BY
								course_id;

SELECT 
			admission_number,
            student_name,
			get_courseName(course_id) Course_Name, 
            (SELECT getSectionName(section_id) FROM tbl_student_academic x WHERE x.student_academic_id = a.student_academic_id ) section,
			(SELECT workingdays FROM temp_working_days w WHERE w.course_id = a.course_id)  Working_days,
		    SUM(CASE WHEN attendance_flag = 'P' THEN 1 ELSE 0 END) Present,
            SUM(CASE WHEN attendance_flag = 'A' THEN 1 ELSE 0 END) Absent
             
FROM 
			tbl_student_attendance a
INNER JOIN 

			tbl_student  b
ON
		    a.student_id = b.student_id
WHERE  
			a.branch_id = p_branch_id 
AND 
			a.year_id = p_year_id
AND
            attendance_date>= p_fromdate
AND 
			attendance_date  <= p_todate

GROUP BY
			admission_number,student_name,get_courseName(course_id);
            
ELSEIF p_report_type = 23  THEN

SELECT 
			get_courseName(course_id) Course_Name,
			getSectionName(section_id) Section_Name,
            Attendance_Date,
            Total_count,
            Total_Male,
            Total_Female,
            Present,
            Present_Male,
            Present_Female,
            Absent,
            Absent_Male,
            Absent_Female
FROM (

		SELECT
					course_id,
					(SELECT section_id FROM tbl_student_academic x WHERE x.student_academic_id = a.student_academic_id ) section_id,
					DATE_FORMAT(attendance_date,'%d %b %Y')
					AS      Attendance_Date,
					COUNT(*) Total_count,
					SUM( CASE WHEN gender =  'Male' THEN 1 ELSE 0 END) Total_Male,
					SUM( CASE WHEN gender =  'Female' THEN 1 ELSE 0 END) Total_Female,
					SUM( CASE WHEN attendance_flag = 'P' THEN 1 ELSE 0 END) Present,
					SUM( CASE WHEN gender =  'Male' AND attendance_flag = 'P' THEN 1 ELSE 0 END) Present_Male,
					SUM( CASE WHEN gender =  'Female' AND attendance_flag = 'P' THEN 1 ELSE 0 END) Present_Female,
					SUM( CASE WHEN attendance_flag = 'A' THEN 1 ELSE 0 END) Absent,
					SUM( CASE WHEN gender =  'Male' AND attendance_flag = 'A' THEN 1 ELSE 0 END) Absent_Male,
					SUM( CASE WHEN gender =  'Female' AND attendance_flag = 'A' THEN 1 ELSE 0 END) Absent_Female
	  FROM
					tbl_student_attendance a 
	  INNER JOIN
					tbl_student  b
	  ON
					a.student_id = b.student_id
	  WHERE
					a.branch_id = p_branch_id
	  AND 
					a.year_id = p_year_id
	  AND
					attendance_date>= p_fromdate
	  AND 
					attendance_date  <= p_todate
	
            
	  GROUP BY
					Attendance_Date,
					course_id,
					section_id with rollup
	   Having 
					( Attendance_Date is not null  ) 
	   OR 
					(course_id is not null and  section_id is not null )) t;


ELSEIF p_report_type = 24  THEN

SELECT
            get_courseName(course_id) Course_Name,
            count(DISTINCT date(attendance_date)) attendance_count
FROM
            tbl_student_attendance
WHERE 
            branch_id = p_branch_id 
AND
            year_id = p_year_id
AND
            attendance_date >= p_fromdate
AND
            attendance_date  <= p_todate


GROUP BY
            get_courseName(course_id) asc;

END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_cumulative_LEAPAD` (IN `p_start_date` DATE, IN `p_end_date` DATE, IN `p_report_type` INT)  ThisSP: 
BEGIN 

DECLARE currdate DATE;
DECLARE enddate DATE;

	IF (p_start_date is null) Then
     
	 LEAVE ThisSP;

	END IF;
	
	IF (p_end_date is null) Then
     
	 LEAVE ThisSP;

	END IF;

set currdate = p_start_date;
set enddate = p_end_date;

drop temporary table if exists tbl_tmp_calender;

CREATE TEMPORARY TABLE IF NOT EXISTS tbl_tmp_calender(`r_date` datetime);

INSERT INTO tbl_tmp_calender (r_date) VALUES(currdate);

WHILE currdate < enddate DO
  
	 Set currdate = DATE_ADD(currdate,INTERVAL 1 DAY);
INSERT INTO tbl_tmp_calender (r_date) VALUES(currdate);

END WHILE;

IF p_report_type = 4 Then

		SELECT
				r_date,
				(SELECT 
								COUNT(1)
				 FROM
								tbl_leads l
				 WHERE
							date(l.lead_date) = date(c.r_date)) 
		AS		lead_count,
				(SELECT 
								COUNT(1)
				 FROM
								tbl_applications a
				 WHERE
							date(a.created_date) = date(c.r_date)) 
		AS	 	application_count,

				(SELECT 
								COUNT(1)
				 FROM
								tbl_student s
				 WHERE
							date(s.created_date) = date(c.r_date)) 
		AS	 	addmistion_count
			
		FROM
				tbl_tmp_calender c
				
		GROUP BY
				r_date;
ELSEIF p_report_type = 3  THEN

		SELECT
				DATE_FORMAT(r_date,'%b-%Y') as r_date,
				(SELECT 
								COUNT(1)
				 FROM
								tbl_leads l
				 WHERE
							DATE_FORMAT(l.lead_date,'%b-%Y') =  DATE_FORMAT(r_date,'%b-%Y')) 
		AS		lead_count,
				(SELECT 
								COUNT(1)
				 FROM
								tbl_applications a
				 WHERE
							DATE_FORMAT(a.created_date,'%b-%Y') = DATE_FORMAT(r_date,'%b-%Y')) 
		AS	 	application_count,

				(SELECT 
								COUNT(1)
				 FROM
								tbl_student s
				 WHERE
							DATE_FORMAT(s.created_date,'%b-%Y') = DATE_FORMAT(r_date,'%b-%Y')) 
		AS	 	addmistion_count
			
		FROM
				tbl_tmp_calender c
				
		GROUP BY
				DATE_FORMAT(r_date,'%b-%Y');


ELSEIF p_report_type = 2  THEN

		SELECT
				DATE_FORMAT(r_date,'%Y') as r_date,
				(SELECT 
								COUNT(1)
				 FROM
								tbl_leads l
				 WHERE
							DATE_FORMAT(l.lead_date,'%Y') =  DATE_FORMAT(r_date,'%Y')) 
		AS		lead_count,
				(SELECT 
								COUNT(1)
				 FROM
								tbl_applications a
				 WHERE
							DATE_FORMAT(a.created_date,'%Y') = DATE_FORMAT(r_date,'%Y')) 
		AS	 	application_count,

				(SELECT 
								COUNT(1)
				 FROM
								tbl_student s
				 WHERE
							DATE_FORMAT(s.created_date,'%Y') = DATE_FORMAT(r_date,'%Y')) 
		AS	 	addmistion_count
			
		FROM
				tbl_tmp_calender c
				
		GROUP BY
				DATE_FORMAT(r_date,'%Y');
                
ELSEIF p_report_type = 5  THEN

	
		SELECT
				DATE_FORMAT(r_date,'%d %b %Y')r_date,
                (SELECT 
								COUNT(1)
				 FROM
								tbl_leads ll
				 WHERE
						date(ll.lead_date) >= date(DATE_SUB(DATE_FORMAT(r_date ,'%Y-%m-01'), INTERVAL 1 MONTH) ) and date(ll.lead_date) <= date(DATE_SUB(c.r_date, INTERVAL 1 MONTH) )) 
		AS		LMTD_lead_count,
				(SELECT 
								COUNT(1)
				 FROM
								tbl_leads l
				 WHERE
						date(l.lead_date) >= date(DATE_FORMAT(r_date ,'%Y-%m-01') ) and date(l.lead_date) <= date(c.r_date)) 
		AS		lead_count,
        				(SELECT 
								COUNT(1)
				 FROM
								tbl_applications la
				 WHERE
							date(la.created_date) >= date(DATE_SUB(DATE_FORMAT(r_date ,'%Y-%m-01'), INTERVAL 1 MONTH) ) and date(la.created_date) <= date(DATE_SUB(c.r_date, INTERVAL 1 MONTH) )) 
                           
		AS	 	LMTD_application_count,
				(SELECT 
								COUNT(1)
				 FROM
								tbl_applications a
				 WHERE
							
                            date(a.created_date) >= date(DATE_FORMAT(r_date ,'%Y-%m-01') ) and date(a.created_date) <= date(c.r_date)) 
		AS	 	application_count,
				(SELECT 
								COUNT(1)
				 FROM
								tbl_student ls
				 WHERE
							date(ls.created_date) >= date(DATE_SUB(DATE_FORMAT(r_date ,'%Y-%m-01'), INTERVAL 1 MONTH) ) and date(ls.created_date) <= date(DATE_SUB(c.r_date, INTERVAL 1 MONTH) ))
                           
		AS	 	LMTD_addmistion_count,
				(SELECT 
								COUNT(1)
				 FROM
								tbl_student s
				 WHERE
							  date(s.created_date) >= date(DATE_FORMAT(r_date ,'%Y-%m-01') ) and date(s.created_date) <= date(c.r_date)) 
		AS	 	addmistion_count
			
		FROM
				tbl_tmp_calender c
				
		GROUP BY
				r_date;

		
ELSEIF p_report_type = 6  THEN

		SELECT
				DATE_FORMAT(r_date,'%d %b %Y')r_date,
                (SELECT 
								COUNT(1)
				 FROM
								tbl_leads ll
				 WHERE
						date(ll.lead_date) >= date(DATE_SUB(DATE_FORMAT(r_date ,'%Y-%m-01'), INTERVAL 1 YEAR) ) and date(ll.lead_date) <= date(DATE_SUB(c.r_date, INTERVAL 1 YEAR) )) 
		AS		LYMTD_lead_count,
				(SELECT 
								COUNT(1)
				 FROM
								tbl_leads l
				 WHERE
						date(l.lead_date) >= date(DATE_FORMAT(r_date ,'%Y-%m-01') ) and date(l.lead_date) <= date(c.r_date)) 
		AS		lead_count,
        				(SELECT 
								COUNT(1)
				 FROM
								tbl_applications la
				 WHERE
							date(la.created_date) >= date(DATE_SUB(DATE_FORMAT(r_date ,'%Y-%m-01'), INTERVAL 1 YEAR) ) and date(la.created_date) <= date(DATE_SUB(c.r_date, INTERVAL 1 YEAR) )) 
                           
		AS	 	LYMTD_application_count,
				(SELECT 
								COUNT(1)
				 FROM
								tbl_applications a
				 WHERE
							
                            date(a.created_date) >= date(DATE_FORMAT(r_date ,'%Y-%m-01') ) and date(a.created_date) <= date(c.r_date)) 
		AS	 	application_count,
				(SELECT 
								COUNT(1)
				 FROM
								tbl_student ls
				 WHERE
							date(ls.created_date) >= date(DATE_SUB(DATE_FORMAT(r_date ,'%Y-%m-01'), INTERVAL 1 YEAR) ) and date(ls.created_date) <= date(DATE_SUB(c.r_date, INTERVAL 1 YEAR) ))
                           
		AS	 	LYMTD_addmistion_count,
				(SELECT 
								COUNT(1)
				 FROM
								tbl_student s
				 WHERE
							  date(s.created_date) >= date(DATE_FORMAT(r_date ,'%Y-%m-01') ) and date(s.created_date) <= date(c.r_date)) 
		AS	 	addmistion_count
			
		FROM
				tbl_tmp_calender c
				
		GROUP BY
				r_date;		

END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_discountapprovals` (IN `p_fromdate` DATE, IN `p_todate` DATE, IN `p_branch_id` INT, IN `p_approval_status` VARCHAR(50), IN `p_report_type` INT, IN `p_year_id` INT)  BEGIN

 
IF p_report_type = 26 Then


IF(p_approval_status = 'All') THEN
  
            SELECT 
                        get_studentName(ap.student_id) As Student_Name,
                        get_courseName(ac.course_id ) Course_Name,
                        getSectionName(ac.section_id) Section_Name,
                        ac.roll_number AS Roll_Number,
                        ac.admission_number As Admission_Number,
                        ap.type_plan_id,
                        get_feeTypeName(ap.type_plan_id) Fee_Type_Name,
                        ap.discount_amount,
                        ap.approval_status,
                        (SELECT user_name FROM tbl_users tu WHERE tu.user_id =ap.user_id limit 0,1) Applied_by,
                        DATE_FORMAT(ap.created_date,'%d %b %Y') as Applied_date,
                        (SELECT user_name FROM tbl_users tu WHERE tu.user_id = ap.modified_by limit 0,1)   as Approved_by,
                        DATE_FORMAT(ap.modified_date,'%d %b %Y')  as Approved_date
            FROM 
                        tbl_approval_requests  ap 
            INNER JOIN

                        tbl_student_academic ac 
            ON
                        ap.student_id = ac.student_id
                        and 
                        ap.branch_id = ac.branch_id
                        and 
                        ap.year_id = ac.year_id 
                        AND
                            ac.status ='0'
                        
            WHERE 
                        ap.branch_id = p_branch_id
                AND  
                        ap.year_id = p_year_id
                AND
                            ap.status ='0'
             
            UNION ALL
         SELECT get_studentName(sd.student_id) As Student_Name,
                get_courseName(sa.course_id) AS courseName,
                getSectionName(sa.section_id) Section_Name,
                sa.roll_number AS Roll_Number,
                sa.admission_number As Admission_Number,
                0 as type_plan_id,
                "Facilities and Infrastructure Fee" AS
                        Fee_Type_Name,
                sd.discount_amount,
                        sd.approval_status,
                (SELECT user_name FROM tbl_users tu WHERE tu.user_id =sd.user_id limit 0,1) Applied_by,
                        DATE_FORMAT(sd.created_date,'%d %b %Y') as Applied_date,
                        (SELECT user_name FROM tbl_users tu WHERE tu.user_id = sd.modified_by limit 0,1)   as Approved_by,
                        DATE_FORMAT(sd.modified_date,'%d %b %Y')  as Approved_date           
                        
        FROM tbl_admission_approval_requests sd  
         INNER JOIN tbl_student_academic sa 
                on
                    sa.student_id = sd.student_id
         where sd.branch_id = p_branch_id
         AND sd.year_id = p_year_id
         AND sa.year_id = p_year_id
        AND sd.status = '0' AND sa.status='0';
        
                            
            
ELSE
 
             SELECT 
                        get_studentName(ap.student_id) As Student_Name,
                        get_courseName(ac.course_id ) courseName,
                        getSectionName(ac.section_id) Section_Name,
                        ac.roll_number AS Roll_Number,
                        ac.admission_number AS Admission_Number,
                        get_feeTypeName(ap.type_plan_id) Fee_Type_Name,
                        ap.discount_amount,
                        ap.approval_status,
                        (SELECT user_name FROM tbl_users tu WHERE tu.user_id =ap.user_id limit 0,1) Applied_by,
                        DATE_FORMAT(ap.created_date,'%d %b %Y') as Applied_date,
                        (SELECT user_name FROM tbl_users tu WHERE tu.user_id = ap.modified_by limit 0,1)   as Approved_by,
                        DATE_FORMAT(ap.modified_date,'%d %b %Y')  as Approved_date
            FROM 
                        tbl_approval_requests  ap 
            INNER JOIN

                        tbl_student_academic ac 
            ON
                        ap.student_id = ac.student_id
                        and 
                        ap.branch_id = ac.branch_id
                        and 
                        ap.year_id = ac.year_id 
                        AND
                            ac.status ='0'
                        
            WHERE 
                        ap.branch_id = p_branch_id
            
            AND         
                        ap.year_id = p_year_id
            AND   
                        ap.status='0'
            AND         
                        ap.approval_status = p_approval_status
             
             UNION ALL
         SELECT get_studentName(sd.student_id) As Student_Name,
                get_courseName(sa.course_id) AS courseName,
                getSectionName(sa.section_id) Section_Name,
                sa.roll_number AS Roll_Number,
                sa.admission_number As Admission_Number,
                "Facilities and Infrastructure Fee" AS
                        Fee_Type_Name,
                sd.discount_amount,
                        sd.approval_status,
                (SELECT user_name FROM tbl_users tu WHERE tu.user_id =sd.user_id limit 0,1) Applied_by,
                        DATE_FORMAT(sd.created_date,'%d %b %Y') as Applied_date,
                        (SELECT user_name FROM tbl_users tu WHERE tu.user_id = sd.modified_by limit 0,1)   as Approved_by,
                        DATE_FORMAT(sd.modified_date,'%d %b %Y')  as Approved_date           
                        
        FROM tbl_admission_approval_requests sd  
         INNER JOIN tbl_student_academic sa 
                on
                    sa.student_id = sd.student_id
         where sd.branch_id = p_branch_id
         AND sd.year_id = p_year_id
         AND sa.year_id = p_year_id
        AND sd.status = '0' AND sa.status='0'
        AND         
                        sd.approval_status = p_approval_status;
             
                
 
 
 END IF;

END IF;     
 

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_discountapprovals1` (IN `p_fromdate` DATE, IN `p_todate` DATE, IN `p_branch_id` INT, IN `p_approval_status` VARCHAR(50), IN `p_report_type` INT, IN `p_year_id` INT)  BEGIN

 
IF p_report_type = 26 Then


IF(p_approval_status = 'All') THEN
  
            SELECT 
                        get_studentName(ap.student_id) As Student_Name,
                        get_courseName(ac.course_id ) Course_Name,
                        getSectionName(ac.section_id) Section_Name,
                        ac.roll_number AS Roll_Number,
                        ac.admission_number As Admission_Number,
                        ap.type_plan_id,
                        get_feeTypeName(ap.type_plan_id) Fee_Type_Name,
                        ap.discount_amount,
                        ap.approval_status,
                        (SELECT user_name FROM tbl_users tu WHERE tu.user_id =ap.user_id limit 0,1) Applied_by,
                        DATE_FORMAT(ap.created_date,'%d %b %Y') as Applied_date,
                        (SELECT user_name FROM tbl_users tu WHERE tu.user_id = ap.modified_by limit 0,1)   as Approved_by,
                        DATE_FORMAT(ap.modified_date,'%d %b %Y')  as Approved_date
            FROM 
                        tbl_approval_requests  ap 
            INNER JOIN

                        tbl_student_academic ac 
            ON
                        ap.student_id = ac.student_id
                        and 
                        ap.branch_id = ac.branch_id
                        and 
                        ap.year_id = ac.year_id 
                        AND
                            ac.status ='0'
                        
            WHERE 
                        ap.branch_id = p_branch_id
                AND  
                        ap.year_id = p_year_id
                AND
                            ap.status ='0'
             
            UNION ALL
         SELECT get_studentName(sd.student_id) As Student_Name,
                get_courseName(sa.course_id) AS courseName,
                getSectionName(sa.section_id) Section_Name,
                sa.roll_number AS Roll_Number,
                sa.admission_number As Admission_Number,
                0 as type_plan_id,
                "Facilities and Infrastructure Fee" AS
                        Fee_Type_Name,
                sd.discount_amount,
                        sd.approval_status,
                (SELECT user_name FROM tbl_users tu WHERE tu.user_id =sd.user_id limit 0,1) Applied_by,
                        DATE_FORMAT(sd.created_date,'%d %b %Y') as Applied_date,
                        (SELECT user_name FROM tbl_users tu WHERE tu.user_id = sd.modified_by limit 0,1)   as Approved_by,
                        DATE_FORMAT(sd.modified_date,'%d %b %Y')  as Approved_date           
                        
        FROM tbl_admission_approval_requests sd  
         INNER JOIN tbl_student_academic sa 
                on
                    sa.student_id = sd.student_id
         where sd.branch_id = p_branch_id
         AND sd.year_id = p_year_id
         AND sa.year_id = p_year_id
        AND sd.status = '0' AND sa.status='0';
        
                            
            
ELSE
 
             SELECT 
                        get_studentName(ap.student_id) As Student_Name,
                        get_courseName(ac.course_id ) courseName,
                        getSectionName(ac.section_id) Section_Name,
                        ac.roll_number AS Roll_Number,
                        ac.admission_number AS Admission_Number,
                        get_feeTypeName(ap.type_plan_id) Fee_Type_Name,
                        ap.discount_amount,
                        ap.approval_status,
                        (SELECT user_name FROM tbl_users tu WHERE tu.user_id =ap.user_id limit 0,1) Applied_by,
                        DATE_FORMAT(ap.created_date,'%d %b %Y') as Applied_date,
                        (SELECT user_name FROM tbl_users tu WHERE tu.user_id = ap.modified_by limit 0,1)   as Approved_by,
                        DATE_FORMAT(ap.modified_date,'%d %b %Y')  as Approved_date
            FROM 
                        tbl_approval_requests  ap 
            INNER JOIN

                        tbl_student_academic ac 
            ON
                        ap.student_id = ac.student_id
                        and 
                        ap.branch_id = ac.branch_id
                        and 
                        ap.year_id = ac.year_id 
                        AND
                            ac.status ='0'
                        
            WHERE 
                        ap.branch_id = p_branch_id
            
            AND         
                        ap.year_id = p_year_id
            AND   
                        ap.status='0'
            AND         
                        ap.approval_status = p_approval_status
             
             UNION ALL
         SELECT get_studentName(sd.student_id) As Student_Name,
                get_courseName(sa.course_id) AS courseName,
                getSectionName(sa.section_id) Section_Name,
                sa.roll_number AS Roll_Number,
                sa.admission_number As Admission_Number,
                "Facilities and Infrastructure Fee" AS
                        Fee_Type_Name,
                sd.discount_amount,
                        sd.approval_status,
                (SELECT user_name FROM tbl_users tu WHERE tu.user_id =sd.user_id limit 0,1) Applied_by,
                        DATE_FORMAT(sd.created_date,'%d %b %Y') as Applied_date,
                        (SELECT user_name FROM tbl_users tu WHERE tu.user_id = sd.modified_by limit 0,1)   as Approved_by,
                        DATE_FORMAT(sd.modified_date,'%d %b %Y')  as Approved_date           
                        
        FROM tbl_admission_approval_requests sd  
         INNER JOIN tbl_student_academic sa 
                on
                    sa.student_id = sd.student_id
         where sd.branch_id = p_branch_id
         AND sd.year_id = p_year_id
         AND sa.year_id = p_year_id
        AND sd.status = '0' AND sa.status='0'
        AND         
                        sd.approval_status = p_approval_status;
             
                
 
 
 END IF;

END IF;     
 

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_feeAdvanceCollection` (IN `p_todate` DATE, IN `p_branch_id` INT, IN `p_report_type` INT)  BEGIN
IF p_report_type = 14  THEN

SELECT 
        Student_Name,
        CLASS,
        IFNULL(transaction_date,'Total')

  AS    transaction_date,
        
        IF(transaction_date is null,'',system_receipt_number)
  AS    system_receipt_number,
        SUM(amount)
  AS    amount,
		 feetype, 
     min(year_id) as Academic_year 
FROM 

 ( SELECT 
              (CASE WHEN  t.studnet_id = 0 THEN get_applicationName (t.application_id) else     get_studentName(t.studnet_id) end)
 As             Student_Name,
                (CASE WHEN  studnet_id = 0 THEN get_courseName((select course_id from tbl_applications a where a.application_id = t.application_id )) else  get_courseName_cp_id(t.cource_plan_id) end) AS CLASS,
                DATE_FORMAT(t.transaction_date,'%d %b %Y')
 AS             transaction_date,
                t.system_receipt_number,
                IFNULL(t.amount,0) AS  amount,
				get_feeTypeName(t.`type_plan_id`) as feetype, 

                (select get_yearName(year_id) from tbl_fee_type_plan ftp where ftp.type_plan_id = t.type_plan_id)as year_id
 FROM  
                
        tbl_fee_transactions t

 WHERE
                branch_id = 1
 AND 
                status= '0'
 
 AND
    date(t.transaction_date) <= date(p_todate)
 AND
  (select year_id from tbl_fee_type_plan ftp where ftp.type_plan_id = t.type_plan_id)=10
 AND
 (select fee_type_id from tbl_fee_type_plan ftp where ftp.type_plan_id = t.type_plan_id)!=367
   
 UNION ALL   

 SELECT 
                get_studentName(mt.byer_id)as Student_Name,
                get_studentName(mt.byer_id)  AS CLASS,
                DATE_FORMAT(mt.transaction_date,'%d %b %Y')
 AS             transaction_date,
                mt.system_receipt_number,
                IFNULL(mt.amount,0) AS  amount,
                'miscellaneous fee' as feetype,
                get_yearName(mt.year_id) as year_id
  
 FROM  
                
        tbl_mis_transactions  mt

 WHERE
                mt.branch_id = p_branch_id
 AND
                mt.status= '0'
 AND 
 (select sa.year_id from tbl_student_academic sa where sa.student_id = mt.byer_id and sa.status='0' ORDER BY student_academic_id ASC LIMIT 1)= '10'
 
 AND
                date(mt.transaction_date) <= date(p_todate)

  

        
 UNION ALL
    SELECT 
                get_studentName(adt.studnet_id)as Student_Name,
                get_courseName((select sa.course_id from tbl_student_academic sa where sa.student_id = adt.studnet_id and sa.status='0' ORDER BY student_academic_id ASC LIMIT 1))  AS CLASS,
                DATE_FORMAT(adt.transaction_date,'%d %b %Y')
 AS             transaction_date,
                adt.system_receipt_number,
                IFNULL(adt.amount,0) AS  amount,
				'Facilities,infrastructure fee' as feetype,

                (SELECT get_yearName(sdf.year_id) FROM tbl_student_admission_fee sdf where sdf.admission_fee_id = adt.admission_fee_id and sdf.student_id = adt.studnet_id )as year_id
  
 FROM  
                
        tbl_admission_fee_transactions  adt

 WHERE
                adt.branch_id = p_branch_id
 AND
                adt.status= '0'
 
 AND
 (select sa.year_id from tbl_student_academic sa where sa.student_id = adt.studnet_id and sa.status='0' ORDER BY student_academic_id ASC LIMIT 1)= '10'
  
          AND 
       date(adt.transaction_date) <= date(p_todate))  a  
                 

 WHERE 
            amount is not null   
 GROUP BY 
                Student_Name,
                system_receipt_number,
                CLASS,
                feetype,
                transaction_date  asc
                with rollup
having ISNULL(system_receipt_number) = ISNULL(transaction_date)
and   ISNULL(Student_Name) =ISNULL(system_receipt_number) and  ISNULL(Student_Name) = ISNULL(transaction_date) ;  



ELSEIF p_report_type = 17  THEN

SELECT 
              IFNULL(transaction_date,'Total')
 AS             transaction_date,
              Fee_type_name,
              sum(amount) 
  AS          amount
 FROM
(
SELECT 
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                get_feeTypeName(type_plan_id) 
  AS            Fee_type_name,
                IFNULL(amount,0) as amount
                
  
 FROM  
                tbl_fee_transactions
 WHERE
                branch_id = 1
 AND 
                status= '0'
 

 
 AND
                date(transaction_date) <= date(p_todate)

AND 
                (select year_id from tbl_fee_type_plan ftp where ftp.type_plan_id = type_plan_id limit 0,1)=10 

    UNION ALL

SELECT 
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                'Miscellaneous'
 AS             Fee_type_name,
                IFNULL(amount,0) as amount

  
 FROM  
                tbl_mis_transactions
 WHERE
                branch_id = 1
 AND 
                status= '0'
 

AND 
 
 
                date(transaction_date) <= date(p_todate) AND
 (select sa.year_id from tbl_student_academic sa where sa.student_id = byer_id and sa.status='0' ORDER BY student_academic_id ASC LIMIT 1)= '10'


     UNION ALL

SELECT 
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                'Facilities and Infrastructure Fee'
 AS             Fee_type_name,
                IFNULL(amount,0) as amount

  
 FROM  
                tbl_admission_fee_transactions
 WHERE
                branch_id = 1
 AND 
                status= '0'
 
AND 
date(transaction_date) <= date(p_todate)  
 AND                  
 (select sa.year_id from tbl_student_academic sa where sa.student_id = studnet_id and sa.status='0' ORDER BY student_academic_id ASC LIMIT 1)= '10'

                ) a    
     
 
 WHERE 
            amount is not null
 GROUP BY
                Fee_type_name,transaction_date asc with rollup
 having ISNULL(Fee_type_name) = ISNULL(transaction_date);
END IF;     
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_feeCollection` (IN `p_fromdate` DATE, IN `p_todate` DATE, IN `p_branch_id` INT, IN `p_report_type` INT)  BEGIN
 



IF p_report_type = 13 Then

  
  SELECT 
                IFNULL(transaction_date,'Total')
 AS             transaction_date,
               sum(amount) 
 AS           amount
 FROM
(
SELECT 
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                IFNULL(amount,0) amount
  
 FROM  
                tbl_fee_transactions
 WHERE
                branch_id = p_branch_id
 AND 
                status= '0'
 AND
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)
UNION ALL

SELECT 
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                IFNULL(amount,0) amount
  
 FROM  
                tbl_mis_transactions
 WHERE
                branch_id = p_branch_id
 AND 
                status= '0'
 AND    
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)
                
UNION ALL

SELECT 
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                IFNULL(amount,0) amount
  
 FROM  
                tbl_admission_fee_transactions
 WHERE
                branch_id = p_branch_id
 AND 
                status= '0'
 AND    
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)
                ) a 

WHERE 
            amount is not null
                
 GROUP BY
                transaction_date asc with rollup  ;





ELSEIF p_report_type = 14  THEN

SELECT 
        Student_Name,
        CLASS,
        IFNULL(transaction_date,'Total')

  AS    transaction_date,
        
        IF(transaction_date is null,'',system_receipt_number)
  AS    system_receipt_number,
  
     min(year_id) as Academic_year,
        SUM(amount)
  AS    amount 

FROM 

 ( SELECT 
              (CASE WHEN  t.studnet_id = 0 THEN get_applicationName (t.application_id) else     get_studentName(t.studnet_id) end)
 As             Student_Name,
                (CASE WHEN  studnet_id = 0 THEN get_courseName((select course_id from tbl_applications a where a.application_id = t.application_id )) else  get_courseName_cp_id(t.cource_plan_id) end) AS CLASS,
                DATE_FORMAT(t.transaction_date,'%d %b %Y')
 AS             transaction_date,
                t.system_receipt_number,
                IFNULL(t.amount,0) AS  amount,
				(select get_yearName(year_id) from tbl_fee_type_plan ftp where ftp.type_plan_id = t.type_plan_id)as year_id

  
 FROM  
                
        tbl_fee_transactions t

 WHERE
                branch_id = 1
 AND 
                status= '0'
 AND
                date(t.transaction_date) >= date(p_fromdate)
 AND
                date(t.transaction_date) <= date(p_todate)
   
 UNION ALL   

 SELECT 
                get_studentName(mt.byer_id)as Student_Name,
                get_courseName((select sa.course_id from tbl_student_academic sa where sa.student_id = mt.byer_id and sa.status='0' ORDER BY student_academic_id ASC LIMIT 1))  AS CLASS,
                DATE_FORMAT(mt.transaction_date,'%d %b %Y')
 AS             transaction_date,
                mt.system_receipt_number,
                IFNULL(mt.amount,0) AS  amount
				,
                get_yearName(mt.year_id) as year_id
 FROM  
                
        tbl_mis_transactions  mt

 WHERE
                mt.branch_id = p_branch_id
 AND
                mt.status= '0'
 AND
                date(mt.transaction_date) >= date(p_fromdate)
 AND
                date(mt.transaction_date) <= date(p_todate)
          UNION ALL
    SELECT 
                get_studentName(adt.studnet_id)as Student_Name,
                get_courseName((select sa.course_id from tbl_student_academic sa where sa.student_id = adt.studnet_id and sa.status='0' ORDER BY student_academic_id ASC LIMIT 1))  AS CLASS,
                DATE_FORMAT(adt.transaction_date,'%d %b %Y')
 AS             transaction_date,
                adt.system_receipt_number,
                IFNULL(adt.amount,0) AS  amount
				,
                (SELECT get_yearName(sdf.year_id) FROM tbl_student_admission_fee sdf where sdf.admission_fee_id = adt.admission_fee_id and sdf.student_id = adt.studnet_id )as year_id
 FROM  
                
        tbl_admission_fee_transactions  adt

 WHERE
                adt.branch_id = p_branch_id
 AND
                adt.status= '0'
 AND
                date(adt.transaction_date) >= date(p_fromdate)
 AND
                date(adt.transaction_date) <= date(p_todate))  a  
 WHERE 
            amount is not null   
 GROUP BY 
                Student_Name,
                system_receipt_number,
                CLASS,
                transaction_date  asc
                with rollup
having ISNULL(system_receipt_number) = ISNULL(transaction_date)
and   ISNULL(Student_Name) =ISNULL(system_receipt_number) and  ISNULL(Student_Name) = ISNULL(transaction_date) ;  



ELSEIF p_report_type = 17  THEN

SELECT 
              IFNULL(transaction_date,'Total')
 AS             transaction_date,
              Fee_type_name,
              sum(amount) 
  AS          amount
 FROM
(
SELECT 
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                get_feeTypeName(type_plan_id) 
  AS            Fee_type_name,
                IFNULL(amount,0) as amount
  
 FROM  
                tbl_fee_transactions
 WHERE
                branch_id = p_branch_id
 AND 
                status= '0'
 AND
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)
UNION ALL

SELECT 
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                'Miscellaneous'
 AS             Fee_type_name,
                IFNULL(amount,0) as amount
  
 FROM  
                tbl_mis_transactions
 WHERE
                branch_id = p_branch_id
 AND 
                status= '0'
 AND    
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)
                
     UNION ALL

SELECT 
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                'Facilities and Infrastructure Fee'
 AS             Fee_type_name,
                IFNULL(amount,0) as amount
  
 FROM  
                tbl_admission_fee_transactions
 WHERE
                branch_id = p_branch_id
 AND 
                status= '0'
 AND    
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)           
                ) a               
 
 WHERE 
            amount is not null
 GROUP BY
                Fee_type_name,transaction_date asc with rollup
 having ISNULL(Fee_type_name) = ISNULL(transaction_date); 
                
                

ELSEIF p_report_type = 18  THEN

SELECT 
                Student_Name
   AS           Student_Name,
                admission_number,
                Course_Name,
                Fee_type_name,
                Fee_academic_year,
                transaction_date
   AS           transaction_date,
                system_receipt_number
   AS           system_receipt_number,
                ModeOfPayment,
                min(User_name)as UserName,
                check_transaction_num,
                sum(amount) as amount
                
                
 FROM
(SELECT 
                (CASE WHEN  studnet_id = 0 THEN get_applicationName (application_id) else get_studentName(studnet_id) end)
 As             Student_Name ,
                IFNULL(( SELECT admission_number FROM tbl_student ts where ts.student_id = ft.studnet_id), 'NA')
 AS             admission_number,
                get_courseName_cp_id(cource_plan_id) Course_Name,
                IFNULL(get_generalItemName(pay_mode),'NA')
 AS             ModeOfPayment,
                get_feeTypeName(type_plan_id) 
 AS             Fee_type_name,
               get_yearName(get_feeAcademicyear(type_plan_id))  as Fee_academic_year,
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                system_receipt_number,
                IFNULL(amount,0) amount,
                IFNULL(check_transaction_num,'NA') check_transaction_num,
                (select u.user_name from tbl_users u where u.user_id = ft.created_by) as user_name 
  
 FROM  
                
                tbl_fee_transactions ft

 WHERE
                branch_id = p_branch_id
 AND 
                status= '0'
 AND    
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)    
 UNION ALL
 
 SELECT 
                get_studentName(byer_id)as Student_Name,
               IFNULL( (SELECT 
                        admission_number 
                 FROM 
                        tbl_student mts 
                 WHERE 
                        mts.student_id = byer_id),'NA')
 AS             admission_number,
                (select get_courseName(course_id)  from tbl_student_academic sc where sc.student_id = byer_id and sc.year_id = m.year_id and sc.status='0' ORDER BY student_academic_id ASC Limit 0,1) 
                as Course_Name,
                IFNULL(get_generalItemName(pay_mode),'NA')
 AS             ModeOfPayment,
                'Miscellaneous' 
 AS             Fee_type_name,
                '' as Fee_academic_year,
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                system_receipt_number,
                IFNULL(amount,0) amount,
                IFNULL(check_transaction_num,'') check_transaction_num,
                (select u.user_name from tbl_users u where u.user_id = m.created_by) as user_name
  
 FROM  
                
                tbl_mis_transactions m

 WHERE
                branch_id = p_branch_id
 AND
                status= '0'
 AND    
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)
 UNION ALL
 
 SELECT 
                get_studentName(adt.studnet_id)as Student_Name,
               IFNULL( (SELECT 
                        admission_number 
                 FROM 
                        tbl_student mts 
                 WHERE 
                        mts.student_id = adt.studnet_id),'NA')
 AS             admission_number,
                (select get_courseName(course_id)  from tbl_student_academic sc where sc.student_id = adt.studnet_id and sc.status='0' ORDER BY student_academic_id ASC Limit 0,1) 
                as Course_Name,
                IFNULL(get_generalItemName(pay_mode),'NA')
 AS             ModeOfPayment,
                'Facilities and Infrastructure Fee' 
 AS             Fee_type_name,
                '' as Fee_academic_year,
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                system_receipt_number,
                IFNULL(amount,0) amount,
                IFNULL(check_transaction_num,'') check_transaction_num,
                (select u.user_name from tbl_users u where u.user_id = adt.created_by) as user_name
  
 FROM  
                
                tbl_admission_fee_transactions adt

 WHERE
                branch_id = p_branch_id
 AND
                status= '0'
 AND    
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)
                ) a
WHERE 
              amount is not null
                
GROUP BY      Student_Name,
              admission_number,
              Course_Name,
              Fee_type_name,
              Fee_academic_year,
              transaction_date desc,
              system_receipt_number,
              ModeOfPayment,
              check_transaction_num
              
              with rollup
 having 
        
        (check_transaction_num is not null )
            
        or 
        (IFNULL(Fee_type_name,0) = IFNULL(admission_number,0) );

                              
ELSEIF p_report_type = 21  THEN

SELECT 
             IF(UserName is null,'Total',UserName)
   AS           UserName,
              sum(amount) 
  AS          amount
 FROM
(
SELECT 
                (SELECT User_name FROM tbl_users u where u.user_id = t.created_by )
 AS             UserName,
                created_by,
                IFNULL(amount,0) as amount
  
 FROM  
                tbl_fee_transactions t
 WHERE
                branch_id = p_branch_id
 AND 
                status= '0'
 AND
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)
UNION ALL

SELECT 
                (SELECT User_name FROM tbl_users u where u.user_id = mt.created_by )
 AS             UserName,
                created_by,
                IFNULL(amount,0) as amount
  
 FROM  
                tbl_mis_transactions mt
 WHERE
                branch_id = p_branch_id
 AND 
                status= '0'
 AND    
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)
                
    UNION ALL

SELECT 
                (SELECT User_name FROM tbl_users u where u.user_id = amt.created_by )
 AS             UserName,
                created_by,
                IFNULL(amount,0) as amount
  
 FROM  
                tbl_admission_fee_transactions amt
 WHERE
                branch_id = p_branch_id
 AND 
                status= '0'
 AND    
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)) a               
 
 WHERE 
            amount is not null
 GROUP BY
                created_by,UserName asc with rollup; 

ELSEIF p_report_type = 25  THEN

        SELECT 
                get_studentName(a.studnet_id) Student_Name,
                b.admission_number,
                Father_Name,
                Fathet_number,
                get_courseName(b.course_id) course,
                getSectionName(b.section_id) section,
                system_receipt_number,
                manual_receipt_number,
                Fee_type_name,
                transaction_date,
                Sum( Ifnull(amount,0)) Paid_Amount
       FROM       
                (SELECT 
                        studnet_id,
                        DATE_FORMAT(transaction_date,'%d %b %Y')
                AS      transaction_date,
                        get_feeTypeName(type_plan_id) 
                AS      Fee_type_name,
                        manual_receipt_number,
                        system_receipt_number,
                        IFNULL(amount,0) as amount,
                        branch_id,
                        (SELECT  concat(@x:=parent_firstname ,'/', @y:=parent_mobile_number) FROM tbl_student_parents p where  p.student_id = t.studnet_id and p.status = '0' and  relation_type = 1 Limit 0,1)
                        Parent,
                        @x As Father_Name,
                        @y As Fathet_number,
                        (SELECT c.cource_id  
                         FROM tbl_fee_cource_plan c 
                         where c.cource_plan_id = t.cource_plan_id) Cource_id  
                FROM  
                        tbl_fee_transactions t
                WHERE
                        branch_id = 1
                AND 
                        status= '0'
                AND
                        date(transaction_date) >= date(p_fromdate)
                AND
                        date(transaction_date) <= date(p_todate)
                UNION ALL
                SELECT 
                        studnet_id,
                        DATE_FORMAT(transaction_date,'%d %b %Y')
                AS      transaction_date,
                        'Admisssion Fee' 
                AS      Fee_type_name,
                        manual_receipt_number,
                        system_receipt_number,
                        IFNULL(amount,0) as amount,
                        branch_id,
                        (SELECT  concat(@x:=parent_firstname ,'/', @y:=parent_mobile_number) FROM tbl_student_parents p where  p.student_id = adt.studnet_id and p.status = '0' and  relation_type = 1 Limit 0,1)
                        Parent,
                        @x As Father_Name,
                        @y As Fathet_number,
                        (select course_id  from tbl_student_academic sc where sc.student_id = adt.studnet_id and sc.status='0' ORDER BY student_academic_id ASC Limit 0,1) Cource_id  
                FROM  
                        tbl_admission_fee_transactions adt
                WHERE
                        branch_id = 1
                AND 
                        status= '0'
                AND
                        date(transaction_date) >= date(p_fromdate)
                AND
                        date(transaction_date) <= date(p_todate)) a 
        INNER JOIN
                tbl_student_academic b
        ON 
            a.studnet_id = b.student_id
        AND
            a.Cource_id =  b.course_id
        GROUP BY
                Student_Name,
                b.admission_number,
                Father_Name,
                Fathet_number,
                b.course_id,
                b.section_id,
                system_receipt_number,
                manual_receipt_number,
                Fee_type_name,
                transaction_date
                 ;

END IF;     
 
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_feecreditCollection` (IN `p_fromdate` DATE, IN `p_todate` DATE, IN `p_branch_id` INT, IN `p_report_type` INT)  BEGIN
IF p_report_type = 13 Then
SELECT 
                IFNULL(transaction_date,'Total')
 AS             transaction_date,
               sum(amount) 
 AS           amount
 FROM
(
SELECT 
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                IFNULL(amount,0) amount
  
 FROM  
                tbl_fee_transactions
 WHERE
                branch_id = p_branch_id
 AND 
                status= '0'
 AND
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)
UNION ALL

SELECT 
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                IFNULL(amount,0) amount
  
 FROM  
                tbl_mis_transactions
 WHERE
                branch_id = p_branch_id
 AND 
                status= '0'
 AND    
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)
                
UNION ALL

SELECT 
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                IFNULL(amount,0) amount
  
 FROM  
                tbl_admission_fee_transactions
 WHERE
                branch_id = p_branch_id
 AND 
                status= '0'
 AND    
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate)
      UNION ALL

SELECT 
                DATE_FORMAT(transaction_date,'%d %b %Y')
 AS             transaction_date,
                IFNULL(amount,0) amount
  
 FROM  
                tbl_student_tempcredit
 WHERE
 
                date(transaction_date) >= date(p_fromdate)
 AND
                date(transaction_date) <= date(p_todate) 

AND              type='credit'          
                
                
                
                
                ) a 

WHERE 
            amount is not null
                
 GROUP BY
                transaction_date asc with rollup  ;
                
  ELSEIF p_report_type = 14  THEN

SELECT 
        Student_Name,
        CLASS,
        IFNULL(transaction_date,'Total')

  AS    transaction_date,
        
        IF(transaction_date is null,'',system_receipt_number)
  AS    system_receipt_number,
  
     min(year_id) as Academic_year,
        SUM(amount)
  AS    amount 

FROM 

 ( SELECT 
              (CASE WHEN  t.studnet_id = 0 THEN get_applicationName (t.application_id) else     get_studentName(t.studnet_id) end)
 As             Student_Name,
                (CASE WHEN  studnet_id = 0 THEN get_courseName((select course_id from tbl_applications a where a.application_id = t.application_id )) else  get_courseName_cp_id(t.cource_plan_id) end) AS CLASS,
                DATE_FORMAT(t.transaction_date,'%d %b %Y')
 AS             transaction_date,
                t.system_receipt_number,
                IFNULL(t.amount,0) AS  amount,
				(select get_yearName(year_id) from tbl_fee_type_plan ftp where ftp.type_plan_id = t.type_plan_id)as year_id

  
 FROM  
                
        tbl_fee_transactions t

 WHERE
                branch_id = 1
 AND 
                status= '0'
 AND
                date(t.transaction_date) >= date(p_fromdate)
 AND
                date(t.transaction_date) <= date(p_todate)
   
 UNION ALL   

 SELECT 
                get_studentName(mt.byer_id)as Student_Name,
                get_courseName((select sa.course_id from tbl_student_academic sa where sa.student_id = mt.byer_id and sa.status='0' ORDER BY student_academic_id ASC LIMIT 1))  AS CLASS,
                DATE_FORMAT(mt.transaction_date,'%d %b %Y')
 AS             transaction_date,
                mt.system_receipt_number,
                IFNULL(mt.amount,0) AS  amount
				,
                get_yearName(mt.year_id) as year_id
 FROM  
                
        tbl_mis_transactions  mt

 WHERE
                mt.branch_id = p_branch_id
 AND
                mt.status= '0'
 AND
                date(mt.transaction_date) >= date(p_fromdate)
 AND
                date(mt.transaction_date) <= date(p_todate)
 
        
 UNION ALL
    SELECT 
                get_studentName(adt.studnet_id)as Student_Name,
                get_courseName((select sa.course_id from tbl_student_academic sa where sa.student_id = adt.studnet_id and sa.status='0' ORDER BY student_academic_id ASC LIMIT 1))  AS CLASS,
                DATE_FORMAT(adt.transaction_date,'%d %b %Y')
 AS             transaction_date,
                adt.system_receipt_number,
                IFNULL(adt.amount,0) AS  amount
				,
                (SELECT get_yearName(sdf.year_id) FROM tbl_student_admission_fee sdf where sdf.admission_fee_id = adt.admission_fee_id and sdf.student_id = adt.studnet_id )as year_id
 FROM  
                
        tbl_admission_fee_transactions  adt

 WHERE
                adt.branch_id = p_branch_id
 AND
                adt.status= '0'
 AND
                date(adt.transaction_date) >= date(p_fromdate)
 AND
                date(adt.transaction_date) <= date(p_todate)

                UNION ALL
    SELECT 
                get_studentName(tmp.student_id)as Student_Name,
                get_courseName((select sa.course_id from tbl_student_academic sa where sa.student_id = tmp.student_id and sa.status='0' ORDER BY student_academic_id ASC LIMIT 1))  AS CLASS,
                DATE_FORMAT(tmp.transaction_date,'%d %b %Y')
 AS             transaction_date,
                tmp.system_receipt_number,
                IFNULL(tmp.amount,0) AS  amount
                ,
                (select get_yearName(year_id) from tbl_fee_type_plan ftp where ftp.type_plan_id = tmp.type_plan_id)as year_id
 FROM  
                
        tbl_student_tempcredit  tmp

 WHERE
                date(tmp.transaction_date) >= date(p_fromdate)
 AND
                date(tmp.transaction_date) <= date(p_todate)





                )  a  
 WHERE 
            amount is not null   
 GROUP BY 
                Student_Name,
                system_receipt_number,
                CLASS,
                transaction_date  asc
                with rollup
having ISNULL(system_receipt_number) = ISNULL(transaction_date)
and   ISNULL(Student_Name) =ISNULL(system_receipt_number) and  ISNULL(Student_Name) = ISNULL(transaction_date) ;  
              
                
                
                
END IF;     


 
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_feeCustomCollectionReport` (IN `p_year_id` INT, IN `p_branch_id` INT, IN `p_report_type` INT, IN `p_terms` VARCHAR(250))  BEGIN 
IF p_report_type = 15 Then

                SELECT 
                        courseName,
                        sum(Actual_amount)
                As      Amount,
                        sum(concession) 
                As      concession,
                        sum(discount)
                As      discount,
                        sum(Actual_amount-concession-discount)
                As      final_amount
                        
                FROM    (       
                
                SELECT 
                promotion_id,
                        student_id,
                        get_courseName((SELECT 
                                    course_id 
                         FROM 
                                    tbl_temp_student_promotions ac 
                         WHERE 
                                    ac.promotion_id = sp.promotion_id  
                         AND        
                                    ac.academic_year = sp.year_id
                        LIMIt 0,1))
                AS      courseName,
                        get_feeTypeamount(fee_type_id) 
                AS      
                        Actual_amount,
                        IFNULL(get_S_F_concession (sp.type_plan_id,get_feeTypeamount(fee_type_id),student_id,sp.branch_id,sp.year_id),0)
                
                AS      concession,
                IFNULL(get_S_F_discount (sp.type_plan_id,student_id,sp.branch_id,sp.year_id),0)
        AS 
                discount,
                        get_feeTypeName(sp.type_plan_id)
                AS
                        feetypename,
                        sp.type_plan_id 
                FROM 
                        tbl_temp_student_plan_type sp
                INNER JOIN
                        tbl_fee_type_plan  tp
                ON
                        sp.type_plan_id = tp.type_plan_id
                            
                WHERE 
                        sp.branch_id = p_branch_id
                AND 
                        sp.year_id = p_year_id
                AND
                        sp.mode_flag = 'credit'
                 ) a 
                GROUP BY courseName with rollup; 
                
                
ELSEIF p_report_type = 16  THEN

                SELECT
                        student_name,
                        admission_number,
                        courseName,
                        sum(Actual_amount)
                As      Amount,
                        sum(concession) 
                As      concession,
                        sum(discount)
                As      discount,
                        sum(Actual_amount-concession-discount)
                As      final_amount
                FROM (
                SELECT 
                        (get_studentName(student_id))
                AS      student_name,
                        admission_number,
                        get_courseName((SELECT 
                                    course_id 
                         FROM 
                                    tbl_temp_student_promotions ac 
                         WHERE 
                                    ac.promotion_id = sp.promotion_id 
                         AND        
                                    ac.academic_year = sp.year_id
                        LIMIt 0,1))
                AS      courseName,
                        get_feeTypeamount(fee_type_id) 
                AS      
                        Actual_amount,
                        IFNULL(get_S_F_concession (sp.type_plan_id,get_feeTypeamount(fee_type_id),student_id,sp.branch_id,sp.year_id),0)
                
                AS      concession,
                IFNULL(get_S_F_discount (sp.type_plan_id,student_id,sp.branch_id,sp.year_id),0)
        AS 
                discount,
                        get_feeTypeName(sp.type_plan_id)
                AS
                        feetypename,
                        sp.type_plan_id 
                FROM 
                        tbl_temp_student_plan_type sp
                INNER JOIN
                        tbl_fee_type_plan  tp
                ON
                        sp.type_plan_id = tp.type_plan_id
                            
                WHERE 
                        sp.branch_id = p_branch_id
                AND 
                        sp.year_id = p_year_id               
                AND
                        mode_flag = 'credit'
                ) a
                GROUP BY student_name,
                        admission_number,courseName ; 
ELSEIF p_report_type = 9  THEN
 
 
                SELECT 
                        courseName,
                        count(distinct promotion_id)
                As      Student_count,
                        sum(Actual_amount)
                As        Amount,
                        sum(concession) 
                As        concession,
                        sum(discount)
                As         discount,
                        sum(Actual_amount-concession-discount)
                As      final_amount
                        
                FROM (        
                
                SELECT 
                        promotion_id,
                        student_id,
                        get_courseName((SELECT 
                                    course_id 
                         FROM 
                                    tbl_temp_student_promotions ac 
                         WHERE 
                                   ac.promotion_id = sp.promotion_id 
                         AND        
                                    ac.academic_year = sp.year_id
                        LIMIt 0,1))
                AS        courseName,
                        get_feeTypeamount(fee_type_id) 
                AS      
                        Actual_amount,
                        IFNULL(get_S_F_concession (sp.type_plan_id,get_feeTypeamount(fee_type_id),student_id,sp.branch_id,sp.year_id),0)
                
                AS      concession,
                        IFNULL(get_S_F_discount (sp.type_plan_id,student_id,sp.branch_id,sp.year_id),0)
                AS 
                        discount,
                        get_feeTypeName(sp.type_plan_id)
                AS
                        feetypename,
                        sp.type_plan_id 
                FROM 
                        tbl_temp_student_plan_type sp
                INNER JOIN
                        tbl_fee_type_plan  tp
                ON
                        sp.type_plan_id = tp.type_plan_id
                            
                WHERE 
                        sp.branch_id = p_branch_id 
                AND 
                        sp.year_id = p_year_id
                AND
                        mode_flag = 'credit'
                ) a 
                GROUP BY courseName with rollup;

ELSEIF p_report_type = 10  THEN

SELECT 
                        courseName,
                        count(distinct promotion_id)
                As         Student_count,
                
                        sum( Case WHEN feetypename = 'Facilities and Infrastructure Fee' Then Actual_amount else 0 end)
                As        Admission_fee_Amount,
                        sum( Case WHEN feetypename = 'Facilities and Infrastructure Fee' THEN concession else 0 end ) 
                As        Admission_fee_concession,
                        sum( Case WHEN feetypename = 'Facilities and Infrastructure Fee' THEN discount else 0 end )
                As         Admission_fee_discount,
                        sum( Case WHEN feetypename = 'Facilities and Infrastructure Fee' THEN Actual_amount-concession-discount else 0 end)
                As      Admission_fee_final_amount,
                        sum( Case WHEN feetypename = 'ADF' Then Actual_amount else 0 end)
                As        ADF_Amount,
                        sum( Case WHEN feetypename = 'ADF' THEN concession else 0 end ) 
                As        ADF_concession,
                        sum( Case WHEN feetypename = 'ADF' THEN discount else 0 end )
                As         ADF_discount,
                        sum( Case WHEN feetypename = 'ADF' THEN Actual_amount-concession-discount else 0 end)
                As      ADF_final_amount,
                        sum( Case WHEN feetypename = 'ANF' Then Actual_amount else 0 end)
                As        ANF_Amount,
                        sum( Case WHEN feetypename = 'ANF' THEN concession else 0 end ) 
                As        ANF_concession,
                        sum( Case WHEN feetypename = 'ANF' THEN discount else 0 end )
                As         ANF_discount,
                        sum( Case WHEN feetypename = 'ANF' THEN Actual_amount-concession-discount else 0 end)
                As      ANF_final_amount,
                        sum( Case WHEN feetypename = 'CDF' Then Actual_amount else 0 end)
                As        CDF_Amount,
                        sum( Case WHEN feetypename = 'CDF' THEN concession else 0 end ) 
                As        CDF_concession,
                        sum( Case WHEN feetypename = 'CDF' THEN discount else 0 end )
                As         CDF_discount,
                        sum( Case WHEN feetypename = 'CDF' THEN Actual_amount-concession-discount else 0 end)
                As      CDF_final_amount,
                        sum( Case WHEN feetypename = 'TF' Then Actual_amount else 0 end)
                As        TF_Amount,
                        sum( Case WHEN feetypename = 'TF' THEN concession else 0 end ) 
                As        TF_concession,
                        sum( Case WHEN feetypename = 'TF' THEN discount else 0 end )
                As         TF_discount,
                        sum( Case WHEN feetypename = 'TF' THEN Actual_amount-concession-discount else 0 end)
                As      TF_final_amount,
                        sum( Case WHEN feetypename = 'DF' Then Actual_amount else 0 end)
                As        DF_Amount,
                        sum( Case WHEN feetypename = 'DF' THEN concession else 0 end ) 
                As        DF_concession,
                        sum( Case WHEN feetypename = 'DF' THEN discount else 0 end )
                As         DF_discount,
                        sum( Case WHEN feetypename = 'DF' THEN Actual_amount-concession-discount else 0 end)
                As      DF_final_amount,
                        sum( Case WHEN feetypename = 'UBS' Then Actual_amount else 0 end)
                As        UBS_Amount,
                        sum( Case WHEN feetypename = 'UBS' THEN concession else 0 end ) 
                As        UBS_concession,
                        sum( Case WHEN feetypename = 'UBS' THEN discount else 0 end )
                As         UBS_discount,
                        sum( Case WHEN feetypename = 'UBS' THEN Actual_amount-concession-discount else 0 end)
                As      UBS_final_amount,
                        sum( Case WHEN feetypename = 'TPF' Then Actual_amount else 0 end)
                As        TPF_Amount,
                        sum( Case WHEN feetypename = 'TPF' THEN concession else 0 end ) 
                As        TPF_concession,
                        sum( Case WHEN feetypename = 'TPF' THEN discount else 0 end )
                As         TPF_discount,
                        sum( Case WHEN feetypename = 'TPF' THEN Actual_amount-concession-discount else 0 end)
                As      TPF_final_amount,
                        sum( Case WHEN feetypename = 'DCF' Then Actual_amount else 0 end)
                As        DCF_Amount,
                        sum( Case WHEN feetypename = 'DCF' THEN concession else 0 end ) 
                As        DCF_concession,
                        sum( Case WHEN feetypename = 'DCF' THEN discount else 0 end )
                As         DCF_discount,
                        sum( Case WHEN feetypename = 'DCF' THEN Actual_amount-concession-discount else 0 end)
                As      DCF_final_amount,
                        sum( Actual_amount)
                As        Total_Amount,
                        sum(concession) 
                As        Total_concession,
                        sum(discount)
                As         Total_discount,
                        sum( Actual_amount-concession-discount )
                As      Total_final_amount
                
              FROM
                 (SELECT
                        promotion_id,
                        student_id,
                        get_courseName((SELECT 
                                    course_id 
                         FROM 
                                    tbl_temp_student_promotions ac 
                         WHERE 
                                   ac.promotion_id = sp.promotion_id 
                         AND        
                                    ac.academic_year = sp.year_id
                        LIMIt 0,1))
                AS        courseName,
                        get_feeTypeamount(fee_type_id) 
                AS      
                        Actual_amount,
                        IFNULL(get_S_F_concession (sp.type_plan_id,get_feeTypeamount(fee_type_id),student_id,sp.branch_id,sp.year_id),0)
                
                AS      concession,
                IFNULL(get_S_F_discount (sp.type_plan_id,student_id,sp.branch_id,sp.year_id),0)
        AS 
                discount,
                        get_feeTypeCode(sp.type_plan_id)
                AS
                        feetypename,
                        sp.type_plan_id 
                FROM 
                        tbl_temp_student_plan_type sp
                INNER JOIN
                        tbl_fee_type_plan  tp
                ON
                        sp.type_plan_id = tp.type_plan_id
                            
                WHERE 
                        sp.branch_id = p_branch_id
                AND 
                        sp.year_id = p_year_id
                AND
                        mode_flag = 'credit'
                ) a 
            GROUP BY courseName with rollup;
END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_feeDue` (IN `p_year_id` INT, IN `p_branch_id` INT, IN `p_report_type` INT, IN `p_to_date` DATE)  BEGIN
 
IF p_report_type = 7 Then


SELECT
            studentName,
            admissionytype,
            admission_number,
            Course_Name,
            Section_Name,
            feetypename,
            SUM(amount)
AS          amount,
            sum(paid_amount)
AS          paid_amount,
            sum(discuount)
AS          discuount,
            SUM(amount-paid_amount-discuount)
AS          due_amount
            
FROM
        (
SELECT 
            get_studentName(s.student_id)
AS          studentName,
            (SELECT (CASE WHEN x.year_id = s.year_id THEN 'New Admission' ELSE 'Old Admission' END) as admissionytype  FROM tbl_student x WHERE x.student_id = s.student_id)
AS          admissionytype,
            s.admission_number,
            get_courseName(a.course_id)
            Course_Name,
            getSectionName(a.section_id)
AS
            Section_Name,            
            get_feeTypeName(type_plan_id)
AS          feetypename,
            IFNULL((SELECT 
                            SUM(IFNULL(amount,0))
                
                        FROM 
                                    tbl_fee_transactions pt
                    
                        WHERE   
                                    pt.studnet_id = s.student_id
                        AND
                                    pt.type_plan_id = s.type_plan_id
                        AND
                                    pt.status ='0'
                        AND 
                            date(transaction_date) <=date(p_to_date)),0)
AS           paid_amount ,  
             (SELECT   
                        get_feeTypeamount(fee_type_id)
              FROM      
                        tbl_fee_type_plan tp where tp.type_plan_id = s.type_plan_id)
AS
                Amount,
             IFNULL(get_S_F_discount(type_plan_id,s.student_id,s.branch_id,s.year_id),0)
As           discuount
      
FROM 
             tbl_student_plan_type s
INNER JOIN
            tbl_student_academic a
ON
            s.student_id = a.student_id
AND
            s.admission_number = a.admission_number
AND
            s.year_id = a.year_id
            
WHERE
        
            a.branch_id = p_branch_id
AND          
            a.year_id = p_year_id
  AND       
            s.status='0' 
 AND 
            a.status='0'
 AND 
             mode_flag = 'credit')a
  GROUP BY 
            studentName,
            admissionytype,
            admission_number,
            Course_Name,
            Section_Name,
            feetypename ;

ELSEIF p_report_type = 19  THEN

select 
    course_name,
    
    sum(amount) Total_Amount,
    sum(discuount) AS discount_amount,
    sum(paid_amount) AS paid_amount,
    SUM(amount-paid_amount-discuount) AS due_amount
    from (
            select spt.student_id,spt.type_plan_id,sa.course_id,
                    get_courseName(sa.course_id) AS course_name,
                    get_feeTypeamount((select fee_type_id 
                                        from tbl_fee_type_plan ft 
                                        WHERE  ft.status = '0' 
                                        AND ft.type_plan_id = spt.type_plan_id 
                                    )) AS amount,
                    IFNULL((SELECT 
                            SUM(IFNULL(pt.amount,0))
                
                        FROM 
                                    tbl_fee_transactions pt
                    
                        WHERE   
                                    pt.studnet_id = spt.student_id
                          AND
                                     pt.type_plan_id = spt.type_plan_id
                         AND
                                     pt.status ='0'
                         AND 
                             date(transaction_date) <=date(p_to_date)
                            ),0) AS paid_amount,
                    IFNULL(get_S_F_discount(spt.type_plan_id,spt.student_id,sa.branch_id,sa.year_id),0) As discuount
                from tbl_student_plan_type spt
            INNER JOIN tbl_student_academic sa 
                on
                    sa.student_id = spt.student_id
            where spt.status='0'
            AND sa.status = '0'
            AND spt.year_id = p_year_id
            AND sa.year_id = p_year_id 
            AND sa.branch_id = p_branch_id
            AND spt.mode_flag = 'credit'
            AND spt.type_plan_id not in (select ftp.type_plan_id from tbl_fee_type_plan ftp where ftp.fee_type_id IN (select ft.fee_type_id from tbl_fee_type ft WHERE ft.fee_type_code='APF' AND ft.status='0' AND  ft.year_id = p_year_id) AND ftp.year_id=p_year_id)
        UNION ALL
         SELECT sd.student_id,0 as type_plan_id,sa.course_id,
                    get_courseName(sa.course_id) AS course_name,
                    sd.actual_fee AS amount,
                    IFNULL((SELECT 
                            SUM(IFNULL(pt.amount,0))
                
                        FROM 
                                    tbl_admission_fee_transactions pt
                    
                        WHERE   
                                    pt.studnet_id = sd.student_id
                          AND
                                     pt.admission_fee_id = sd.admission_fee_id
                         AND
                                     pt.status ='0'
                         AND 
                             date(transaction_date) <=date(p_to_date)
                            ),0) AS paid_amount,
                            (ifnull(sd.discount_1,0)+ifnull(sd.discount_2,0)+ifnull(sd.discount_3,0))as discuount
        FROM tbl_student_admission_fee sd  
         INNER JOIN tbl_student_academic sa 
                on
                    sa.student_id = sd.student_id
         where sd.branch_id = p_branch_id
         AND sd.year_id = p_year_id
        AND sd.status = '0'
        
        )a   group by course_name;




ELSEIF p_report_type = 8  THEN


SELECT
            studentName,
            admissionytype,
            admission_number,
            Course_Name,
            Section_Name,
            SUM(amount)
AS          amount,
            sum(paid_amount)
AS          paid_amount,
            sum(discuount)
AS          discuount,
            SUM(amount-paid_amount-discuount)
AS          due_amount
            
FROM
        (
SELECT 
            get_studentName(s.student_id)
AS          studentName,
            (SELECT (CASE WHEN x.year_id = s.year_id THEN 'New Admission' ELSE 'Old Admission' END) as admissionytype  FROM tbl_student x WHERE x.student_id = s.student_id)
AS          admissionytype,
            s.admission_number,
            get_courseName(a.course_id)
            Course_Name,
            getSectionName(a.section_id)
AS
            Section_Name,            
            type_plan_id,
            IFNULL((SELECT 
                            SUM(IFNULL(amount,0))
                
                        FROM 
                                    tbl_fee_transactions pt
                    
                        WHERE   
                                    pt.studnet_id = s.student_id
                        AND
                                    pt.type_plan_id = s.type_plan_id
                        AND
                                    pt.status ='0'
                        AND 
                            date(transaction_date) <=date(p_to_date)),0)
AS           paid_amount ,  
             (SELECT   
                        get_feeTypeamount(fee_type_id)
              FROM      
                        tbl_fee_type_plan tp where tp.type_plan_id = s.type_plan_id)
AS
                Amount,
             IFNULL(get_S_F_discount(type_plan_id,s.student_id,s.branch_id,s.year_id),0)
As           discuount
      
FROM 
             tbl_student_plan_type s
INNER JOIN
            tbl_student_academic a
ON
            s.student_id = a.student_id
AND
            s.year_id = a.year_id
            
WHERE
        
            a.branch_id = p_branch_id
AND          
            a.year_id = p_year_id
AND       
            s.status='0' 
AND 
            a.status='0'
AND 
            mode_flag = 'credit')a
GROUP BY 
            studentName,
            admissionytype,
            admission_number,
            Course_Name,
            Section_Name;

ELSEIF p_report_type = 20  THEN

DROP TEMPORARY TABLE IF exists report_temp_due;

CREATE TEMPORARY TABLE report_temp_due as SELECT
            studentName,
            admissionytype,
            admission_number,
            coursename_section,
            f,
            SUM(amount)
AS            A_A,
            sum(paid_amount)
AS            P_A,
            sum(discuount)
AS            di,
            SUM(amount-paid_amount-discuount)
AS            D_A
            
FROM
        (
SELECT 
            get_studentName(s.student_id)
AS            studentName,
            (SELECT (CASE WHEN x.year_id = s.year_id THEN 'New Admission' ELSE 'Old Admission' END) as admissionytype  FROM tbl_student x WHERE x.student_id = s.student_id)
AS          admissionytype,
            s.admission_number,
            concat(get_courseName(course_id) ,'/', getSectionName(section_id))
AS          coursename_section,
            get_feeTypeCode(type_plan_id)
AS          f,
            IFNULL((SELECT 
                            SUM(IFNULL(amount,0))
                
                        FROM 
                                    tbl_fee_transactions pt
                    
                        WHERE    
                                    pt.studnet_id = s.student_id
                        AND
                                    pt.type_plan_id = s.type_plan_id
                        AND
                                    pt.status ='0'
                        AND 
                            date(transaction_date) <= date(p_to_date)),0)
AS             paid_amount ,  
             (SELECT   
                        get_feeTypeamount(fee_type_id)
              FROM         
                        tbl_fee_type_plan tp where tp.type_plan_id = s.type_plan_id)
AS
                Amount,
             IFNULL(get_S_F_discount(type_plan_id,s.student_id,s.branch_id,s.year_id),0)
As             discuount
      
FROM 
            tbl_student_plan_type s
INNER JOIN
            tbl_student_academic a
ON
            s.student_id = a.student_id
AND
            s.admission_number = a.admission_number
AND
             s.year_id = a.year_id
WHERE
        
            a.branch_id = p_branch_id
AND     
            a.year_id = p_year_id
AND       
            a.status='0' 
AND
            s.status='0'
AND 
             mode_flag = 'credit')a
  GROUP BY 
            studentName,
            admission_number,
            coursename_section,
            f    ;
 SET @sql = NULL;

DROP TEMPORARY TABLE IF exists report_temp_str;


CREATE TEMPORARY  table report_temp_str (str_max Text);

INSERT INTO report_temp_str 
SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'MAX(IF(f=', f,',A_A,0))A_', f,
      ',MAX(IF(f=', f,',P_A,0))P_', f,
      ',MAX(IF(f=', f,',di,0))di_', f,
      ',MAX(IF(f=', f,',D_A,0))Du_', f)
  )    
FROM report_temp_due; 

SET @sql = CONCAT('SELECT  studentName,admissionytype,admission_number, coursename_section, ', (SELECT str_max
  
FROM report_temp_str ), ' , sum(A_A) As Total_amount,sum(P_A) As Total_Paid, sum(di) As Total_discount, sum(D_A) As Total_due
                  FROM    report_temp_due
                  GROUP   BY studentName,admissionytype,admission_number');


PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt; 


ELSEIF p_report_type = 24  THEN

SET @Y =0;
SET @x = 0;
SET @D = 0;
SET @S = 0;
SET @Sif = 0;
SELECT 
            studentName,
            admission_number,
            Father_FullName,
            Father_mobile_number,
            Mother_last_name,
            Mother_mobile_number,
            coursename,
            section,
            sum(CASE WHEN Fee_type_code ='ADF' THEN  term_amount ELSE 0  END) ADF_AMount,
            sum(CASE WHEN Fee_type_code ='ADF' THEN  paid_amount ELSE 0  END) ADF_paid,
            sum(CASE WHEN Fee_type_code ='ADF' THEN  discount ELSE 0  END) ADF_discount,
            sum(CASE WHEN Fee_type_code ='ADF' THEN  (term_amount - paid_amount - discount) ELSE 0  END) ADF_Due,
            sum(CASE WHEN Fee_type_code ='ANF'  THEN  term_amount ELSE 0 END) ANF_amount,
            sum(CASE WHEN Fee_type_code ='ANF'  THEN  paid_amount ELSE 0 END) ANF_paid,
            sum(CASE WHEN Fee_type_code ='ANF'  THEN  discount  ELSE 0 END) ANF_discount,
            sum(CASE WHEN Fee_type_code ='ANF'  THEN  (term_amount - paid_amount -discount ) ELSE 0 END) ANF_due,
            sum(CASE WHEN Fee_type_code ='CDF'  THEN  term_amount ELSE 0 END)CDF_amount, 
            sum(CASE WHEN Fee_type_code ='CDF'  THEN  paid_amount ELSE 0 END) CDF_paid, 
            sum(CASE WHEN Fee_type_code ='CDF'  THEN  discount ELSE 0  END) CDF_discount, 
            sum(CASE WHEN Fee_type_code ='CDF'  THEN  (term_amount - paid_amount - discount) ELSE 0 END) CDF_due,
            sum(CASE WHEN Fee_type_code ='DCF' AND term_name ='term1' THEN  term_amount ELSE 0 END ) DCF_Amount_term1,
            sum(CASE WHEN Fee_type_code ='DCF' AND term_name ='term1' THEN  paid_amount ELSE 0 END ) DCF_paid_term1,
            sum(CASE WHEN Fee_type_code ='DCF' AND term_name ='term1' THEN  discount ELSE 0  END ) DCF_discount_term1,
            sum(CASE WHEN Fee_type_code ='DCF' AND term_name ='term1' THEN  (term_amount - paid_amount - discount) ELSE 0 END)DCF_due_term1,
            sum(CASE WHEN Fee_type_code ='DCF' AND term_name ='term2' THEN  term_amount ELSE 0 END ) DCF_Amount_term2,
            sum(CASE WHEN Fee_type_code ='DCF' AND term_name ='term2' THEN  paid_amount ELSE 0 END ) DCF_paid_term2,
            sum(CASE WHEN Fee_type_code ='DCF' AND term_name ='term2' THEN  discount ELSE 0 END ) DCF_discount_term2,
            sum(CASE WHEN Fee_type_code ='DCF' AND term_name ='term2' THEN  (term_amount - paid_amount - discount) ELSE 0 END ) DCF_due_term2,
            sum(CASE WHEN Fee_type_code ='DCF' AND term_name ='term3' THEN  term_amount ELSE 0 END ) DCF_Amount_term3,
            sum(CASE WHEN Fee_type_code ='DCF' AND term_name ='term3' THEN  paid_amount ELSE 0  END ) DCF_paid_term3,
            sum(CASE WHEN Fee_type_code ='DCF' AND term_name ='term3' THEN  discount ELSE 0  END ) DCF_discount_term3,
            sum(CASE WHEN Fee_type_code ='DCF' AND term_name ='term3' THEN  (term_amount - paid_amount - discount) ELSE 0 END ) DCF_due_term3,
            sum(CASE WHEN Fee_type_code ='DCF'  THEN  term_amount ELSE 0 END)  DCF_Amount,
            sum(CASE WHEN Fee_type_code ='DCF'  THEN  paid_amount ELSE 0 END)DCF_paid,
            sum(CASE WHEN Fee_type_code ='DCF'  THEN  discount ELSE 0 END)DCF_paid,
            sum(CASE WHEN Fee_type_code ='DCF'  THEN  (term_amount - paid_amount - discount) ELSE 0 END ) DCF_due,
            sum(CASE WHEN Fee_type_code ='DF' AND term_name ='term1' THEN  term_amount ELSE 0 END ) DF_Amount_term1,
            sum(CASE WHEN Fee_type_code ='DF' AND term_name ='term1' THEN  paid_amount ELSE 0 END ) DF_paid_term1,
            sum(CASE WHEN Fee_type_code ='DF' AND term_name ='term1' THEN  discount ELSE 0 END ) DF_discount_term1,
            sum(CASE WHEN Fee_type_code ='DF' AND term_name ='term1' THEN  (term_amount - paid_amount - discount ) ELSE 0 END ) DF_due_term1,
            sum(CASE WHEN Fee_type_code ='DF' AND term_name ='term2' THEN  term_amount ELSE 0 END ) DF_Amount_term2, 
            sum(CASE WHEN Fee_type_code ='DF' AND term_name ='term2' THEN  paid_amount ELSE 0 END ) DF_paid_term2,
            sum(CASE WHEN Fee_type_code ='DF' AND term_name ='term2' THEN  discount ELSE 0 END ) DF_discount_term2,
            sum(CASE WHEN Fee_type_code ='DF' AND term_name ='term2' THEN  (term_amount - paid_amount) ELSE 0 END ) DF_due_term2, 
            sum(CASE WHEN Fee_type_code ='DF' AND term_name ='term3' THEN  term_amount ELSE 0 END ) DF_Amount_term3, 
            sum(CASE WHEN Fee_type_code ='DF' AND term_name ='term3' THEN  paid_amount  ELSE 0 END ) DF_paid_term3,
            sum(CASE WHEN Fee_type_code ='DF' AND term_name ='term3' THEN  discount  ELSE 0 END ) DF_discount_term3,
            sum(CASE WHEN Fee_type_code ='DF' AND term_name ='term3' THEN  (term_amount - paid_amount - discount) ELSE 0 END ) DF_due_term3,
            sum(CASE WHEN Fee_type_code ='DF' THEN  term_amount ELSE 0 END) DF_Amount, 
            sum(CASE WHEN Fee_type_code ='DF'  THEN  paid_amount ELSE 0 END) DF_paid,
            sum(CASE WHEN Fee_type_code ='DF'  THEN  discount ELSE 0 END) DF_discount,
            sum(CASE WHEN Fee_type_code ='DF'  THEN  (term_amount - paid_amount - discount) ELSE 0 END) DF_due,
            sum(CASE WHEN Fee_type_code ='TF' AND term_name ='term1' THEN  term_amount ELSE 0 END ) TF_amount_term1, 
            sum(CASE WHEN Fee_type_code ='TF' AND term_name ='term1' THEN  paid_amount ELSE 0 END ) TF_paid_term1, 
            sum(CASE WHEN Fee_type_code ='TF' AND term_name ='term1' THEN  discount  ELSE 0 END ) TF_discount_term1, 
            sum(CASE WHEN Fee_type_code ='TF' AND term_name ='term1' THEN  (term_amount - paid_amount - discount) ELSE 0 END ) TF_due_term1,
            sum(CASE WHEN Fee_type_code ='TF' AND term_name ='term2' THEN  term_amount ELSE 0 END ) TF_amount_term2,
            sum(CASE WHEN Fee_type_code ='TF' AND term_name ='term2' THEN  paid_amount ELSE 0 END ) TF_paid_term2,
            sum(CASE WHEN Fee_type_code ='TF' AND term_name ='term2' THEN  discount  ELSE 0 END ) TF_discount_term2,
            sum(CASE WHEN Fee_type_code ='TF' AND term_name ='term2' THEN  (term_amount - paid_amount-discount) ELSE 0 END ) TF_due_term2,
            sum(CASE WHEN Fee_type_code ='TF' AND term_name ='term3' THEN  term_amount ELSE 0 END ) TF_amount_term3,
            sum(CASE WHEN Fee_type_code ='TF' AND term_name ='term3' THEN  paid_amount ELSE 0 END ) TF_paid_term3,
            sum(CASE WHEN Fee_type_code ='TF' AND term_name ='term3' THEN  discount ELSE 0 END ) TF_discount_term3,
            sum(CASE WHEN Fee_type_code ='TF' AND term_name ='term3' THEN  (term_amount - paid_amount - discount) ELSE 0 END ) TF_due_term3,
            sum(CASE WHEN Fee_type_code ='TF'  THEN  term_amount ELSE 0 END) TF_amount,
            sum(CASE WHEN Fee_type_code ='TF'  THEN  paid_amount ELSE 0 END)TF_paid,
            sum(CASE WHEN Fee_type_code ='TF'  THEN  discount ELSE 0 END)TF_discount,
            sum(CASE WHEN Fee_type_code ='TF' THEN  (term_amount - paid_amount - discount ) ELSE 0 END) TF_due,
            sum(CASE WHEN Fee_type_code ='TPF' AND term_name ='term1' THEN  term_amount ELSE 0 END ) TPF_amount_term1,
            sum(CASE WHEN Fee_type_code ='TPF' AND term_name ='term1' THEN  paid_amount ELSE 0 END ) TPF_paid_term1, 
            sum(CASE WHEN Fee_type_code ='TPF' AND term_name ='term1' THEN  discount ELSE 0 END ) TPF_discount_term1, 
            sum(CASE WHEN Fee_type_code ='TPF' AND term_name ='term1' THEN  (term_amount - paid_amount - discount) ELSE 0 END ) TPF_due_term1,
            sum(CASE WHEN Fee_type_code ='TPF' AND term_name ='term2' THEN  term_amount ELSE 0 END ) TPF_amount_term2,
            sum(CASE WHEN Fee_type_code ='TPF' AND term_name ='term2' THEN  paid_amount ELSE 0 END ) TPF_paid_term2,
            sum(CASE WHEN Fee_type_code ='TPF' AND term_name ='term2' THEN  discount ELSE 0 END ) TPF_discount_term2,
            sum(CASE WHEN Fee_type_code ='TPF' AND term_name ='term2' THEN  (term_amount - paid_amount - discount) ELSE 0 END ) TPF_due_term2,
            sum(CASE WHEN Fee_type_code ='TPF' AND term_name ='term3' THEN  term_amount ELSE 0 END ) TPF_amount_term3,
            sum(CASE WHEN Fee_type_code ='TPF' AND term_name ='term3' THEN  paid_amount  ELSE 0 END) TPF_paid_term3,
            sum(CASE WHEN Fee_type_code ='TPF' AND term_name ='term3' THEN  discount ELSE 0 END) TPF_discount_term3,
            sum(CASE WHEN Fee_type_code ='TPF' AND term_name ='term3' THEN  (term_amount - paid_amount - discount) ELSE 0 END ) TPF_due_term3,
            sum(CASE WHEN Fee_type_code ='TPF' THEN  term_amount  ELSE 0 END ) TPF_amount,
            sum(CASE WHEN Fee_type_code ='TPF' THEN  paid_amount  ELSE 0 END) TPF_paid,
            sum(CASE WHEN Fee_type_code ='TPF' THEN  discount ELSE 0 END) TPF_discount,
            sum(CASE WHEN Fee_type_code = 'TPF'THEN  (term_amount - paid_amount - discount) ELSE 0 END) TPF_due,
            sum(CASE WHEN Fee_type_code ='UBS' AND term_name ='term1' THEN  term_amount ELSE 0 END ) UBS_amount_term1,
            sum(CASE WHEN Fee_type_code ='UBS' AND term_name ='term1' THEN  paid_amount ELSE 0  END ) UBS_paid_term1,
            sum(CASE WHEN Fee_type_code ='UBS' AND term_name ='term1' THEN  discount ELSE 0 END ) UBS_discount_term1,
            sum(CASE WHEN Fee_type_code ='UBS' AND term_name ='term1' THEN  (term_amount - paid_amount - discount) ELSE 0 END ) UBS_due_term1,
            sum(CASE WHEN Fee_type_code ='UBS' THEN  term_amount ELSE 0 END) UBS_amount,
            sum(CASE WHEN Fee_type_code ='UBS' THEN  paid_amount  ELSE 0 END) UBS_paid,
            sum(CASE WHEN Fee_type_code ='UBS' THEN  discount ELSE 0 END) UBS_discount,
            sum(CASE WHEN Fee_type_code ='UBS' THEN  (term_amount - paid_amount - discount) ELSE 0 END) UBS_Due,
            sum(term_amount)Total_amount,
            sum(paid_amount) Total_paid,
            sum(discount) Total_discount,
            sum(term_amount - paid_amount - discount ) Toal_Due

FROM 
(SELECT
                 student_id,
                 studentName,
                 admission_number,
                 coursename,
                 section,
                 type_plan_id,
                 fee_type_id,
                 Fee_type_code,
                 terms_id,
                 term_name,
                 term_amount,
                IFNULL((SELECT 
                            SUM(IFNULL(amount,0))
                
                        FROM 
                                    tbl_fee_transactions pt
                    
                        WHERE   
                                    pt.studnet_id = f.student_id
                        AND
                                    pt.type_plan_id = f.type_plan_id
                        AND
                                    pt.terms_id = f.terms_id
                        AND 
                            date(transaction_date) <=date(p_to_date)
                        AND pt.status ='0' AND pt.application_id =0 AND pt.type_plan_id NOT IN(select tfp.type_plan_id from tbl_fee_type_plan tfp where tfp.status='0' AND  tfp.fee_type_id = (select tft.fee_type_id FROM  tbl_fee_type tft where tft.fee_type_code = 'APF' AND tft.status = '0' AND tft.branch_id = p_branch_id AND tft.year_id= p_year_id ))),0)
AS                      paid_amount,
                (CASE WHEN type_plan_id <> @S or (type_plan_id = @S and  student_id <> @Sif ) THEN  @D:= IFNULL(get_S_F_discount(type_plan_id,student_id,branch_id,year_id),0)
                                ELSE @D:= @D  end ) balance_discount,
                          (CASE WHEN   term_amount >= @D THEN @D ELSE   term_amount end ) discount,
                          (CASE WHEN   term_amount >= @D THEN @D:= 0 ELSE @D:= @D - term_amount end ) db,
                           @S:= type_plan_id ,
                           @Sif:=student_id  


FROM

                 ( SELECT
                             student_id,
                             studentName,
                             admission_number,
                             coursename,
                             section,
                             a.type_plan_id,
                             fee_type_id,
                             Fee_type_code,
                             terms_id,
                             term_name,
                             term_amount,
                             a.branch_id,
                             a.year_id
                    FROM 

                    (SELECT 
                                s.student_id,
                                get_studentName(s.student_id)
                    AS            studentName,
                                (SELECT (CASE WHEN x.year_id = s.year_id THEN 'New Admission' ELSE 'Old Admission' END) as admissionytype  FROM tbl_student x WHERE x.student_id = s.student_id)
                    AS          admissionytype,
                                s.admission_number,
                                get_courseName(course_id) AS coursename ,
                                getSectionName(section_id) AS section ,
                                type_plan_id ,
                                s.year_id,
                                a.branch_id
                                
                    FROM 
                                tbl_student_plan_type s
                    INNER JOIN
                                tbl_student_academic a
                    ON
                                s.student_id = a.student_id
                    AND
                                s.admission_number = a.admission_number
                    AND
                                s.year_id = a.year_id
                    WHERE
                            
                                a.branch_id = p_branch_id
                    AND     
                                a.year_id = p_year_id
                    AND       
                                a.status='0' 
                    AND
                                s.status='0'
                    AND 
                                 mode_flag = 'credit') a
INNER JOIN 
                    (SELECT 
                                type_plan_id,
                                fee_type_id ,
                                (SELECT 
                                            fee_type_code 
                                 FROM 
                                            tbl_fee_type ft
                                 WHERE      ft.fee_type_id = f.fee_type_id) 
                    AS           Fee_type_code,
                                 terms_id,
                                 term_name,
                                 sum(term_amount) term_amount
                            
                   FROM     
                                tbl_fee_type_plan f 
                   INNER JOIN 
                         
                               ( SELECT         
                                            terms_id,
                                            type_id,
                                            IFNULL(amount,0) as term_amount ,
                                            (SELECT   
                                                        fee_type_code 
                                             FROM 
                                                        tbl_fee_type ft
                                             WHERE      ft.fee_type_id = fc.type_id) 
                                AS           Fee_type_code,
                                            (CASE WHEN type_id = @Y 
                                                   THEN   Concat('term',@x:=@x+1)  
                                                  ELSE Concat('term',@x:=1) end )term_name,
                                @Y:= type_id 
                FROM    
            tbl_fee_terms fc) t 
                    ON 
                                f.fee_type_id = t.type_id  
                   WHERE 
                                f.year_id = p_year_id
                    AND         t.type_id NOT IN(select tft.fee_type_id FROM  tbl_fee_type tft where tft.fee_type_code = 'APF' AND tft.status = '0' AND tft.branch_id = p_branch_id AND tft.year_id= p_year_id) 
                   GROUP BY
                                type_plan_id,
                                fee_type_id ,
                                fee_type_code,
                                terms_id) b
                                
ON
        a.type_plan_id = b.type_plan_id
        
ORDER BY    a.student_id,
            admission_number,
            a.type_plan_id,
            fee_type_id,terms_id DESC) f) x
INNER JOIN 
                (SELECT 
                   e.student_id,
                   concat(e.parent_firstname,' ', e.parent_lastname) AS Father_FullName, 
                   e.parent_mobile_number AS Father_mobile_number              
                 FROM 
                    tbl_student_parents e WHERE e.relation_type = 1 and e.status ='0' ) f
ON 
                 x.student_id = f.student_id
LEFT JOIN
                (
                SELECT 
                     d.student_id,
                     concat(d.parent_firstname,' ', d.parent_lastname) AS Mother_last_name,
                     d.parent_mobile_number AS Mother_mobile_number
                FROM
                    tbl_student_parents d WHERE d.relation_type = 2 and d.status = '0' ) m
ON
                x.student_id = m.student_id 
GROUP BY 
            studentName,
            admission_number,
            Father_FullName,
            Father_mobile_number,
            Mother_last_name,
            Mother_mobile_number,
            coursename,
            section;


END IF;     
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_feeDue_new` (IN `p_year_id` INT, IN `p_branch_id` INT, IN `p_report_type` INT, IN `p_to_date` DATE)  BEGIN
 DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN

SELECT 'An error has occurred, operation rollbacked and the stored procedure was terminated';
END;
IF p_report_type = 7 Then


SELECT
			student_count,
			studentName,
            admissionytype,
            admission_number,
            Course_Name,
			Section_Name,
			feetypename,
            SUM(amount)
AS			amount,
            sum(paid_amount)
AS			paid_amount,
            sum(discuount)
AS			discuount,
			SUM(amount-paid_amount-discuount)
AS			due_amount
            
FROM
		(
SELECT 
			get_studentName(s.student_id)
AS			studentName,
			@z:=(CASE WHEN @s = s.student_id THEN @z+1 ELSE 1 END) AS student_count,
            @s:=s.student_id,
			(SELECT (CASE WHEN x.year_id = s.year_id THEN 'New Admission' ELSE 'Old Admission' END) as admissionytype  FROM tbl_student x WHERE x.student_id = s.student_id)
AS			admissionytype,
            s.admission_number,
            get_courseName(a.course_id)
            Course_Name,
            getSectionName(a.section_id)
AS
			Section_Name,            
			get_feeTypeName(type_plan_id)
AS			feetypename,
            IFNULL((SELECT 
							SUM(IFNULL(amount,0))
				
						FROM 
									tbl_fee_transactions pt
					
						WHERE	
									pt.studnet_id = s.student_id
						AND
									pt.type_plan_id = s.type_plan_id
						AND 
							transaction_date <=date(p_to_date)),0)
AS	         paid_amount ,  
			 (SELECT   
						get_feeTypeamount(fee_type_id)
			  FROM 		
						tbl_fee_type_plan tp where tp.type_plan_id = s.type_plan_id)
AS
				Amount,
             IFNULL(get_S_F_discount(type_plan_id,s.student_id,s.branch_id,s.year_id),0)
As			 discuount
      
FROM 
			 tbl_student_plan_type s
INNER JOIN
			tbl_student_academic a
ON
			s.student_id = a.student_id
AND
			s.year_id = a.year_id
            
WHERE
		
			a.branch_id = p_branch_id
AND	    	 
			a.year_id = p_year_id
  AND       
			s.status='0' 
 AND 
			a.status='0'
 AND 
			 mode_flag = 'credit')a
  GROUP BY 
			studentName,
            admissionytype,
            admission_number,
			Course_Name,
			Section_Name,
			feetypename	
 ORDER BY 
			admission_number,
            student_count desc;

ELSEIF p_report_type = 19  THEN


SELECT
			
            coursename,
			SUM(amount)
AS			amount,
            sum(paid_amount)
AS			paid_amount,
            sum(discuount)
AS			discuount,
			SUM(amount-paid_amount-discuount)
AS			due_amount
            
FROM
		(
SELECT 
			(SELECT  get_courseName(course_id)  FROM tbl_student_academic sa WHERE sa.student_academic_id = s.student_academic_id)
AS			coursename,
			get_feeTypeName(type_plan_id)
AS			feetypename,
            IFNULL((SELECT 
							SUM(IFNULL(amount,0))
				
						FROM 
									tbl_fee_transactions pt
					
						WHERE	
									pt.studnet_id = s.student_id
						AND
									pt.type_plan_id = s.type_plan_id
						AND 
							transaction_date <=date(p_to_date)),0)
AS	         paid_amount ,  
			 (SELECT   
						get_feeTypeamount(fee_type_id)
			  FROM 		
						tbl_fee_type_plan tp where tp.type_plan_id = s.type_plan_id)
AS
				Amount,
             IFNULL(get_S_F_discount(s.type_plan_id,s.student_id,s.branch_id,s.year_id),0)
As			 discuount
      
FROM 
			 tbl_student_plan_type s
INNER JOIN
			tbl_student_academic a
ON
			s.student_id = a.student_id
AND
			s.year_id = a.year_id
WHERE
		
			a.branch_id = p_branch_id
AND	    	 
			a.year_id = p_year_id
AND       
			a.status='0'
 AND
			b.status ='0'
  AND
			( application_id  is null or application_id =0)
  AND 
			 mode_flag = 'credit')a
  GROUP BY 
            coursename;




ELSEIF p_report_type = 8  THEN


SELECT
			studentName,
            admissionytype,
            admission_number,
            Course_Name,
			Section_Name,
            SUM(amount)
AS			amount,
            sum(paid_amount)
AS			paid_amount,
            sum(discuount)
AS			discuount,
			SUM(amount-paid_amount-discuount)
AS			due_amount
            
FROM
		(
SELECT 
			get_studentName(s.student_id)
AS			studentName,
			(SELECT (CASE WHEN x.year_id = s.year_id THEN 'New Admission' ELSE 'Old Admission' END) as admissionytype  FROM tbl_student x WHERE x.student_id = s.student_id)
AS			admissionytype,
            s.admission_number,
            get_courseName(a.course_id)
            Course_Name,
            getSectionName(a.section_id)
AS
			Section_Name,            
			type_plan_id,
            IFNULL((SELECT 
							SUM(IFNULL(amount,0))
				
						FROM 
									tbl_fee_transactions pt
					
						WHERE	
									pt.studnet_id = s.student_id
						AND
									pt.type_plan_id = s.type_plan_id
						AND 
							transaction_date <=date(p_to_date)),0)
AS	         paid_amount ,  
			 (SELECT   
						get_feeTypeamount(fee_type_id)
			  FROM 		
						tbl_fee_type_plan tp where tp.type_plan_id = s.type_plan_id)
AS
				Amount,
             IFNULL(get_S_F_discount(type_plan_id,s.student_id,s.branch_id,s.year_id),0)
As			 discuount
      
FROM 
			 tbl_student_plan_type s
INNER JOIN
			tbl_student_academic a
ON
			s.student_id = a.student_id
AND
			s.year_id = a.year_id
            
WHERE
		
			a.branch_id = p_branch_id
AND	    	 
			a.year_id = p_year_id
AND       
			s.status='0' 
AND 
			a.status='0'
AND 
			mode_flag = 'credit')a
GROUP BY 
			studentName,
            admissionytype,
            admission_number,
			Course_Name,
			Section_Name;

ELSEIF p_report_type = 20  THEN

DROP TEMPORARY TABLE IF exists report_temp_due;

CREATE TEMPORARY TABLE report_temp_due as SELECT
            studentName,
            admissionytype,
            admission_number,
            coursename_section,
            f,
            SUM(amount)
AS            A_A,
            sum(paid_amount)
AS            P_A,
            sum(discuount)
AS            di,
            SUM(amount-paid_amount-discuount)
AS            D_A
            
FROM
        (
SELECT 
            get_studentName(s.student_id)
AS            studentName,
			(SELECT (CASE WHEN x.year_id = s.year_id THEN 'New Admission' ELSE 'Old Admission' END) as admissionytype  FROM tbl_student x WHERE x.student_id = s.student_id)
AS			admissionytype,
            s.admission_number,
            concat(get_courseName(course_id) ,'/', getSectionName(section_id))
AS          coursename_section,
            get_feeTypeCode(type_plan_id)
AS          f,
            IFNULL((SELECT 
                            SUM(IFNULL(amount,0))
                
                        FROM 
                                    tbl_fee_transactions pt
                    
                        WHERE    
                                    pt.studnet_id = s.student_id
                        AND
                                    pt.type_plan_id = s.type_plan_id
                        AND 
                            transaction_date <= date(p_to_date)),0)
AS             paid_amount ,  
             (SELECT   
                        get_feeTypeamount(fee_type_id)
              FROM         
                        tbl_fee_type_plan tp where tp.type_plan_id = s.type_plan_id)
AS
                Amount,
             IFNULL(get_S_F_discount(type_plan_id,s.student_id,s.branch_id,s.year_id),0)
As             discuount
      
FROM 
			tbl_student_plan_type s
INNER JOIN
			tbl_student_academic a
ON
			s.student_id = a.student_id
AND
			 s.year_id = a.year_id
WHERE
        
            a.branch_id = p_branch_id
AND     
            a.year_id = p_year_id
AND       
            a.status='0' 
AND
			s.status='0'
AND 
             mode_flag = 'credit')a
  GROUP BY 
            studentName,
            admission_number,
            coursename_section,
            f    ;
 SET @sql = NULL;

DROP TEMPORARY TABLE IF exists report_temp_str;


CREATE TEMPORARY  table report_temp_str (str_max Text);

INSERT INTO report_temp_str 
SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'MAX(IF(f='', f,'',A_A,0))A_', f,
      ',MAX(IF(f='', f,'',P_A,0))P_', f,
      ',MAX(IF(f='', f,'',di,0))di_', f,
      ',MAX(IF(f='', f,'',D_A,0))Du_', f)
  )    
FROM report_temp_due; 

SET @sql = CONCAT('SELECT  studentName,admissionytype,admission_number, coursename_section, ', (SELECT str_max
  
FROM report_temp_str ), ' , sum(A_A) As Total_amount,sum(P_A) As Total_Paid, sum(di) As Total_discount, sum(D_A) As Total_due
                  FROM    report_temp_due
                  GROUP   BY studentName,admissionytype,admission_number');


PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt; 

END IF;		
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_feeTermDue` (IN `p_year_id` INT, IN `p_branch_id` INT, IN `p_report_type` INT, IN `p_to_date` DATE, IN `p_terms` VARCHAR(50))  BEGIN



SET @x = 0;
SET @Y = 0;
SET @D = 0;
SET @S = 0;
SET @pt = 0;
SET @Sif = 0;


DROP  TABLE IF exists tbl_temp_feedue;


CREATE   TABLE IF NOT EXISTS  tbl_temp_feedue as (
SELECT
        student_id,
        admission_number,
        course_id,
        section_id,
        house_id,
        Student_Name,
        Course_Name,
        Section_Name,
        Father_FullName,
        Father_mobile_number,
        Mother_FullName,
        Mother_mobile_number,
        type_plan_id,
        fee_type_id,
        Fee_type_code,
        terms_id,
        term_name,
        term_amount,
        @pt := ( IFNULL((SELECT 
                            SUM(IFNULL(amount,0))
                
                        FROM 
                                    tbl_fee_transactions pt
                    
                        WHERE   
                                    pt.studnet_id = a.student_id
                        AND
                                    pt.type_plan_id = a.type_plan_id
                        AND
                                    pt.terms_id = b.terms_id
                        AND 
                            date(transaction_date) <= date(p_to_date)
                        AND pt.status ='0'),0)) 
AS                      paid_amount,
     
        term_due(fee_type_id,terms_id,DiscountAmount,term_amount) discount
        

FROM 

(SELECT  spt.student_id,
        spt.admission_number,
        ANY_VALUE(sa.course_id) AS  course_id,
        ANY_VALUE(sa.section_id)AS  section_id,
        ANY_VALUE(sa.house_id) AS house_id,
        get_studentName(spt.student_id)AS Student_Name,
        get_courseName(ANY_VALUE(sa.course_id)) AS  Course_Name,
        getSectionName(ANY_VALUE(sa.section_id)) AS Section_Name,
        spt.type_plan_id,
        spt.branch_id,
        spt.year_id ,
        (SELECT d.fee_type_id FROM tbl_fee_type_plan d  
        WHERE d.type_plan_id = spt.type_plan_id) AS fee_type_id,
        SUM(IFNULL(discount_amount,0)) DiscountAmount
FROM 
        tbl_student_plan_type  spt 
        
INNER JOIN 
        tbl_student_academic sa ON sa.student_id = spt.student_id  AND sa.branch_id = spt.branch_id AND sa.year_id = spt.year_id
 
WHERE 
        spt.status = '0' AND sa.status='0' AND spt.branch_id = p_branch_id AND spt.year_id = p_year_id 
GROUP BY 
        student_id,
        admission_number,
        type_plan_id,
        branch_id,
        year_id,fee_type_id order by fee_type_id desc ) a
LEFT OUTER JOIN 
( SELECT terms_id,
            type_id,term_amount,Fee_type_code,term_name  FROM ( 
 SELECT         
            terms_id,
            type_id,            
            IFNULL(amount,0) as term_amount ,
            (SELECT   
                    fee_type_code 
            FROM 
                    tbl_fee_type ft
            WHERE   
                    ft.fee_type_id = fc.type_id) 
 AS         Fee_type_code,
            (CASE WHEN type_id = @Y 
                  THEN   CONCAT('term',@x:=@x+1)  
                  ELSE CONCAT('term',@x:=1) END )term_name,
           @Y:= type_id 
 FROM   
            tbl_fee_terms fc)x ORDER BY x.type_id,x.terms_id DESC ) b
            
ON 
a.fee_type_id = b.type_id
 LEFT JOIN 
                (SELECT 
                            e.student_id AS STUN,
                            e.parent_mobile_number AS Father_mobile_number,
                            concat(e.parent_firstname,' ', e.parent_lastname) AS Father_FullName
                 FROM 
                            tbl_student_parents e WHERE e.relation_type = 1 AND e.status ='0' ) f
    ON 
                 a.student_id = f.STUN
    LEFT JOIN
                (
                SELECT 
                            d.student_id AS MSTUID,
                            concat(d.parent_firstname,' ', d.parent_lastname) AS Mother_FullName,
                            d.parent_mobile_number AS Mother_mobile_number
                FROM
                            tbl_student_parents d WHERE d.relation_type = 2 AND d.status = '0' ) m
    ON
                a.student_id = m.MSTUID)
  union All 
  select student_id,
        admission_number,
        course_id,
        section_id,
        house_id,
        Student_Name,
        Course_Name,
        Section_Name,
        Father_FullName,
        Father_mobile_number,
        Mother_FullName,
        Mother_mobile_number,
        type_plan_id,
        fee_type_id,
        Fee_type_code,
        terms_id,
        term_name,
        term_amount,
        @pt := ( IFNULL((SELECT 
                            SUM(IFNULL(amount,0))
                
                        FROM 
                                    tbl_admission_fee_transactions pt
                    
                        WHERE   
                                    pt.studnet_id = d.student_id
                        AND
                                    pt.admission_fee_id = d.admission_fee_id
                        AND 
                            date(transaction_date) <= date(p_to_date)
                        AND pt.status ='0'),0)) 
AS                      paid_amount,
     
                  discount
        

FROM 

(select sd.student_id,
        sd.admission_fee_id,
        sa.admission_number,
        sa.course_id AS  course_id,
        sa.section_id AS  section_id,
        sa.house_id AS house_id,
        get_studentName(sd.student_id)AS Student_Name,
        get_courseName(sa.course_id) AS  Course_Name,
        getSectionName(sa.section_id) AS Section_Name,
        0 as type_plan_id,
        sd.branch_id,
        sd.year_id ,
        0 AS fee_type_id,
        (ifnull(sd.discount_1,0)+ifnull(sd.discount_2,0)+ifnull(sd.discount_3,0))as discount,
        0 as terms_id,
        0 as type_id,sd.actual_fee as term_amount,'ADM_FEE' Fee_type_code,'term1' as term_name
    FROM 
        tbl_student_admission_fee  sd 
        
INNER JOIN 
        tbl_student_academic sa ON sa.student_id = sd.student_id  AND sa.branch_id = sd.branch_id AND sa.year_id = sd.year_id
 
WHERE 
        sd.status = '0' AND sa.status='0' AND sd.branch_id = p_branch_id AND sd.year_id = p_year_id)d
        LEFT JOIN 
                (SELECT 
                            e.student_id AS STUN,
                            e.parent_mobile_number AS Father_mobile_number,
                            concat(e.parent_firstname,' ', e.parent_lastname) AS Father_FullName
                 FROM 
                            tbl_student_parents e WHERE e.relation_type = 1 AND e.status ='0' ) f
    ON 
                 d.student_id = f.STUN
    LEFT JOIN
                (
                SELECT 
                            d.student_id AS MSTUID,
                            concat(d.parent_firstname,' ', d.parent_lastname) AS Mother_FullName,
                            d.parent_mobile_number AS Mother_mobile_number
                FROM
                            tbl_student_parents d WHERE d.relation_type = 2 AND d.status = '0' ) m
    ON
                d.student_id = m.MSTUID;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_feeTermDue_test` (IN `p_year_id` INT, IN `p_branch_id` INT, IN `p_report_type` INT, IN `p_to_date` DATE)  BEGIN

DROP temporary TABLE IF exists tbl_temp_studentplan;

CREATE temporary  TABLE IF NOT EXISTS  tbl_temp_studentplan(

SELECT  spt.student_id,
        spt.admission_number,
        ANY_VALUE(sa.course_id) AS  course_id,
        ANY_VALUE(sa.section_id)AS  section_id,
        ANY_VALUE(sa.house_id) AS house_id,
        get_studentName(spt.student_id)AS Student_Name,
        get_courseName(ANY_VALUE(sa.course_id)) AS  Course_Name,
        getSectionName(ANY_VALUE(sa.section_id)) AS Section_Name,
        spt.type_plan_id,
        spt.branch_id,
        spt.year_id ,
        (SELECT d.fee_type_id FROM tbl_fee_type_plan d  
        WHERE d.type_plan_id = spt.type_plan_id) AS fee_type_id,
        SUM(IFNULL(discount_amount,0)) DiscountAmount
FROM 
        tbl_student_plan_type  spt 
        
INNER JOIN 
		tbl_student_academic sa ON sa.student_id = spt.student_id  AND sa.branch_id = spt.branch_id AND sa.year_id = spt.year_id
 
WHERE 
        spt.status = '0' AND sa.status='0' AND spt.branch_id = 1 AND spt.year_id = 6
GROUP BY 
        student_id,
        admission_number,
        type_plan_id,
        branch_id,
        year_id);
        
        
  
  
SET @x = 0;
SET @Y = 0;
SET @Dt = 0;
SET @St = 0;
SET @pt = 0;
SET @Sif = 0;


DROP temporary TABLE IF exists tbl_temp_current_due;
Create temporary table if not exists tbl_temp_current_due (S int , D float,Sif int);


DROP temporary TABLE IF exists tbl_temp_feeplans;

CREATE temporary  TABLE IF NOT EXISTS  tbl_temp_feeplans(
SELECT terms_id,type_id,term_amount,Fee_type_code,term_name  FROM ( 
 SELECT         
            terms_id,
            type_id,            
            IFNULL(amount,0) as term_amount ,
            (SELECT   
                    fee_type_code 
            FROM 
                    tbl_fee_type ft
            WHERE   
                    ft.fee_type_id = fc.type_id) 
 AS         Fee_type_code,
            (CASE WHEN type_id = @Y 
                  THEN   CONCAT('term',@x:=@x+1)  
                  ELSE CONCAT('term',@x:=1) END )term_name,
           @Y:= type_id 
 FROM   
            tbl_fee_terms fc)x ORDER BY x.type_id,x.terms_id DESC);
            
            

Create temporary table if not exists tbl_temp_current_due (S int , D float,Sif int);

insert into  tbl_temp_current_due values(0,0,0);


SET @Stu = 0;
SET @Due = 0;
SET @pln = 0;


CREATE temporary  TABLE IF NOT EXISTS  tbl_temp_dues(
select 
		student_id,
        admission_number,
        type_plan_id,
        fee_type_id,
        Fee_type_code,
        terms_id,
        term_name,
        term_amount,
        @pt := ( IFNULL((SELECT 
                            SUM(IFNULL(amount,0))
                
                        FROM 
                                    tbl_fee_transactions pt
                    
                        WHERE   
                                    pt.studnet_id = a.student_id
                        AND
                                    pt.type_plan_id = a.type_plan_id
                        AND
                                    pt.terms_id = b.terms_id
                        AND 
                            date(transaction_date) <= date('2018-06-20')
                        AND pt.status ='0'),0)) 
		AS  paid_amount,
		sp_temp_due(a.type_plan_id,DiscountAmount,a.student_id,b.term_amount ) discount   

FROM 
		tbl_temp_studentplan a 
        
LEFT OUTER JOIN 
		
        tbl_temp_feeplans b

		ON 
a.fee_type_id = b.type_id);






 




END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_feeTermDue_test1` (IN `p_year_id` INT, IN `p_branch_id` INT, IN `p_report_type` INT, IN `p_to_date` DATE, IN `p_terms` VARCHAR(50))  BEGIN


SET @x = 0;
SET @Y = 0;
SET @D = 0;
SET @S = 0;
SET @pt = 0;
SET @Sif = 0;

set @vD =0;
set @vS =0;
set @vSif =0;



DROP temporary TABLE IF exists tbl_temp_studentplan;

CREATE temporary  TABLE IF NOT EXISTS  tbl_temp_studentplan(

SELECT  spt.student_id,
        spt.admission_number,
        ANY_VALUE(sa.course_id) AS  course_id,
        ANY_VALUE(sa.section_id)AS  section_id,
        ANY_VALUE(sa.house_id) AS house_id,
        get_studentName(spt.student_id)AS Student_Name,
        get_courseName(ANY_VALUE(sa.course_id)) AS  Course_Name,
        getSectionName(ANY_VALUE(sa.section_id)) AS Section_Name,
        spt.type_plan_id,
        spt.branch_id,
        spt.year_id ,
        (SELECT d.fee_type_id FROM tbl_fee_type_plan d  
        WHERE d.type_plan_id = spt.type_plan_id) AS fee_type_id,
        SUM(IFNULL(discount_amount,0)) DiscountAmount
FROM 
        tbl_student_plan_type  spt 
INNER JOIN 
		tbl_student_academic sa ON sa.student_id = spt.student_id  AND sa.branch_id = spt.branch_id AND sa.year_id = spt.year_id
 
WHERE 
        spt.status = '0' AND sa.status='0' AND spt.branch_id = 1 AND spt.year_id = 6
GROUP BY 
        student_id,
        admission_number,
        type_plan_id,
        branch_id,
        year_id);
        
        
  
  



DROP temporary TABLE IF exists tbl_temp_current_due;
Create temporary table if not exists tbl_temp_current_due (S int , D float,Sif int);


DROP temporary TABLE IF exists tbl_temp_feeplans;

CREATE temporary  TABLE IF NOT EXISTS  tbl_temp_feeplans(
SELECT terms_id,type_id,term_amount,Fee_type_code,term_name  FROM ( 
 SELECT         
            terms_id,
            type_id,            
            IFNULL(amount,0) as term_amount ,
            (SELECT   
                    fee_type_code 
            FROM 
                    tbl_fee_type ft
            WHERE   
                    ft.fee_type_id = fc.type_id) 
 AS         Fee_type_code,
            (CASE WHEN type_id = @Y 
                  THEN   CONCAT('term',@x:=@x+1)  
                  ELSE CONCAT('term',@x:=1) END )term_name,
           @Y:= type_id 
 FROM   
            tbl_fee_terms fc)x ORDER BY x.type_id,x.terms_id DESC);
            
            
SELECT * FROM tbl_temp_feeplans;

Create temporary table if not exists tbl_temp_current_due (S int , D float,Sif int);

insert into  tbl_temp_current_due values(0,0,0);




CREATE temporary  TABLE IF NOT EXISTS  tbl_temp_dues(
select 
		student_id,
        admission_number,
        type_plan_id,
        fee_type_id,
        Fee_type_code,
        terms_id,
        term_name,
        term_amount,
        @pt := ( IFNULL((SELECT 
                            SUM(IFNULL(amount,0))
                
                        FROM 
                                    tbl_fee_transactions pt
                    
                        WHERE   
                                    pt.studnet_id = a.student_id
                        AND
                                    pt.type_plan_id = a.type_plan_id
                        AND
                                    pt.terms_id = b.terms_id
                        AND 
                            date(transaction_date) <= date('2018-06-20')
                        AND pt.status ='0'),0)) 
		AS  paid_amount,        
		term_due(fee_type_id,terms_id,DiscountAmount,term_amount) discount
        

FROM 
		tbl_temp_studentplan a 
        
LEFT OUTER JOIN 
		
        tbl_temp_feeplans b

		ON 
a.fee_type_id = b.type_id);



SELECT * FROM tbl_temp_dues where admission_number = '1001016028';


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_feeTermInactiveDue` (IN `p_year_id` INT, IN `p_branch_id` INT, IN `p_report_type` INT, IN `p_to_date` DATE, IN `p_terms` VARCHAR(50))  BEGIN
SET @x = 0;
SET @Y = 0;
SET @D = 0;
SET @S = 0;
SET @pt = 0;
SET @Sif = 0;


DROP  TABLE IF exists tbl_temp_feedue;
CREATE   TABLE IF NOT EXISTS  tbl_temp_feedue as (
SELECT
        student_id,
        admission_number,
        course_id,
        section_id,
        house_id,
        Student_Name,
        Course_Name,
        Section_Name,
        Father_FullName,
        Father_mobile_number,
        Mother_FullName,
        Mother_mobile_number,
        type_plan_id,
        fee_type_id,
        Fee_type_code,
        terms_id,
        term_name,
        term_amount,
        @pt := ( IFNULL((SELECT 
                            SUM(IFNULL(amount,0))
                
                        FROM 
                                    tbl_fee_transactions pt
                    
                        WHERE   
                                    pt.studnet_id = a.student_id
                        AND
                                    pt.type_plan_id = a.type_plan_id
                        AND
                                    pt.terms_id = b.terms_id
                        AND 
                            date(transaction_date) <= date(p_to_date)
                        AND pt.status ='0'),0)) 
AS                      paid_amount,
     
        term_due(fee_type_id,terms_id,DiscountAmount,term_amount) discount
        

FROM 

(SELECT  spt.student_id,
        spt.admission_number,
        ANY_VALUE(sa.course_id) AS  course_id,
        ANY_VALUE(sa.section_id)AS  section_id,
        ANY_VALUE(sa.house_id) AS house_id,
        get_studentName(spt.student_id)AS Student_Name,
        get_courseName(ANY_VALUE(sa.course_id)) AS  Course_Name,
        getSectionName(ANY_VALUE(sa.section_id)) AS Section_Name,
        spt.type_plan_id,
        spt.branch_id,
        spt.year_id ,
        (SELECT d.fee_type_id FROM tbl_fee_type_plan d  
        WHERE d.type_plan_id = spt.type_plan_id) AS fee_type_id,
        SUM(IFNULL(discount_amount,0)) DiscountAmount
FROM 
        tbl_student_plan_type  spt 
        
INNER JOIN 
        tbl_student_academic sa ON sa.student_id = spt.student_id  AND sa.branch_id = spt.branch_id AND sa.year_id = spt.year_id
 
WHERE 
        spt.status = '0' AND sa.status='1' AND spt.branch_id = p_branch_id AND spt.year_id = p_year_id
GROUP BY 
        student_id,
        admission_number,
        type_plan_id,
        branch_id,
        year_id,fee_type_id order by fee_type_id desc ) a
LEFT OUTER JOIN 
( SELECT terms_id,
            type_id,term_amount,Fee_type_code,term_name  FROM ( 
 SELECT         
            terms_id,
            type_id,            
            IFNULL(amount,0) as term_amount ,
            (SELECT   
                    fee_type_code 
            FROM 
                    tbl_fee_type ft
            WHERE   
                    ft.fee_type_id = fc.type_id) 
 AS         Fee_type_code,
            (CASE WHEN type_id = @Y 
                  THEN   CONCAT('term',@x:=@x+1)  
                  ELSE CONCAT('term',@x:=1) END )term_name,
           @Y:= type_id 
 FROM   
            tbl_fee_terms fc)x ORDER BY x.type_id,x.terms_id DESC ) b
            
ON 
a.fee_type_id = b.type_id
 LEFT JOIN 
                (SELECT 
                            e.student_id AS STUN,
                            e.parent_mobile_number AS Father_mobile_number,
                            concat(e.parent_firstname,' ', e.parent_lastname) AS Father_FullName
                 FROM 
                            tbl_student_parents e WHERE e.relation_type = 1 AND e.status ='0' ) f
    ON 
                 a.student_id = f.STUN
    LEFT JOIN
                (
                SELECT 
                            d.student_id AS MSTUID,
                            concat(d.parent_firstname,' ', d.parent_lastname) AS Mother_FullName,
                            d.parent_mobile_number AS Mother_mobile_number
                FROM
                            tbl_student_parents d WHERE d.relation_type = 2 AND d.status = '0' ) m
    ON
                a.student_id = m.MSTUID)
  union All 
  select student_id,
        admission_number,
        course_id,
        section_id,
        house_id,
        Student_Name,
        Course_Name,
        Section_Name,
        Father_FullName,
        Father_mobile_number,
        Mother_FullName,
        Mother_mobile_number,
        type_plan_id,
        fee_type_id,
        Fee_type_code,
        terms_id,
        term_name,
        term_amount,
        @pt := ( IFNULL((SELECT 
                            SUM(IFNULL(amount,0))
                
                        FROM 
                                    tbl_admission_fee_transactions pt
                    
                        WHERE   
                                    pt.studnet_id = d.student_id
                        AND
                                    pt.admission_fee_id = d.admission_fee_id
                        AND 
                            date(transaction_date) <= date(p_to_date)
                        AND pt.status ='0'),0)) 
AS                      paid_amount,
     
                  discount
FROM 
(select sd.student_id,
        sd.admission_fee_id,
        sa.admission_number,
        sa.course_id AS  course_id,
        sa.section_id AS  section_id,
        sa.house_id AS house_id,
        get_studentName(sd.student_id)AS Student_Name,
        get_courseName(sa.course_id) AS  Course_Name,
        getSectionName(sa.section_id) AS Section_Name,
        0 as type_plan_id,
        sd.branch_id,
        sd.year_id ,
        0 AS fee_type_id,
        (ifnull(sd.discount_1,0)+ifnull(sd.discount_2,0)+ifnull(sd.discount_3,0))as discount,
        0 as terms_id,
        0 as type_id,sd.actual_fee as term_amount,'ADM_FEE' Fee_type_code,'term1' as term_name
    FROM 
        tbl_student_admission_fee  sd 
        
INNER JOIN 
        tbl_student_academic sa ON sa.student_id = sd.student_id  AND sa.branch_id = sd.branch_id AND sa.year_id = sd.year_id
 
WHERE 
        sd.status = '0' AND sa.status='1' AND sd.branch_id = p_branch_id AND sd.year_id = p_year_id)d
        LEFT JOIN 
                (SELECT 
                            e.student_id AS STUN,
                            e.parent_mobile_number AS Father_mobile_number,
                            concat(e.parent_firstname,' ', e.parent_lastname) AS Father_FullName
                 FROM 
                            tbl_student_parents e WHERE e.relation_type = 1 AND e.status ='0' ) f
    ON 
                 d.student_id = f.STUN
    LEFT JOIN
                (
                SELECT 
                            d.student_id AS MSTUID,
                            concat(d.parent_firstname,' ', d.parent_lastname) AS Mother_FullName,
                            d.parent_mobile_number AS Mother_mobile_number
                FROM
                            tbl_student_parents d WHERE d.relation_type = 2 AND d.status = '0' ) m
    ON
                d.student_id = m.MSTUID;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_inactiveStudentReports` (IN `p_year_id` INT, IN `p_branch_id` INT, IN `p_report_type` INT, IN `p_to_date` DATE)  BEGIN
    DROP temporary TABLE IF exists tbl_temp_feeinac; 
    CREATE temporary TABLE IF NOT EXISTS  tbl_temp_feeinac AS (
    select * from (
            SELECT  sa.student_id,sa.course_id,sa.section_id,get_studentName(sa.student_id)Student_Name ,ft.amount,sa.admission_number,getSectionName(sa.section_id) AS Section_Name,
                get_courseName(sa.course_id)Course_Name,sp.type_plan_id,get_feeTypeName(sp.type_plan_id) AS fee_name,
                ft.system_receipt_number,get_feeTypeCode(sp.type_plan_id)Fee_type_code,
                (SELECT concat(b.parent_firstname ," " ,b.parent_lastname)
                    FROM 
                        tbl_student_parents b
                    WHERE 
                        b.student_id = sa.student_id   AND b.status = '0'  LIMIT 0,1) Father_FullName,
                (SELECT b.parent_mobile_number
                    FROM 
                        tbl_student_parents b
                WHERE 
                    b.student_id = sa.student_id  AND  b.status = '0'  LIMIT 0,1) Father_mobile_number
        FROM tbl_student_plan_type sp 
        INNER JOIN tbl_student_academic sa 
                ON sa.student_id = sp.student_id 
        LEFT JOIN tbl_fee_transactions ft 
                ON ft.studnet_id = sp.student_id AND ft.type_plan_id = sp.type_plan_id 
        WHERE sp.status='0' AND ft.status='0' AND  sa.status='1' AND sa.branch_id = p_branch_id AND sa.year_id=p_year_id   AND sp.year_id=p_year_id
         UNION ALL
            select 
                sa.student_id,sa.course_id,sa.section_id,get_studentName(sa.student_id)Student_Name,
                ft.amount,sa.admission_number,getSectionName(sa.section_id) AS Section_Name ,
                get_courseName(sa.course_id)Course_Name,0 as type_plan_id,'Facilities and Infrastructure Fee' AS fee_name,
                ft.system_receipt_number,'ADM_FEE' as Fee_type_code,
                (SELECT concat(b.parent_firstname ," " ,b.parent_lastname)
                    FROM 
                        tbl_student_parents b
                    WHERE 
                        b.student_id = sa.student_id   AND b.status = '0'  LIMIT 0,1) Father_FullName,
                (SELECT b.parent_mobile_number
                    FROM 
                        tbl_student_parents b
                WHERE 
                    b.student_id = sa.student_id  AND  b.status = '0'  LIMIT 0,1) Father_mobile_number
            FROM 
                tbl_student_admission_fee  sd 
        
            INNER JOIN 
                tbl_student_academic sa ON sa.student_id = sd.student_id  AND sa.branch_id = sd.branch_id AND sa.year_id = sd.year_id
            LEFT JOIN tbl_admission_fee_transactions ft 
                ON ft.studnet_id = sd.student_id AND ft.admission_fee_id = sd.admission_fee_id 
            WHERE sd.status='0' AND ft.status='0' AND  sa.status='1' AND sa.branch_id = p_branch_id AND sa.year_id=p_year_id   AND sd.year_id=p_year_id
        )a
        
        
         );
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_marks_analysis` (IN `p_exam_id` INT(11), IN `p_section_id` INT(11))  BEGIN
	drop table if exists tbl_exam_qn_marls;
    CREATE TABLE tbl_exam_qn_marls as 
    select s.student_id,sm.exam_course_id,s.admission_number,s.student_name,sum(sm.question_marks) marks,sa.section_id,min(sa.course_id)course_id from tbl_student s 
    inner join tbl_student_academic sa on sa.student_id = s.student_id
    left join tbl_student_question_marks sm on sm.student_id = s.student_id AND sm.exam_id = p_exam_id
    where  sa.status = '0' AND sa.section_id = p_section_id
    group by sm.exam_course_id,s.student_id;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_preYearDue` (IN `p_year_id` VARCHAR(50), IN `p_branch_id` INT)  BEGIN
	DROP  TABLE IF exists tbl_temp_predue;
	CREATE  TABLE IF NOT EXISTS  tbl_temp_predue as (
		SELECT student_id,
		year_id,
        branch_id,
        get_studentName(student_id)Student_Name,
        get_courseName(course_id) AS  Course_Name,
        getSectionName(section_id) AS Section_Name,
        Father_Name,
        Father_Mobile,
        Mother_Name,
        Mother_Mobile,
        Fee_Name,
        fee_type_code,
        Actual_Amount,
        discount_amount,
        Paid_Amount
FROM (
	select sa.student_id,
		spt.year_id,
        spt.branch_id,
        sa.course_id,
		sa.section_id,
        (select  print_name from tbl_fee_type  fty where fty.status ='0' AND fty.fee_type_id = (select ftp.fee_type_id from tbl_fee_type_plan ftp where ftp.status = '0' AND ftp.type_plan_id = spt.type_plan_id) )  AS  Fee_Name ,
        (select  fee_type_code from tbl_fee_type  fty where fty.status ='0' AND fty.fee_type_id = (select ftp.fee_type_id from tbl_fee_type_plan ftp where ftp.status = '0' AND ftp.type_plan_id = spt.type_plan_id) )  AS  fee_type_code,
        (select sum(tr.amount) from tbl_fee_terms tr where tr.status='0' AND tr.type_id = (select ftp.fee_type_id from tbl_fee_type_plan ftp where ftp.status = '0' AND ftp.type_plan_id = spt.type_plan_id) ) AS Actual_Amount,
		(select IFNULL(SUM(sp.discount_amount),0) from tbl_student_plan_type sp where sp.status = '0' AND sp.type_plan_id=spt.type_plan_id AND sp.mode_flag='debit' AND sp.student_id = spt.student_id AND sp.year_id = spt.year_id AND sp.branch_id = spt.branch_id ) as discount_amount,
		(select IFNULL(SUM(ft.amount),0) from tbl_fee_transactions ft where ft.status = '0' AND ft.type_plan_id = spt.type_plan_id AND ft.studnet_id = spt.student_id AND ft.branch_id=spt.branch_id) AS Paid_Amount
    FROM  tbl_student_academic sa  

	LEFT JOIN 
			tbl_student_plan_type spt 
		on spt.student_id = sa.student_id 
        AND spt.year_id = sa.year_id 
        AND spt.branch_id = sa.branch_id
where sa.status='0' 
AND  FIND_IN_SET (sa.year_id,p_year_id)
AND sa.branch_id =  p_branch_id
AND spt.status='0' 
AND spt.mode_flag='credit'

ORDER BY sa.student_id) a
LEFT OUTER JOIN (
	select 
		tsp.student_id AS STUDID,
        concat(tsp.parent_firstname,' ',tsp.parent_middlename ,' ',tsp.parent_lastname) AS Father_Name,
		tsp.parent_mobile_number AS Father_Mobile 
	from tbl_student_parents tsp 
    where tsp.relation_type= 1 
    AND tsp.status='0'
)b ON  b.STUDID = a.student_id
LEFT OUTER JOIN (
	select 
		msp.student_id AS STUD_ID,
        concat(msp.parent_firstname,' ',msp.parent_middlename ,' ',msp.parent_lastname) AS Mother_Name,
        msp.parent_mobile_number AS Mother_Mobile 
	from tbl_student_parents msp 
		where msp.relation_type= 2 AND msp.status='0'
)c ON  c.STUD_ID = a.student_id
    
    );
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `report_turnoverReport` (IN `p_year_id` INT, IN `p_branch_id` INT, IN `p_report_type` INT)  BEGIN 

IF p_report_type = 15 Then

                SELECT 
                        courseName,
                        sum(Actual_amount)
                As      Amount,
                        sum(concession) 
                As      concession,
                        sum(discount)
                As      discount,
                        sum(Actual_amount-concession-discount)
                As      final_amount
                        
                FROM    (       
                
                SELECT 
                student_academic_id,
                        student_id,
                        get_courseName((SELECT 
                                    course_id 
                         FROM 
                                    tbl_student_academic ac 
                         WHERE 
                                    ac.student_academic_id = sp.student_academic_id  
                         AND        
                                    ac.year_id = sp.year_id
                        AND ac.status='0'
                        LIMIt 0,1))
                AS      courseName,
                        get_feeTypeamount(fee_type_id) 
                AS      
                        Actual_amount,
                        IFNULL(get_S_F_concession (sp.type_plan_id,get_feeTypeamount(fee_type_id),student_id,sp.branch_id,sp.year_id),0)
                
                AS      concession,
                IFNULL(get_S_F_discount (sp.type_plan_id,student_id,sp.branch_id,sp.year_id),0)
        AS 
                discount,
                        get_feeTypeName(sp.type_plan_id)
                AS
                        feetypename,
                        sp.type_plan_id 
                FROM 
                        tbl_student_plan_type sp
                INNER JOIN
                        tbl_fee_type_plan  tp
                ON
                        sp.type_plan_id = tp.type_plan_id
                            
                WHERE 
                        sp.branch_id = p_branch_id
                AND 
                        sp.year_id = p_year_id
                AND
                        sp.status ='0'
                AND
                        mode_flag = 'credit'
                       AND      
                       sp.student_academic_id not in(select student_academic_id from tbl_student_academic where year_id=p_year_id and status!='0')

                 UNION ALL
         SELECT sa.student_academic_id ,sd.student_id,
                    get_courseName(sa.course_id) AS courseName,
                    sd.actual_fee AS Actual_amount,
                    0 as concession,
                            (ifnull(sd.discount_1,0)+ifnull(sd.discount_2,0)+ifnull(sd.discount_3,0))as discuount,
                           "Facilities and Infrastructure Fee" AS
                        feetypename,
                        0 as type_plan_id
        FROM tbl_student_admission_fee sd  
         INNER JOIN tbl_student_academic sa 
                on
                    sa.student_id = sd.student_id
         where sd.branch_id = p_branch_id
         AND sd.year_id = p_year_id
         AND sa.year_id = p_year_id
        AND sd.status = '0' AND sa.status='0' and sa.promoted='0'      ) a 
                GROUP BY courseName with rollup; 
                
                
ELSEIF p_report_type = 16  THEN

                SELECT
                        student_name,
                        admission_number,
                        courseName,
                        sum(Actual_amount)
                As      Amount,
                        sum(concession) 
                As      concession,
                        sum(discount)
                As      discount,
                        sum(Actual_amount-concession-discount)
                As      final_amount
                FROM (
                SELECT 
                        (CASE WHEN  student_id = 0 THEN get_applicationName (application_id) else   get_studentName(student_id) end)
                AS      student_name,
                        admission_number,
                        get_courseName((SELECT 
                                    course_id 
                         FROM 
                                    tbl_student_academic ac 
                         WHERE 
                                    ac.student_academic_id = sp.student_academic_id 
                         AND        
                                    ac.year_id = sp.year_id
                        AND ac.status='0' and ac.promoted='0'
                        LIMIt 0,1))
                AS      courseName,
                        get_feeTypeamount(fee_type_id) 
                AS      
                        Actual_amount,
                        IFNULL(get_S_F_concession (sp.type_plan_id,get_feeTypeamount(fee_type_id),student_id,sp.branch_id,sp.year_id),0)
                
                AS      concession,
                IFNULL(get_S_F_discount (sp.type_plan_id,student_id,sp.branch_id,sp.year_id),0)
        AS 
                discount,
                        get_feeTypeName(sp.type_plan_id)
                AS
                        feetypename,
                        sp.type_plan_id 
                FROM 
                        tbl_student_plan_type sp
                INNER JOIN
                        tbl_fee_type_plan  tp
                ON
                        sp.type_plan_id = tp.type_plan_id
                            
                WHERE 
                        sp.branch_id = 1
                AND 
                        sp.year_id = p_year_id
                AND
                        sp.status ='0'
                AND
                        mode_flag = 'credit' 
                        AND 
                        sp.student_academic_id not in(select student_academic_id from tbl_student_academic where year_id=p_year_id and status!='0')
                 UNION ALL
         SELECT get_studentName(sd.student_id)student_name,
                sa.admission_number,
                    get_courseName(sa.course_id) AS courseName,
                    sd.actual_fee AS Actual_amount,
                    0 as concession,
                            (ifnull(sd.discount_1,0)+ifnull(sd.discount_2,0)+ifnull(sd.discount_3,0))as discuount,
                           "Facilities and Infrastructure Fee" AS
                        feetypename,
                        0 as type_plan_id
        FROM tbl_student_admission_fee sd  
         INNER JOIN tbl_student_academic sa 
                on
                    sa.student_id = sd.student_id
         where sd.branch_id = 1
         AND sd.year_id = p_year_id
         AND sa.year_id = p_year_id
        AND sd.status = '0' AND sa.status='0'   AND  sa.promoted='0' 
                ) a
                GROUP BY student_name,
                        admission_number,courseName ; 
ELSEIF p_report_type = 9  THEN
 
 
                SELECT 
                        courseName,
                        count(distinct student_academic_id)
                As      Student_count,
                        sum(Actual_amount)
                As        Amount,
                        sum(concession) 
                As        concession,
                        sum(discount)
                As         discount,
                        sum(Actual_amount-concession-discount)
                As      final_amount
                        
                FROM (        
                
                SELECT 
                        student_academic_id,
                        student_id,
                        get_courseName((SELECT 
                                    course_id 
                         FROM 
                                    tbl_student_academic ac 
                         WHERE 
                                   ac.student_academic_id = sp.student_academic_id 
                         AND        
                                    ac.year_id = sp.year_id
                        AND ac.status='0' 
                        LIMIt 0,1))
                AS        courseName,
                        get_feeTypeamount(fee_type_id) 
                AS      
                        Actual_amount,
                        IFNULL(get_S_F_concession (sp.type_plan_id,get_feeTypeamount(fee_type_id),student_id,sp.branch_id,sp.year_id),0)
                
                AS      concession,
                        IFNULL(get_S_F_discount (sp.type_plan_id,student_id,sp.branch_id,sp.year_id),0)
                AS 
                        discount,
                        get_feeTypeName(sp.type_plan_id)
                AS
                        feetypename,
                        sp.type_plan_id 
                FROM 
                        tbl_student_plan_type sp
                INNER JOIN
                        tbl_fee_type_plan  tp
                ON
                        sp.type_plan_id = tp.type_plan_id
                            
                WHERE 
                        sp.branch_id = 1 
                AND 
                        sp.year_id = p_year_id
                AND
                        sp.status ='0'
                AND
                        mode_flag = 'credit' 
                AND sp.student_academic_id not in(select student_academic_id from tbl_student_academic where year_id=p_year_id and status!='0' )

                UNION ALL
         SELECT sa.student_academic_id ,sd.student_id,
                    get_courseName(sa.course_id) AS course_name,
                    sd.actual_fee AS amount,
                    0 as concession,
                            (ifnull(sd.discount_1,0)+ifnull(sd.discount_2,0)+ifnull(sd.discount_3,0))as discuount,
                           "Facilities and Infrastructure Fee" AS
                        feetypename,
                        0 as type_plan_id
        FROM tbl_student_admission_fee sd  
         INNER JOIN tbl_student_academic sa 
                on
                    sa.student_id = sd.student_id
         where sd.branch_id = 1
         AND sd.year_id = p_year_id
         AND sa.year_id = p_year_id
        AND sd.status = '0' 
        AND  sa.promoted='0'
                        
                        ) a 
                GROUP BY courseName with rollup;

ELSEIF p_report_type = 10  THEN

SELECT 
                        courseName,
                        count(distinct student_academic_id)
                As         Student_count,
                
                        sum( Case WHEN feetypename = 'Facilities and Infrastructure Fee' Then Actual_amount else 0 end)
                As        Admission_fee_Amount,
                        sum( Case WHEN feetypename = 'Facilities and Infrastructure Fee' THEN concession else 0 end ) 
                As        Admission_fee_concession,
                        sum( Case WHEN feetypename = 'Facilities and Infrastructure Fee' THEN discount else 0 end )
                As         Admission_fee_discount,
                        sum( Case WHEN feetypename = 'Facilities and Infrastructure Fee' THEN Actual_amount-concession-discount else 0 end)
                As      Admission_fee_final_amount,
                        sum( Case WHEN feetypename = 'ADF' Then Actual_amount else 0 end)
                As        ADF_Amount,
                        sum( Case WHEN feetypename = 'ADF' THEN concession else 0 end ) 
                As        ADF_concession,
                        sum( Case WHEN feetypename = 'ADF' THEN discount else 0 end )
                As         ADF_discount,
                        sum( Case WHEN feetypename = 'ADF' THEN Actual_amount-concession-discount else 0 end)
                As      ADF_final_amount,
                        sum( Case WHEN feetypename = 'ANF' Then Actual_amount else 0 end)
                As        ANF_Amount,
                        sum( Case WHEN feetypename = 'ANF' THEN concession else 0 end ) 
                As        ANF_concession,
                        sum( Case WHEN feetypename = 'ANF' THEN discount else 0 end )
                As         ANF_discount,
                        sum( Case WHEN feetypename = 'ANF' THEN Actual_amount-concession-discount else 0 end)
                As      ANF_final_amount,
                        sum( Case WHEN feetypename = 'CDF' Then Actual_amount else 0 end)
                As        CDF_Amount,
                        sum( Case WHEN feetypename = 'CDF' THEN concession else 0 end ) 
                As        CDF_concession,
                        sum( Case WHEN feetypename = 'CDF' THEN discount else 0 end )
                As         CDF_discount,
                        sum( Case WHEN feetypename = 'CDF' THEN Actual_amount-concession-discount else 0 end)
                As      CDF_final_amount,
                        sum( Case WHEN feetypename = 'TF' Then Actual_amount else 0 end)
                As        TF_Amount,
                        sum( Case WHEN feetypename = 'TF' THEN concession else 0 end ) 
                As        TF_concession,
                        sum( Case WHEN feetypename = 'TF' THEN discount else 0 end )
                As         TF_discount,
                        sum( Case WHEN feetypename = 'TF' THEN Actual_amount-concession-discount else 0 end)
                As      TF_final_amount,
                        sum( Case WHEN feetypename = 'DF' Then Actual_amount else 0 end)
                As        DF_Amount,
                        sum( Case WHEN feetypename = 'DF' THEN concession else 0 end ) 
                As        DF_concession,
                        sum( Case WHEN feetypename = 'DF' THEN discount else 0 end )
                As         DF_discount,
                        sum( Case WHEN feetypename = 'DF' THEN Actual_amount-concession-discount else 0 end)
                As      DF_final_amount,
                        sum( Case WHEN feetypename = 'UBS' Then Actual_amount else 0 end)
                As        UBS_Amount,
                        sum( Case WHEN feetypename = 'UBS' THEN concession else 0 end ) 
                As        UBS_concession,
                        sum( Case WHEN feetypename = 'UBS' THEN discount else 0 end )
                As         UBS_discount,
                        sum( Case WHEN feetypename = 'UBS' THEN Actual_amount-concession-discount else 0 end)
                As      UBS_final_amount,
                        sum( Case WHEN feetypename = 'TPF' Then Actual_amount else 0 end)
                As        TPF_Amount,
                        sum( Case WHEN feetypename = 'TPF' THEN concession else 0 end ) 
                As        TPF_concession,
                        sum( Case WHEN feetypename = 'TPF' THEN discount else 0 end )
                As         TPF_discount,
                        sum( Case WHEN feetypename = 'TPF' THEN Actual_amount-concession-discount else 0 end)
                As      TPF_final_amount,
                        sum( Case WHEN feetypename = 'DCF' Then Actual_amount else 0 end)
                As        DCF_Amount,
                        sum( Case WHEN feetypename = 'DCF' THEN concession else 0 end ) 
                As        DCF_concession,
                        sum( Case WHEN feetypename = 'DCF' THEN discount else 0 end )
                As         DCF_discount,
                        sum( Case WHEN feetypename = 'DCF' THEN Actual_amount-concession-discount else 0 end)
                As      DCF_final_amount,
                        sum( Actual_amount)
                As        Total_Amount,
                        sum(concession) 
                As        Total_concession,
                        sum(discount)
                As         Total_discount,
                        sum( Actual_amount-concession-discount )
                As      Total_final_amount
                
              FROM
                 (SELECT
                        student_academic_id,
                        student_id,
                        get_courseName((SELECT 
                                    course_id 
                         FROM 
                                    tbl_student_academic ac 
                         WHERE 
                                   ac.student_academic_id = sp.student_academic_id 
                         AND        
                                    ac.year_id = sp.year_id
                        AND ac.status='0' AND ac.promoted='0'
                        LIMIt 0,1))
                AS        courseName,
                        get_feeTypeamount(fee_type_id) 
                AS      
                        Actual_amount,
                        IFNULL(get_S_F_concession (sp.type_plan_id,get_feeTypeamount(fee_type_id),student_id,sp.branch_id,sp.year_id),0)
                
                AS      concession,
                IFNULL(get_S_F_discount (sp.type_plan_id,student_id,sp.branch_id,sp.year_id),0)
        AS 
                discount,
                        get_feeTypeCode(sp.type_plan_id)
                AS
                        feetypename,
                        sp.type_plan_id 
                FROM 
                        tbl_student_plan_type sp
                INNER JOIN
                        tbl_fee_type_plan  tp
                ON
                        sp.type_plan_id = tp.type_plan_id
                            
                WHERE 
                        sp.branch_id = p_branch_id
                AND 
                        sp.year_id = p_year_id
                AND
                        sp.status ='0'
                AND
                        mode_flag = 'credit'
                        
                AND      
                       sp.student_academic_id not in(select student_academic_id from tbl_student_academic where year_id=p_year_id and status!='0')        
                 UNION ALL
         SELECT sa.student_academic_id ,sd.student_id,
                    get_courseName(sa.course_id) AS courseName,
                    sd.actual_fee AS Actual_amount,
                    0 as concession,
                            (ifnull(sd.discount_1,0)+ifnull(sd.discount_2,0)+ifnull(sd.discount_3,0))as discuount,
                           "Facilities and Infrastructure Fee" AS
                        feetypename,
                        0 as type_plan_id
        FROM tbl_student_admission_fee sd  
         INNER JOIN tbl_student_academic sa 
                on
                    sa.student_id = sd.student_id
         where sd.branch_id = p_branch_id
         AND sd.year_id = p_year_id
         AND sa.year_id = p_year_id
        AND sd.status = '0'    AND sa.promoted='0'   ) a 
            GROUP BY courseName with rollup;
END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_checklogin` (IN `p_login_id` VARCHAR(250), IN `p_user_password` VARCHAR(250), OUT `p_user_id` INT, OUT `p_user_name` VARCHAR(250), INOUT `p_lost_login` DATETIME, OUT `p_user_photo` VARCHAR(250), OUT `p_result` VARCHAR(250), IN `p_key` VARCHAR(15), OUT `p_role_id` INT)  NO SQL
ThisSP: BEGIN

	Declare v_results varchar(200);
	Declare v_cnt int;
	Declare v_status int;
	Declare v_date datetime;
	Declare v_l_cntr int;
	Declare v_security_override varchar(200);
	


    SET v_cnt=0;

	SELECT 
    user_id,
    user_name,

    user_password,
    role_id,
    CASE WHEN IFNULL(lost_login,0)=0 THEN '2016-01-01' else lost_login end,
    Attempts,
    user_status,
    user_photo,
    CASE WHEN login_id = UPPER(p_login_id) THEN 1 else 0 end
INTO p_user_id , p_user_name , v_security_override , p_role_id , v_date , v_l_cntr , v_status , p_user_photo , v_cnt 
FROM
    tbl_users
WHERE
    login_id = UPPER(p_login_id);




	IF v_cnt = 0 THEN
		
			SET p_result = 'No such user';
			LEAVE ThisSP;
	END IF;	
	
		
	IF v_status = 1 THEN
			SET p_result = 'User in deactive status';
			LEAVE ThisSP;
	END IF;			

	IF v_status = 3 THEN 
		
			SET p_result = 'Account is locked';
			LEAVE ThisSP;
	END IF;	
	
	IF v_security_override <> aes_decrypt(p_user_password,p_key)  THEN
		
	SET SQL_SAFE_UPDATES = 0;
    
			UPDATE 
					tbl_users
			SET 
					attempts =IFNULL(attempts,0)+1 ,
					user_status = Case when IFNULL(attempts,0)+1=5 THEN 1 ELSE user_status END
			WHERE
					login_id =UPPER(p_login_id);
                                     
	    	SET p_result = 'Invalid Password';
			
	END IF ;
	
	IF v_security_override = aes_decrypt(p_user_password,p_key) THEN
		
			SET SQL_SAFE_UPDATES = 0;
			
            UPDATE 
					tbl_users
			SET 
					attempts =0 ,
					lost_login =p_lost_login
			WHERE
					login_id =UPPER(p_login_id);
		
		SET p_lost_login = v_date;
		SET p_result='Success';	 

	END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_application` (IN `p_application_number` VARCHAR(250), IN `p_lead_id` INT(11), IN `p_year_id` INT(11), IN `p_branch_id` INT(11), IN `p_student_firstname` VARCHAR(250), IN `p_student_middlename` VARCHAR(250), IN `p_student_lastname` VARCHAR(250), IN `p_course_id` INT(11), IN `p_gender` ENUM('Male','Female'), IN `p_dob` DATE, IN `p_student_email` VARCHAR(250), IN `p_previous_school` VARCHAR(250), IN `p_area_id` INT(11), IN `p_landmark` VARCHAR(250), IN `p_address` VARCHAR(250), IN `p_present_area_id` INT(11), IN `p_present_landmark` VARCHAR(250), IN `p_present_address` VARCHAR(250), IN `p_pincode` VARCHAR(50), IN `p_religion_id` INT(11), IN `p_cast_id` INT(11), IN `p_nationality` INT(11), IN `p_mother_tongue` INT(11), IN `p_referrence_name` VARCHAR(250), IN `p_application_status` ENUM('application','admission'), IN `p_modified_date` DATETIME, IN `p_modified_by` INT(11), OUT `p_result` VARCHAR(250), IN `p_application_id` INT, IN `p_student_photo` VARCHAR(250))  BEGIN

Declare v_country_id int;
	Declare v_state_id int;
	Declare v_city_id int;
	
	
		SELECT 
			country_id,
			state_id,
			city_id
		INTO
			v_country_id,
			v_state_id,
			v_city_id
		FROM
			tbl_area 
		WHERE 
			area_id = p_area_id;
	


		UPDATE
					tbl_applications
		SET
                    application_number = p_application_number,
                    lead_id = p_lead_id,
                    year_id = p_year_id,
                    branch_id = p_branch_id,
                    student_firstname = p_student_firstname,
                    student_middlename = p_student_middlename,
                    student_lastname = p_student_lastname,
                    course_id = p_course_id,
                    gender = p_gender,
                    dob = p_dob,
                    student_email = p_student_email,
                    previous_school = p_previous_school,
					country_id = v_country_id,
					state_id = v_state_id,
					city_id =v_city_id,
                    area_id = p_area_id,
                    landmark = p_landmark,
                    address = p_address,
                    present_area_id = p_present_area_id,
                    present_landmark = p_present_landmark,
                    present_address = p_present_address,
                    pincode = p_pincode,
                    religion_id = p_religion_id,
                    cast_id = p_cast_id,
                    nationality = p_nationality,
                    mother_tongue = p_mother_tongue,
                    referrence_name = p_referrence_name,
                    application_status = p_application_status,
                    modified_date = p_modified_date,
                    modified_by = p_modified_by,
					student_photo = p_student_photo
		WHERE
				    application_id  = p_application_id;


		
		 IF row_count() = 0 THEN
					SET p_result = "Sorry!Please try once again";
         ELSE
                    SET p_result = "Sucess";
         END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_application1` (IN `p_application_number` VARCHAR(250), IN `p_lead_id` INT(11), IN `p_year_id` INT(11), IN `p_branch_id` INT(11), IN `p_student_firstname` VARCHAR(250), IN `p_student_middlename` VARCHAR(250), IN `p_student_lastname` VARCHAR(250), IN `p_course_id` INT(11), IN `p_gender` ENUM('Male','Female'), IN `p_dob` DATE, IN `p_student_email` VARCHAR(250), IN `p_previous_school` VARCHAR(250), IN `p_area_id` INT(11), IN `p_landmark` VARCHAR(250), IN `p_address` VARCHAR(250), IN `p_present_area_id` INT(11), IN `p_present_landmark` VARCHAR(250), IN `p_present_address` VARCHAR(250), IN `p_pincode` VARCHAR(50), IN `p_religion_id` INT(11), IN `p_cast_id` INT(11), IN `p_nationality` INT(11), IN `p_mother_tongue` INT(11), IN `p_referrence_name` VARCHAR(250), IN `p_application_status` ENUM('application','admission'), IN `p_modified_date` DATETIME, IN `p_modified_by` INT(11), OUT `p_result` VARCHAR(250), IN `p_application_id` INT, IN `p_student_photo` VARCHAR(250), IN `p_subcast_id` INT(11))  BEGIN

Declare v_country_id int;
	Declare v_state_id int;
	Declare v_city_id int;
	
	
		SELECT 
			country_id,
			state_id,
			city_id
		INTO
			v_country_id,
			v_state_id,
			v_city_id
		FROM
			tbl_area 
		WHERE 
			area_id = p_area_id;
	


		UPDATE
					tbl_applications
		SET
                    application_number = p_application_number,
                    lead_id = p_lead_id,
                    year_id = p_year_id,
                    branch_id = p_branch_id,
                    student_firstname = p_student_firstname,
                    student_middlename = p_student_middlename,
                    student_lastname = p_student_lastname,
                    course_id = p_course_id,
                    gender = p_gender,
                    dob = p_dob,
                    student_email = p_student_email,
                    previous_school = p_previous_school,
					country_id = v_country_id,
					state_id = v_state_id,
					city_id =v_city_id,
                    area_id = p_area_id,
                    landmark = p_landmark,
                    address = p_address,
                    present_area_id = p_present_area_id,
                    present_landmark = p_present_landmark,
                    present_address = p_present_address,
                    pincode = p_pincode,
                    religion_id = p_religion_id,
                    cast_id = p_cast_id,
                    nationality = p_nationality,
                    mother_tongue = p_mother_tongue,
                    referrence_name = p_referrence_name,
                    application_status = p_application_status,
                    modified_date = p_modified_date,
                    modified_by = p_modified_by,
					student_photo = p_student_photo,
                    subcast_id = p_subcast_id
		WHERE
				    application_id  = p_application_id;


		
		 IF row_count() = 0 THEN
					SET p_result = "Sorry!Please try once again";
         ELSE
                    SET p_result = "Sucess";
         END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_applicationFollowup` (IN `p_followup_id` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_application_id` INT(11), IN `p_followup_by` VARCHAR(250), IN `p_followup_date` DATE, IN `p_next_followup_date` DATE, IN `p_comments` TEXT, IN `p_followup_status` ENUM('0','1','2'), IN `p_modified_date` DATETIME, IN `p_modified_by` INT(11), OUT `p_result` VARCHAR(250))  BEGIN

	
	UPDATE
					tbl_application_followups
        SET             
                    branch_id = p_branch_id ,
					 year_id = p_year_id,
					 application_id  = p_application_id,
					 followup_by = p_followup_by,
					 followup_date= p_followup_date,
                     next_followup_date = p_next_followup_date,
					 comments = p_comments,
					 followup_status =p_followup_status,
					 modified_date = p_modified_date,
					 modified_by = p_modified_by
			WHERE 
					 followup_id = p_followup_id;
                 
	
		 IF row_count() = 0 THEN
                        SET p_result = "Record not updated ! Please try once again.";
                ELSE
                       SET p_result = "Sucess";
		 END IF;
   

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_books` (IN `p_book_id` INT(11), IN `p_book_isbn_no` VARCHAR(100), IN `p_book_name` VARCHAR(150), IN `p_accession_number` VARCHAR(150), IN `p_subject_id` INT(11), IN `p_book_category_id` INT(11), IN `p_book_author` VARCHAR(150), IN `p_book_edition` VARCHAR(50), IN `p_book_publisher` VARCHAR(50), IN `p_shelf_rack_id` INT(11), IN `p_position` INT(11), IN `p_currency_id` INT(11), IN `p_book_cost` FLOAT, IN `p_book_quantity` INT, IN `p_language_id` INT(11), IN `p_book_condition` INT(11), IN `p_book_type` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN 
  

UPDATE 
            tbl_books
  SET
        book_isbn_no  =  p_book_isbn_no,
        book_name  =  p_book_name,
        accession_number = p_accession_number,
        subject_id  =  p_subject_id,
        book_category_id  =  p_book_category_id,
        book_author  =  p_book_author,
        book_edition  =  p_book_edition,
        book_publisher= p_book_publisher,
        shelf_rack_id  =  p_shelf_rack_id,
        position  =  p_position,
        currency_id  =  p_currency_id,
        book_cost  =  p_book_cost,
        book_quantity = p_book_quantity,
        language_id  =  p_language_id,
        book_condition  =  p_book_condition,
        book_type = p_book_type,
        status  =  p_status,
        branch_id  =  p_branch_id,
        modified_by  =  p_modified_by,
        modified_date  =  p_modified_date
WHERE
        book_id  =  p_book_id;




        IF row_count() = 0 THEN
        
            SET p_result = "Sorry!Please try once again";
                ELSE
             
                       SET p_result = "Book updated Sucessfully";
        
                END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_branch` (IN `p_branch_name` VARCHAR(250), IN `p_branch_code` VARCHAR(10), IN `p_country_id` INT, IN `p_state_id` INT, IN `p_city_id` INT, IN `p_area_id` INT, IN `p_admin_id` INT, IN `p_branch_status` ENUM('0','1'), IN `p_branch_logo` VARCHAR(250), IN `p_address` VARCHAR(250), IN `p_landmark` VARCHAR(250), IN `p_pincode` VARCHAR(10), IN `p_phone_1` VARCHAR(10), IN `p_phone_2` VARCHAR(10), IN `p_fax` VARCHAR(20), IN `p_enq_required` ENUM('0','1'), IN `p_app_required` ENUM('0','1'), IN `p_modified_date` DATETIME, IN `p_modified_by` INT, IN `p_branch_id` INT)  NO SQL
BEGIN

UPDATE tbl_branches SET branch_name=p_branch_name, branch_code=p_branch_code, branch_status=p_branch_status, branch_logo=branch_logo, admin_id=p_admin_id, country_id=p_country_id, state_id=p_state_id, city_id=p_city_id, area_id=p_area_id, address=p_address, phone_1=p_phone_1, phone_2=p_phone_2, fax=p_fax, landmark=p_landmark, pincode=p_pincode, enq_required=p_enq_required, app_required=p_app_required, modified_date=p_modified_date, modified_by=p_modified_by 
WHERE branch_id = p_branch_id;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_campaign` (IN `p_campaign_id` INT(11), IN `p_campaign_name` VARCHAR(250), IN `p_campaign_supervisor` VARCHAR(100), IN `p_start_date` DATE, IN `p_end_date` DATE, IN `p_address` VARCHAR(250), IN `p_location` VARCHAR(250), IN `p_country_id` INT(11), IN `p_state_id` INT(11), IN `p_city_id` INT(11), IN `p_area_id` INT(11), IN `p_pincode` INT(11), IN `p_campaign_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250), OUT `p_result_flag` INT, IN `p_descriptions` VARCHAR(250))  Begin
UPDATE 
					tbl_campaigns
			SET
					campaign_name  =  p_campaign_name,
					campaign_supervisor  =  p_campaign_supervisor,
					start_date  =  p_start_date,
					end_date  =  p_end_date,
					address  =  p_address,
					location  =  p_location,
					country_id  =  p_country_id,
					state_id  =  p_state_id,
					city_id  =  p_city_id,
					area_id  =  p_area_id,
					pincode  =  p_pincode,
                    descriptions = p_descriptions,
					campaign_status  =  p_campaign_status,
					branch_id  =  p_branch_id,
					modified_by  =  p_modified_by,
					modified_date  =  p_modified_date
			WHERE
					campaign_id  =  p_campaign_id;

			
				IF row_count() = 0 THEN
				SET p_result_flag = 0;
                SET p_result = "Sorry!Please try once again";
                ELSE
					   SET p_result_flag = 1;
                       SET p_result = "Campaing updated Sucessfully";
				
                END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_CampaignData` (IN `p_data_id` INT(11), IN `p_student_name` VARCHAR(250), IN `p_father_name` VARCHAR(250), IN `p_email_id` VARCHAR(250), IN `p_phone` VARCHAR(250), IN `p_gender` VARCHAR(250), IN `p_student_class` VARCHAR(250), IN `p_current_school` VARCHAR(250), IN `p_location` VARCHAR(250), IN `p_address` VARCHAR(250), IN `p_pincode` INT(11), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250), OUT `p_error_flag` INT(10))  NO SQL
BEGIN

UPDATE tbl_campaign_data 
    SET student_name=p_student_name,father_name=p_father_name,
        email_id=p_email_id,phone=p_phone,gender=p_gender,
        student_class=p_student_class,current_school=p_current_school,
        location=p_location,address=p_address,pincode=p_pincode,
        modified_by=p_modified_by,modified_date=p_modified_date
    WHERE data_id=p_data_id;
    SET p_result = 'Success';
	SET p_error_flag = 1;
	
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_contact` (IN `p_contact_id` INT(25), IN `p_first_name` VARCHAR(255), IN `p_last_name` VARCHAR(255), IN `p_job_title` VARCHAR(255), IN `p_company` VARCHAR(255), IN `p_email` VARCHAR(255), IN `p_mobile` VARCHAR(255), IN `p_work_phone` VARCHAR(255), IN `p_home_phone` VARCHAR(255), IN `p_address` TEXT, IN `p_owner` INT(11), IN `p_contact_source` INT(11), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(255))  NO SQL
BEGIN
  UPDATE tbl_contacts 
    SET first_name=p_first_name,last_name = p_last_name,
      job_title = p_job_title,company=p_company,email=p_email,
        mobile=p_mobile,work_phone=p_work_phone,home_phone=p_home_phone,
        address=p_address,owner=p_owner,contact_source = p_contact_source,
        modified_by=p_modified_by,modified_date=p_modified_date
    WHERE  	contact_id=p_contact_id;
    SET p_result = 'Success';
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_discipline` (IN `p_discipline_id` INT(11), IN `p_description` VARCHAR(250), IN `p_date_of_offense` DATETIME, IN `p_reported_by` VARCHAR(250), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_updated_by` INT(11), IN `p_updated_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

	


				UPDATE
										tbl_discipline
					SET
										
										
										description = p_description,
										date_of_offense = p_date_of_offense,
										reported_by = p_reported_by,
										
										branch_id = p_branch_id,
										year_id = p_year_id,
										status = p_status,
										updated_by = p_updated_by,

										updated_date = p_updated_date


					WHERE
										discipline_id =  p_discipline_id ;

										   IF row_count() = 0 THEN
                									   SET p_result = "Sorry!Please try once again";

              								  ELSE
                      									 SET p_result = "Sucess";
				
                							END IF;		






END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_empEducation` (IN `p_emp_education_id` INT(11), IN `p_emp_id` INT(11), IN `p_education` VARCHAR(100), IN `p_institution` VARCHAR(100), IN `p_qualification` INT(11), IN `p_specialisation` VARCHAR(150), IN `p_completion` DATE, IN `p_marks` DOUBLE, IN `p_marks_type` INT(11), IN `p_note` VARCHAR(250), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

UPDATE
					tbl_emp_education
			SET 
					education  =  p_education,
					institution  =  p_institution,
					qualification  =  p_qualification,
					specialisation  =  p_specialisation,
					completion  =  p_completion,
					marks  =  p_marks,
					marks_type  =  p_marks_type,
					note  =  p_note,
					status  =  p_status,
					branch_id  =  p_branch_id,
					modified_by  =  p_modified_by,
					modified_date  =  p_modified_date
		 WHERE
					emp_education_id  =  p_emp_education_id;

		  		IF row_count() = 0 THEN
					
               		 SET p_result = "Sorry!Please try once again";
                ELSE
					  
                   SET p_result = "Update Sucessfully";
				
                END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_enquiry` (IN `p_student_name` VARCHAR(250), IN `p_student_dob` DATE, IN `p_gender` ENUM('Male','Female'), IN `p_course_id` INT, IN `p_previous_school` VARCHAR(250), IN `p_previous_school_location` VARCHAR(250), IN `p_how_do_know_us` INT, IN `p_father_name` VARCHAR(250), IN `p_father_mobile` VARCHAR(15), IN `p_father_email` VARCHAR(250), IN `p_mother_name` VARCHAR(250), IN `p_mother_mobile` VARCHAR(15), IN `p_mother_email` VARCHAR(250), IN `p_address1` VARCHAR(250), IN `p_country_id` INT, IN `p_state_id` INT, IN `p_city_id` INT, IN `p_area_id` INT, IN `p_location` VARCHAR(250), IN `p_lead_date` DATE, IN `p_followup_by` VARCHAR(250), IN `p_lead_category` INT, IN `p_campaign_id` INT, IN `p_modified_date` DATETIME, IN `p_modified_by` INT, IN `p_branch_id` INT, IN `p_lead_id` INT, IN `p_father_designation` VARCHAR(250), IN `p_father_annual_income` VARCHAR(250), IN `p_mother_designation` VARCHAR(250), IN `p_mother_annual_income` VARCHAR(250), IN `p_visit_date` DATE)  NO SQL
BEGIN


UPDATE tbl_leads SET student_name= p_student_name, student_dob= p_student_dob, gender= p_gender, course_id= p_course_id, previous_school= p_previous_school, previous_school_location= p_previous_school_location, how_do_know_us= p_how_do_know_us, father_name= p_father_name, father_mobile= p_father_mobile, father_email= p_father_email, mother_name= p_mother_name, mother_mobile= p_mother_mobile, mother_email= p_mother_email, address1= p_address1, country_id= p_country_id, state_id= p_state_id, city_id= p_city_id, area_id= p_area_id, location= p_location, lead_date= p_lead_date, executive_name= p_followup_by, lead_category= p_lead_category, campaign_id= p_campaign_id, modified_date= p_modified_date, modified_by= p_modified_by, branch_id= p_branch_id, father_designation = p_father_designation, father_annual_income = p_father_annual_income, mother_designation = p_mother_designation, mother_annual_income = p_mother_annual_income,visit_date = p_visit_date WHERE lead_id= p_lead_id;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_exam` (IN `p_exam_id` INT(11), IN `p_exam_name` VARCHAR(100), IN `p_exam_type` INT(11), IN `p_start_date` DATETIME, IN `p_end_date` DATETIME, IN `p_result_type` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_term_id` INT, IN `p_consider_report` INT)  BEGIN

UPDATE 
		tbl_exam
SET
					exam_name = p_exam_name,
					exam_type = p_exam_type,
					start_date = p_start_date,
					end_date = p_end_date,
					result_type = p_result_type,
					status = p_status,
					modified_by = p_modified_by,
					modified_date = p_modified_date,
					term_id = p_term_id,
					consider_report = p_consider_report
WHERE
                    exam_id = p_exam_id;
                     
                IF row_count() = 0 THEN
						SET p_result = "Sorry!Please try once again";
                ELSE
                       SET p_result = 'Success';
				
                END IF;



END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_examCourse` (IN `p_exam_course_id` INT(11), IN `p_exam_id` INT(11), IN `p_course_id` INT(11), IN `p_exam_date` DATETIME, IN `p_subject_id` INT(11), IN `p_syllabus` VARCHAR(150), IN `p_exam_time` TIMESTAMP, IN `p_pass_marks` FLOAT, IN `p_max_marks` INT(11), IN `p_last_date_entry` DATETIME, IN `p_result_type` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN
UPDATE
					tbl_exam_course
		SET
					exam_id = p_exam_id,
					course_id = p_course_id,
					exam_date = p_exam_date,
					subject_id = p_subject_id,
					syllabus = p_syllabus,
					exam_time = p_exam_time,
					pass_marks = p_pass_marks,
					max_marks = p_max_marks,
					last_date_entry = p_last_date_entry,
					result_type = p_result_type,
					status = p_status,
					branch_id = p_branch_id,
					year_id = p_year_id,
					created_by = p_created_by,
					created_date = p_created_date,
					modified_by = p_modified_by,
					modified_date = p_modified_date
		WHERE
					exam_course_id = p_exam_course_id;


				IF row_count() = 0 THEN
						SET p_result = "Sorry!Please try once again";
                ELSE
                       SET p_result = LAST_INSERT_ID();
				
                END IF;
		


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_feeAccount` (IN `p_fee_account_id` INT(11), IN `p_branch_id` INT(11), IN `p_fee_account_name` VARCHAR(250), IN `p_fee_bank_name` VARCHAR(250), IN `p_fee_account_branch` VARCHAR(250), IN `p_status` ENUM('0','1'), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250), OUT `p_error_flag` ENUM('0','1'))  BEGIN
DECLARE  v_cnt int;

			SET v_cnt=0;

			SELECT 
					count(1)
			INTO
					v_cnt
			FROM
					tbl_fee_accounts
			WHERE
					branch_id = p_branch_id
			AND
					upper(fee_account_name) = upper(p_fee_account_name)
			AND 
					fee_account_id != p_fee_account_id;
			IF(v_cnt =0) THEN
		
			UPDATE
							tbl_fee_accounts
		   SET
							branch_id =p_branch_id ,
                            fee_account_name = p_fee_account_name,
                            fee_bank_name = p_fee_bank_name,
                            fee_account_branch = p_fee_account_branch,
                            status = p_status,
                            modified_by = p_modified_by,
							modified_date = p_modified_date
		       WHERE 
						   fee_account_id = p_fee_account_id;

               IF row_count() = 0 THEN
                   SET p_result = "Sorry!Please try once again";
					SET p_error_flag = '0';
                ELSE
                       SET p_result = "Account is updated successfully";
						SET p_error_flag = '1';
				
                END IF;
	
			ELSE
					 SET p_result = "Sorry!Please try once again,Account name already exist";
						SET p_error_flag = '0';
			END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_feeCategory` (IN `p_fee_category_id` INT(11), IN `p_fee_category_name` VARCHAR(150), IN `p_fee_category_code` VARCHAR(15), IN `p_branch_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250), OUT `p_error_flag` ENUM('0','1'))  BEGIN

DECLARE v_check INT (11) DEFAULT 0;
	
	SELECT count(1)
	INTO v_check 
	FROM tbl_fee_category
	WHERE UPPER(fee_category_name) = UPPER(p_fee_category_name)
	AND branch_id = p_branch_id
	AND fee_category_id != p_fee_category_id;

	IF v_check = 0 THEN


			UPDATE
					tbl_fee_category
			SET	
					
                    fee_category_name = p_fee_category_name,
                    fee_category_code =  UPPER(p_fee_category_code),
                    branch_id = p_branch_id,
					status = p_status,
                    modified_by = p_modified_by,
                    modified_date = p_modified_date
			WHERE
					fee_category_id = p_fee_category_id;


			IF row_count() = 0 THEN
                SET p_result = "Sorry!Please try once again";
				SET p_error_flag = '0';
            ELSE
                SET p_result = "Fee category updated successfully";
				SET p_error_flag = '1';
				
            END IF;

	ELSE 
		SET p_result = "Sorry! Fee category name already exists";
		SET p_error_flag = '0';
	END IF;
			
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_feeConcession` (IN `p_concession_id` INT(11), IN `p_concession_name` VARCHAR(250), IN `p_category_id` INT(11), IN `p_concession_type_id` INT(11), IN `p_percentage` FLOAT, IN `p_adjustment_type` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_modified_by` INT(11), IN `p_modified_date` INT(11), OUT `p_result` VARCHAR(250))  BEGIN

		UPDATE 
				tbl_fee_concession
		SET
				concession_name = p_concession_name,
				category_id = p_category_id,
				concession_type_id = p_concession_type_id,
				percentage = p_percentage,
				adjustment_type = p_adjustment_type,
				branch_id = p_branch_id,
				year_id = p_year_id,
				status = p_status,
				modified_by = p_modified_by,
				modified_date = p_modified_date
		WHERE 
				concession_id = p_concession_id;

			IF row_count() = 0 THEN
               SET p_result = "Sorry!Please try once again";
             ELSE
               SET p_result = "Sucess";
             END IF;  


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_feeCoursePlan` (IN `p_cource_plan_id` INT(11), IN `p_fee_plan_id` INT(11), IN `p_cource_id` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

							UPDATE 
												tbl_fee_cource_plan
							SET
											    fee_plan_id = p_fee_plan_id,
                                                cource_id = p_cource_id,
                                                branch_id = p_branch_id,
                                                year_id = p_year_id,
                                                status = p_status,
                                                modified_by = p_modified_by,
                                                modified_date = p_modified_date

						WHERE 
												cource_plan_id = p_cource_plan_id;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_feeDiscountRequest` (IN `p_student_id` INT(11), IN `p_type_plan_id` INT(11), IN `p_concession_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_discount_amount` FLOAT(10,2), IN `p_application_id` INT, IN `p_admission_number` INT, IN `p_student_academic_id` INT)  BEGIN

DECLARE v_limitcnt INT;
DECLARE v_user_min FLOAT;
DECLARE v_discount FLOAT;
DECLARE  v_pendingdiscount FLOAT;
DECLARE v_actualamount FLOAT;
DECLARE v_paidAmount FLOAT;
DECLARE v_concession FLOAT;

SET v_limitcnt = 0;
SET v_user_min = 0;
SET v_discount = 0;
SET v_pendingdiscount = 0;
SET v_actualamount = 0;
SET v_paidAmount = 0;
SET v_concession = 0;

       
         IF p_discount_amount  > 0  THEN    
            SELECT   
                    IFNULL(SUM(IFNULL(amount,0)),0)
            INTO    
                    v_paidAmount
            FROM    
                    tbl_fee_transactions pt
            WHERE     
                    pt.studnet_id = p_student_id
            AND
                    pt.type_plan_id = p_type_plan_id
			AND pt.status = '0';
            
            SELECT   
                    get_feeTypeamount(fee_type_id)
            INTO
                    v_actualamount
            FROM         
                    tbl_fee_type_plan tp where tp.type_plan_id = p_type_plan_id;
                    
                        
			SELECT IFNULL(get_S_F_discount(p_type_plan_id,p_student_id,p_branch_id,p_year_id),0) INTO v_discount;
     
			SELECT IFNULL(get_S_F_concession (p_type_plan_id , v_actualamount ,p_student_id,p_branch_id,p_year_id),0) INTO v_concession;
     
     
       IF (v_actualamount - v_paidAmount- v_discount - v_concession) >= (p_discount_amount )  THEN   
            
           
    
    
    
        IF p_discount_amount  > 0 THEN
             
            
             
             INSERT INTO
                            tbl_student_plan_type
                            (student_id,
                             application_id,
                             admission_number,
                             student_academic_id,
                             type_plan_id,
                             concession_id,
                             discount_amount,
                             mode_flag,
                             status,
                             branch_id,
                             year_id,
                             created_by,
                             created_date
                                        )
            
            VALUES
                            (p_student_id,
                             p_application_id,
                             p_admission_number,
                             p_student_academic_id,
                             p_type_plan_id,
                             0,
                             p_discount_amount,
                             'debit',
                             p_status,
                             p_branch_id,
                             p_year_id,
                             p_created_by,
                             p_created_date);
                             
		SET p_result = " - Discount added sucessfuly.";
             
		
        ELSE 
		SET p_result = "We can't provide the discoumt more then balence";    
                    
		END IF; 
		
	END IF; 
    END IF; 

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_feePlan` (IN `p_fee_plan_id` INT(11), IN `p_fee_plan_name` VARCHAR(250), IN `p_new_admissions` TINYINT(1), IN `p_existing_admission` TINYINT(1), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250), OUT `p_error_flag` INT)  BEGIN
DECLARE  v_cnt int;

SET v_cnt=0;

			SELECT 
					count(1)
			INTO
					v_cnt
			FROM
					tbl_fee_plan
			WHERE
					branch_id = p_branch_id
			AND
					year_id = p_year_id
			AND 
					fee_plan_id != p_fee_plan_id
			AND
					upper(fee_plan_name) = upper(p_fee_plan_name);
			
			IF(v_cnt =0) THEN

						UPDATE
											tbl_fee_plan
						SET
											fee_plan_name  = p_fee_plan_name,
                                            new_admissions  = p_new_admissions,
                                            existing_admission  = p_existing_admission,
                                            branch_id  = p_branch_id,
                                            year_id  = p_year_id,
                                            status  = p_status,

                                            modified_by  = p_modified_by,
                                            modified_date  = p_modified_date
					   WHERE
											fee_plan_id   = p_fee_plan_id;

							
						IF row_count() = 0 THEN
                                    SET p_result = "Sorry!Please try once again";
									SET p_error_flag = 0;
                         ELSE
                                    SET p_result = p_fee_plan_id;
									SET p_error_flag = 1;
                         END IF;
	ELSE
				SET p_result = "Sorry!Please try once again,Plan name already exist";
				SET p_error_flag = 0;
			END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_feeTerm` (IN `p_terms_id` INT(11), IN `p_type_id` INT(11), IN `p_amount` FLOAT, IN `p_start_date` DATETIME, IN `p_due_date` DATETIME, IN `p_end_date` DATETIME, IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_status` INT(11), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

				UPDATE 
					tbl_fee_terms
			SET
					type_id = p_type_id,
                    amount = p_amount,
                    start_date = p_start_date,
                    due_date = p_due_date,
                    end_date = p_end_date,
                    branch_id = p_branch_id,
                    year_id = p_year_id,
                    status = p_status,
                    modified_by = p_modified_by,
                    modified_date = p_modified_date
			WHERE
					terms_id = p_terms_id;
			
				IF row_count() = 0 THEN
                                    SET p_result = "Sorry!Please try once again";
                         ELSE
                                    SET p_result = "Sucess";
                         END IF;
			

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_feeTransactions` (IN `p_transaction_id` INT(11), IN `p_manual_receipt_number` VARCHAR(250), IN `p_system_receipt_number` VARCHAR(250), IN `p_studnet_id` INT(11), IN `p_terms_id` INT(11), IN `p_type_plan_id` INT(11), IN `p_transaction_date` DATETIME, IN `p_amount` FLOAT, IN `p_branch_id` INT(11), IN `p_cource_plan_id` INT(11), IN `p_status` INT(11), IN `p_modified_by` INT(11), IN `p_modified_date` INT(11), IN `p_pre_transaction_id` INT(11), OUT `p_result` VARCHAR(250))  BEGIN


		UPDATE 
					tbl_fee_transactions
		SET
					status = 1,
					modified_by = p_modified_by,
					modified_date = p_modified_date,
                    pre_transaction_id = p_pre_transaction_id
		WHERE 
					transaction_id = p_transaction_id;

		INSERT INTO
							tbl_fee_transactions
							(manual_receipt_number,
                            system_receipt_number,
                            studnet_id,
                            terms_id,
                            type_plan_id,
                            transaction_date,
                            amount,
                            branch_id,
                            cource_plan_id,
                            status,
                            created_by,
                            created_date
)
			VALUES
							(p_manual_receipt_number,
                            p_system_receipt_number,
                            p_studnet_id,
                            p_terms_id,
                            p_type_plan_id,
                            p_transaction_date,
                            p_amount,
                            p_branch_id,
                            p_cource_plan_id,
                            p_status,
                            p_modified_by,
                            p_modified_date
                            );



				IF row_count() = 0 THEN
                                                SET p_result = "Sorry!Please try once again";
                                     ELSE
                                                SET p_result = "Sucess";
                                     END IF;











END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_feeType` (IN `p_fee_type_id` INT(11), IN `p_fee_type_name` VARCHAR(250), IN `p_fee_type_code` VARCHAR(250), IN `p_fee_account_id` INT(11), IN `p_fee_category_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_fee_terms` INT, IN `p_print_name` VARCHAR(250), OUT `p_error_flag` INT, IN `p_year_id` INT)  BEGIN

DECLARE  v_cnt int;


DECLARE EXIT HANDLER FOR SQLEXCEPTION    
BEGIN


   	
	SET p_result ='Due to techinical issues your request cancels, Please try once again.';
   SET p_error_flag = 0;

END;






SET v_cnt=0;

SELECT 
	count(1)
INTO
	v_cnt
FROM
	tbl_fee_type
WHERE
	branch_id = p_branch_id
AND
	year_id = p_year_id
AND
	upper(fee_type_name) = upper(p_fee_type_name)
AND 
	fee_type_id != p_fee_type_id;

IF(v_cnt =0) THEN

	UPDATE
				tbl_fee_type
		SET
				fee_type_name = p_fee_type_name,
				print_name = p_print_name,
                fee_type_code = p_fee_type_code,
                fee_account_id = p_fee_account_id,
                fee_category_id = p_fee_category_id,
                status = p_status,
				branch_id = p_branch_id,
				fee_terms = p_fee_terms,
                modified_by = p_modified_by,
                modified_date = p_modified_date
	 	WHERE 
				fee_type_id = p_fee_type_id ;
		

				IF row_count() = 0 THEN
                   SET p_result = "Sorry!Please try once again";
					SET p_error_flag = 1;
                ELSE
                       SET p_result = p_fee_type_id;
						SET p_error_flag = 1;
				
                END IF;
		
		
	ELSE
		SET p_result = "Sorry!Please try once again,Fee type name already exist";
		SET p_error_flag = 0;
	END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_feeTypePlan` (IN `p_type_plan_id` INT(11), IN `p_fee_plan_id` INT(11), IN `p_fee_type_id` INT(11), IN `p_mandatory` TINYINT(1), IN `p_status` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN


							UPDATE
											tbl_fee_type_plan
							SET
											fee_plan_id = p_fee_plan_id,
                                            fee_type_id = p_fee_type_id,
                                            mandatory = p_mandatory,
                                            status = p_status,
                                            branch_id = p_branch_id,
                                            year_id = p_year_id,
                                            modified_by = p_modified_by,
                                            modified_date = p_modified_date
						WHERE
											type_plan_id = p_type_plan_id;

					
						IF row_count() = 0 THEN
                                    SET p_result = "Sorry!Please try once again";
                         ELSE
                                    SET p_result = "Sucess";
                         END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_inventory_item` (IN `p_item_id` INT(11), IN `p_item_name` VARCHAR(250), IN `p_inv_category_id` INT(11), IN `p_quantity_count` INT(11), IN `p_price` FLOAT(10,2), IN `p_status` ENUM('0','1'), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

DECLARE v_item_id INT(11);

UPDATE tbl_inventory_items SET item_name=p_item_name, inv_category_id=p_inv_category_id, status=p_status, modified_by=p_modified_by, modified_date=p_modified_date
WHERE item_id = p_item_id;

UPDATE tbl_item_quantity SET quantity_count=p_quantity_count, price=p_price, status=p_status, modified_by=p_modified_by, modified_date=p_modified_date
WHERE item_id = p_item_id;
    
SET p_result = p_item_id;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_leadFollowup` (IN `p_followup_id` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_lead_id` INT(11), IN `p_followup_by` VARCHAR(250), IN `p_followup_date` DATE, IN `p_next_followup_date` DATE, IN `p_comments` TEXT, IN `p_followup_status` ENUM('0','1','2'), IN `p_modified_date` DATETIME, IN `p_modified_by` INT(11), OUT `p_result` VARCHAR(250))  BEGIN

		UPDATE
					tbl_lead_followups
        SET             
                    branch_id = p_branch_id ,
					 year_id = p_year_id,
					 lead_id  = p_lead_id,
					 followup_by = p_followup_by,
					 followup_date= p_followup_date,
                     next_followup_date = p_next_followup_date,
					 comments = p_comments,
					 followup_status =p_followup_status,
					 modified_date = p_modified_date,
					 modified_by = p_modified_by
			WHERE 
					 followup_id = p_followup_id;
                 
	
		 IF row_count() = 0 THEN
                        SET p_result = "Record not updated ! Please try once again.";
                ELSE
                       SET p_result = "Sucess";
		 END IF;
   

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_route` (IN `p_route_id` INT(11), IN `p_branchi_id` INT(11), IN `p_route_name` VARCHAR(250), IN `p_start_point` VARCHAR(250), IN `p_end_point` VARCHAR(250), IN `p_threshold` VARCHAR(250), IN `p_status` ENUM('0','1'), IN `p_modified_by` INT(11), IN `p_modifed_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN


UPDATE
								tbl_route
			SET							
branchi_id = p_branchi_id,
route_name = p_route_name,
start_point = p_start_point,
end_point = p_end_point,
threshold_km = p_threshold,
status = p_status,
modified_by = p_modified_by,
modifed_date = p_modifed_date

WHERE 
					route_id = p_route_id;

					
					

										   IF row_count() = 0 THEN
                									   SET p_result = "Sorry!Please try once again";

              								  ELSE
                      									 SET p_result = "Sucess";
				
                							END IF;	



END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_SpecialScheme` (IN `p_special_scheme_id` INT(11), IN `p_special_scheme_name` VARCHAR(250), IN `p_status` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250), OUT `p_error_flag` INT)  NO SQL
BEGIN
DECLARE  v_cnt int;

SET v_cnt=0;

			SELECT 
					count(1)
			INTO
					v_cnt
			FROM
					tbl_special_schemes
			WHERE
					branch_id = p_branch_id
			AND
					year_id = p_year_id
			AND 
					special_scheme_id != p_special_scheme_id
			AND
					upper(special_scheme_name) = upper(p_special_scheme_name);
			
			IF(v_cnt =0) THEN

						UPDATE
											tbl_special_schemes						SET
											special_scheme_name  = p_special_scheme_name,                                           
                                            branch_id  = p_branch_id,
                                            year_id  = p_year_id,
                                            status  = p_status,
                                            modified_by  = p_modified_by,
                                            modified_date  = p_modified_date
					   WHERE
											special_scheme_id   = p_special_scheme_id;

							
						IF row_count() = 0 THEN
                                    SET p_result = "Sorry!Please try once again";
									SET p_error_flag = 0;
                         ELSE
                                    SET p_result = p_special_scheme_id;
									SET p_error_flag = 1;
                         END IF;
	ELSE
				SET p_result = "Sorry!Please try once again,Plan name already exist";
				SET p_error_flag = 0;
			END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_student` (IN `p_student_id` INT(11), IN `p_admission_number` INT(11), IN `p_student_number` INT(11), IN `p_student_name` VARCHAR(250), IN `p_student_middlename` VARCHAR(250), IN `p_student_lastname` VARCHAR(250), IN `p_family_doctor` VARCHAR(250), IN `p_doctor_mobile` VARCHAR(250), IN `p_gender` ENUM('Male','Female'), IN `p_student_dob` DATETIME, IN `p_place_birth` VARCHAR(250), IN `p_student_email` VARCHAR(250), IN `p_address` VARCHAR(250), IN `p_landmark` VARCHAR(250), IN `p_area_id` INT(11), IN `p_pincode` VARCHAR(250), IN `p_present_landmark` VARCHAR(250), IN `p_present_address` VARCHAR(250), IN `p_present_area_id` INT(11), IN `p_present_pincode` VARCHAR(250), IN `p_blood_group` VARCHAR(250), IN `p_moleidentity1` VARCHAR(250), IN `p_moleidentity2` VARCHAR(250), IN `p_religion_id` INT(11), IN `p_nationality_id` INT(11), IN `p_mother_tongue` INT(11), IN `p_referred_by` INT(11), IN `p_referred_name` VARCHAR(250), IN `p_previous_school` VARCHAR(250), IN `p_application_id` INT(11), IN `p_enquery_id` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

	Declare v_country_id int;
	Declare v_state_id int;
	Declare v_city_id int;
	Declare v_p_country_id int;
	Declare v_p_state_id int;
	Declare v_p_city_id int;


	



		SELECT 
			country_id,
			state_id,
			city_id
		INTO
			v_country_id,
			v_state_id,
			v_city_id

		FROM
			tbl_area 
		WHERE 
			area_id = p_area_id;

		SELECT 
			country_id,
			state_id,
			city_id
		INTO
			v_p_country_id,
			v_p_state_id,
			v_p_city_id

		FROM
			tbl_area 
		WHERE 
			area_id = p_present_area_id;


		UPDATE 
				tbl_student
		SET
				admission_number = p_admission_number,
				student_number = p_student_number,
				student_name = p_student_name,
				student_middlename = p_student_middlename,
				student_lastname = p_student_lastname,
				family_doctor = p_family_doctor,
				doctor_mobile = p_doctor_mobile,
				gender = p_gender,
				student_dob = p_student_dob,
				place_birth = p_place_birth,
				student_email = p_student_email,
				address = p_address,
				landmark = p_landmark,
				area_id = p_area_id,
				city_id = v_city_id,
				state_id = v_state_id,
				country_id = v_country_id,
				pincode = p_pincode,
				present_landmark = p_present_landmark,
				present_address = p_present_address,
				present_area_id = p_present_area_id,
				present_city_id = v_p_city_id,
				present_state_id = v_p_state_id,
				present_country_id = v_p_country_id,
				present_pincode = p_present_pincode,
				blood_group = p_blood_group,
				moleidentity1 = p_moleidentity1,
				moleidentity2 = p_moleidentity2,
				religion_id = p_religion_id,
				nationality_id = p_nationality_id,
				mother_tongue = p_mother_tongue,
				referred_by = p_referred_by,
				referred_name = p_referred_name,
				previous_school = p_previous_school,
				application_id = p_application_id,
				enquery_id = p_enquery_id,
				branch_id = p_branch_id,
				year_id = p_year_id,
				status = p_status,
				modified_by = p_modified_by,
				modified_date = p_modified_date
		WHERE
				student_id = p_student_id;
			
		IF row_count() = 0 THEN
				SET p_result = "Sorry!Please try once again";
		ELSE
				SET p_result = "Sucess";
		END IF;  


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_studentAcademic` (IN `p_student_academic_id` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_admission_number` INT(11), IN `p_student_id` INT(11), IN `p_roll_number` INT(11), IN `p_course_id` INT(11), IN `p_daycare_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

			UPDATE 
					tbl_student_academic
			SET		
					branch_id = p_branch_id,
					year_id = p_year_id,
					admission_number = p_admission_number,
					student_id = p_student_id,
					roll_number = p_roll_number,
					course_id = p_course_id,
					daycare_id = p_daycare_id,
					status = p_status,
					modified_by = p_modified_by,
					modified_date = p_modified_date
			WHERE
					student_academic_id = p_student_academic_id;
					
                                     IF row_count() = 0 THEN
                                                SET p_result = "Sorry!Please try once again";
                                     ELSE
                                                SET p_result = "Sucess";
                                     END IF;  		
			
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_studentAttendance` (IN `p_attendance_id` INT(11), IN `p_attendance_flag` ENUM('P','A','L'), IN `p_course_id` INT(11), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_student_academic_id` INT(11), IN `p_student_id` INT(11), IN `p_subject_id` INT(11), IN `p_period_id` INT(11), IN `p_remarks` VARCHAR(250), IN `p_leave_flag` TINYINT(1), IN `p_leave_confirmed_by` INT(11), IN `p_status` ENUM('0','1','2'), IN `p_attendance_by` INT(11), IN `p_attendance_date` DATETIME, IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

UPDATE 
					tbl_student_attendance
			SET
					attendance_flag = p_attendance_flag,
					remarks =p_remarks,
					leave_flag = p_leave_flag,
					leave_confirmed_by = p_leave_confirmed_by,
					modified_by =p_modified_by,
					modified_date = p_modified_date
		     WHERE
					
					attendance_id = p_attendance_id ;

					
				IF row_count() = 0 THEN

					   SET p_result = "Sorry!Please try once again";
                ELSE
                       SET p_result = "Success";
				
                END IF;		
					
	

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_studentPlanType` (IN `p_student_id` INT(11), IN `p_type_plan_id` INT(11), IN `p_concession_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_discount_amount` FLOAT(10,2))  BEGIN

DECLARE v_limitcnt INT;
DECLARE v_user_min FLOAT;
DECLARE v_discount FLOAT;
DECLARE  v_pendingdiscount FLOAT;
DECLARE v_actualamount FLOAT;
DECLARE v_paidAmount FLOAT;
DECLARE v_concession FLOAT;
DECLARE v_student_academic_id INT;
DECLARE v_admission_number varchar(50);


SET v_limitcnt = 0;
SET v_user_min = 0;
SET v_discount = 0;
SET v_pendingdiscount = 0;
SET v_actualamount = 0;
SET v_paidAmount = 0;
SET v_concession = 0;
SET v_student_academic_id =0;
SET v_admission_number = '0';


		SELECT 
					student_academic_id,
					admission_number 
		INTO
					v_student_academic_id,
                    v_admission_number
		FROM 
					tbl_student_academic 
		WHERE 
					student_id =  p_student_id
		AND
					year_id = p_year_id
		AND
					status='0' ;

       
         IF p_discount_amount  > 0   OR  p_concession_id > 0 THEN
    
            SELECT   
                    IFNULL(SUM(IFNULL(amount,0)),0)
            INTO    
                    v_paidAmount
            FROM    
                    tbl_fee_transactions pt
            WHERE     
                    pt.studnet_id = p_student_id
            AND
                    pt.type_plan_id = p_type_plan_id
		    AND 
					pt.status='0';
            
            SELECT   
                    get_feeTypeamount(fee_type_id)
            INTO
                    v_actualamount
            FROM         
                    tbl_fee_type_plan tp where tp.type_plan_id = p_type_plan_id;
                    
                        
     SELECT IFNULL(get_S_F_discount(p_type_plan_id,p_student_id,p_branch_id,p_year_id),0) INTO v_discount;
     
     SELECT IFNULL(get_S_F_concession (p_type_plan_id , v_actualamount ,p_student_id,p_branch_id,p_year_id),0) INTO v_concession;
     
     SELECT   IFNULL(SUM(IFNULL(discount_amount,0)),0) INTO v_pendingdiscount FROM tbl_approval_requests WHERE  student_id = p_student_id  and type_plan_id = p_type_plan_id and branch_id = p_branch_id and approval_status = 'Pending' and status='0';
        
    
       IF (v_actualamount - v_paidAmount- v_discount - v_pendingdiscount - v_concession) >= (p_discount_amount )  THEN   
            
           
    
    
    
        IF p_discount_amount  > 0 THEN
             
            
            
            SELECT 
                        min(min_limit)
             INTO 
                        v_user_min    
             FROM 
                        tbl_approvals 
             WHERE 
                        approval_type ='discounts'
             AND 
                        branch_id = p_branch_id;
             
           IF v_user_min >   p_discount_amount THEN
             
             INSERT INTO
                            tbl_student_plan_type
                            (student_id,
                             admission_number,
                             student_academic_id,
                             type_plan_id,
                             concession_id,
                             discount_amount,
                             mode_flag,
                             status,
                             branch_id,
                             year_id,
                             created_by,
                             created_date
                                        )
            
            VALUES
                            (p_student_id,
                             v_admission_number,
                             v_student_academic_id,
                             p_type_plan_id,
                             0,
                             p_discount_amount,
                             'debit',
                             p_status,
                             p_branch_id,
                             p_year_id,
                             p_created_by,
                             p_created_date);
                             
				SET p_result = " - Discount added sucessfuly.";
                             
                ELSE 
                            INSERT INTO 
                                        tbl_approval_requests
                                        (user_id,
                                         student_id,
                                         type_plan_id,
                                         discount_amount,
                                         concession_id,
                                         branch_id,
                                         year_id,
                                         status,
                                         approval_status,
                                         created_by,
                                         created_date)
                                VALUES 
                                        (p_created_by,
                                        p_student_id,
                                        p_type_plan_id,
                                        p_discount_amount,
                                        0,
                                        p_branch_id, 
                                        p_year_id,
                                        p_status,
                                        'Pending',
                                        p_created_by,
                                        p_created_date);
                                        
                SET p_result = "- Discount request sent to approval- Once approved its reflect in discount.";
                         
                END IF; 
                
                
                
            
             
             
             
             END IF; 
             
        IF p_concession_id  > 0 THEN     
     
                INSERT INTO
                            tbl_student_plan_type
                            (student_id,
                             admission_number,
                             student_academic_id,
                             type_plan_id,
                             concession_id,
                             discount_amount,
                             mode_flag,
                             status,
                             branch_id,
                             year_id,
                             created_by,
                             created_date
                                        )
            
            VALUES
                            (p_student_id,
                             v_admission_number,
                             v_student_academic_id,
                             p_type_plan_id,
                             p_concession_id,
                             0,
                             'debit',
                             p_status,
                             p_branch_id,
                             p_year_id,
                             p_created_by,
                             p_created_date);
                
        END IF; 
        
        
        ELSE 
                 SET p_result = "We can't provide the discoumt more then balence";    
                    
            END IF; 
    
    END IF; 
        
        
        
        


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_studentPlanType1` (IN `p_student_id` INT(11), IN `p_type_plan_id` INT(11), IN `p_concession_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_discount_amount` FLOAT(10,2))  BEGIN

DECLARE v_limitcnt INT;
DECLARE v_user_min FLOAT;
DECLARE v_discount FLOAT;
DECLARE  v_pendingdiscount FLOAT;
DECLARE v_actualamount FLOAT;
DECLARE v_paidAmount FLOAT;
DECLARE v_concession FLOAT;
DECLARE v_student_academic_id INT;
DECLARE v_admission_number varchar(50);


SET v_limitcnt = 0;
SET v_user_min = 0;
SET v_discount = 0;
SET v_pendingdiscount = 0;
SET v_actualamount = 0;
SET v_paidAmount = 0;
SET v_concession = 0;
SET v_student_academic_id =0;
SET v_admission_number = '0';


		SELECT 
					student_academic_id,
					admission_number 
		INTO
					v_student_academic_id,
                    v_admission_number
		FROM 
					tbl_student_academic 
		WHERE 
					student_id =  p_student_id
		AND
					year_id = p_year_id
		AND
					status='0' ;

       
         IF p_discount_amount  > 0   OR  p_concession_id > 0 THEN
    
            SELECT   
                    IFNULL(SUM(IFNULL(amount,0)),0)
            INTO    
                    v_paidAmount
            FROM    
                    tbl_fee_transactions pt
            WHERE     
                    pt.studnet_id = p_student_id
            AND
                    pt.type_plan_id = p_type_plan_id
		    AND 
					pt.status='0';
            
            SELECT   
                    get_feeTypeamount(fee_type_id)
            INTO
                    v_actualamount
            FROM         
                    tbl_fee_type_plan tp where tp.type_plan_id = p_type_plan_id;
                    
                        
     SELECT IFNULL(get_S_F_discount(p_type_plan_id,p_student_id,p_branch_id,p_year_id),0) INTO v_discount;
     
     SELECT IFNULL(get_S_F_concession (p_type_plan_id , v_actualamount ,p_student_id,p_branch_id,p_year_id),0) INTO v_concession;
     
     SELECT   IFNULL(SUM(IFNULL(discount_amount,0)),0) INTO v_pendingdiscount FROM tbl_approval_requests WHERE  student_id = p_student_id  and type_plan_id = p_type_plan_id and branch_id = p_branch_id and approval_status = 'Pending' and status='0';
        
    
       IF (v_actualamount - v_paidAmount- v_discount - v_pendingdiscount - v_concession) >= (p_discount_amount )  THEN   
            
           
    
    
    
        IF p_discount_amount  > 0 THEN
             
            
            
            SELECT 
                        min(min_limit)
             INTO 
                        v_user_min    
             FROM 
                        tbl_approvals 
             WHERE 
                        approval_type ='discounts'
             AND 
                        branch_id = p_branch_id;
             
           IF v_user_min >   p_discount_amount THEN
             
             INSERT INTO
                            tbl_student_plan_type
                            (student_id,
                             admission_number,
                             student_academic_id,
                             type_plan_id,
                             concession_id,
                             discount_amount,
                             mode_flag,
                             status,
                             branch_id,
                             year_id,
                             created_by,
                             created_date
                                        )
            
            VALUES
                            (p_student_id,
                             v_admission_number,
                             v_student_academic_id,
                             p_type_plan_id,
                             0,
                             p_discount_amount,
                             'debit',
                             p_status,
                             p_branch_id,
                             p_year_id,
                             p_created_by,
                             p_created_date);
                             
				SET p_result = " - Discount added sucessfuly.";
                             
                ELSE 
                            INSERT INTO 
                                        tbl_approval_requests
                                        (user_id,
                                         student_id,
                                         type_plan_id,
                                         discount_amount,
                                         concession_id,
                                         branch_id,
                                         year_id,
                                         status,
                                         approval_status,
                                         created_by,
                                         created_date)
                                VALUES 
                                        (p_created_by,
                                        p_student_id,
                                        p_type_plan_id,
                                        p_discount_amount,
                                        0,
                                        p_branch_id, 
                                        p_year_id,
                                        p_status,
                                        'Pending',
                                        p_created_by,
                                        p_created_date);
                                        
                SET p_result = "- Discount request sent to approval- Once approved its reflect in discount.";
                         
                END IF; 
                
                
                
            
             
             
             
             END IF; 
             
        IF p_concession_id  > 0 THEN     
     
                INSERT INTO
                            tbl_student_plan_type
                            (student_id,
                             admission_number,
                             student_academic_id,
                             type_plan_id,
                             concession_id,
                             discount_amount,
                             mode_flag,
                             status,
                             branch_id,
                             year_id,
                             created_by,
                             created_date
                                        )
            
            VALUES
                            (p_student_id,
                             v_admission_number,
                             v_student_academic_id,
                             p_type_plan_id,
                             p_concession_id,
                             0,
                             'debit',
                             p_status,
                             p_branch_id,
                             p_year_id,
                             p_created_by,
                             p_created_date);
                
        END IF; 
        
        
        ELSE 
                 SET p_result = "We can't provide the discoumt more then balence";    
                    
            END IF; 
    
    END IF; 
        
        
        
        
        


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_studentPlanType_promotion` (IN `p_student_id` INT(11), IN `p_type_plan_id` INT(11), IN `p_concession_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250), IN `p_discount_amount` FLOAT(10,2))  BEGIN

DECLARE v_limitcnt INT;
DECLARE v_user_min FLOAT;
DECLARE v_discount FLOAT;
DECLARE  v_pendingdiscount FLOAT;
DECLARE v_actualamount FLOAT;
DECLARE v_paidAmount FLOAT;
DECLARE v_concession FLOAT;
DECLARE v_student_academic_id INT;
DECLARE v_admission_number varchar(50);


SET v_limitcnt = 0;
SET v_user_min = 0;
SET v_discount = 0;
SET v_pendingdiscount = 0;
SET v_actualamount = 0;
SET v_paidAmount = 0;
SET v_concession = 0;
SET v_student_academic_id =0;
SET v_admission_number = '0';


		SELECT 
					student_academic_id,
					admission_number 
		INTO
					v_student_academic_id,
                    v_admission_number
		FROM 
					tbl_student_academic 
		WHERE 
					student_id =  p_student_id
		AND
					year_id = p_year_id
		AND
					status='0' ;

       
         IF p_discount_amount  > 0   OR  p_concession_id > 0 THEN
    
            SELECT   
                    IFNULL(SUM(IFNULL(amount,0)),0)
            INTO    
                    v_paidAmount
            FROM    
                    tbl_fee_transactions pt
            WHERE     
                    pt.studnet_id = p_student_id
            AND
                    pt.type_plan_id = p_type_plan_id
		    AND 
					pt.status='0';
            
            SELECT   
                    get_feeTypeamount(fee_type_id)
            INTO
                    v_actualamount
            FROM         
                    tbl_fee_type_plan tp where tp.type_plan_id = p_type_plan_id;
                    
                        
     SELECT IFNULL(get_S_F_discount(p_type_plan_id,p_student_id,p_branch_id,p_year_id),0) INTO v_discount;
     
     SELECT IFNULL(get_S_F_concession (p_type_plan_id , v_actualamount ,p_student_id,p_branch_id,p_year_id),0) INTO v_concession;
     
     SELECT   IFNULL(SUM(IFNULL(discount_amount,0)),0) INTO v_pendingdiscount FROM tbl_approval_requests WHERE  student_id = p_student_id  and type_plan_id = p_type_plan_id and branch_id = p_branch_id and approval_status = 'Pending' and status='0';
        
    
       IF (v_actualamount - v_paidAmount- v_discount - v_pendingdiscount - v_concession) >= (p_discount_amount )  THEN   
            
           
    
    
    
        IF p_discount_amount  > 0 THEN
             
            
            
           
             

             
             INSERT INTO
                            tbl_student_plan_type
                            (student_id,
                             admission_number,
                             student_academic_id,
                             type_plan_id,
                             concession_id,
                             discount_amount,
                             mode_flag,
                             status,
                             branch_id,
                             year_id,
                             created_by,
                             created_date
                                        )
            
            VALUES
                            (p_student_id,
                             v_admission_number,
                             v_student_academic_id,
                             p_type_plan_id,
                             0,
                             p_discount_amount,
                             'debit',
                             p_status,
                             p_branch_id,
                             p_year_id,
                             p_created_by,
                             p_created_date);
                             
				SET p_result = " - Discount added sucessfuly.";
        
                
                
                
            
             
             
             
             END IF; 
             
        IF p_concession_id  > 0 THEN     
     
                INSERT INTO
                            tbl_student_plan_type
                            (student_id,
                             admission_number,
                             student_academic_id,
                             type_plan_id,
                             concession_id,
                             discount_amount,
                             mode_flag,
                             status,
                             branch_id,
                             year_id,
                             created_by,
                             created_date
                                        )
            
            VALUES
                            (p_student_id,
                             v_admission_number,
                             v_student_academic_id,
                             p_type_plan_id,
                             p_concession_id,
                             0,
                             'debit',
                             p_status,
                             p_branch_id,
                             p_year_id,
                             p_created_by,
                             p_created_date);
                
        END IF; 
        
        
        ELSE 
                 SET p_result = "We can't provide the discoumt more then balence";    
                    
            END IF; 
    
    END IF; 
        
        
        
        


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_studentPrevSchool` (IN `p_prev_id` INT(11), IN `p_school_name` VARCHAR(100), IN `p_student_id` INT(11), IN `p_class_id` INT(11), IN `p_medium_id` INT(11), IN `p_board_id` INT(11), IN `p_prevresult` VARCHAR(200), IN `p_year_id` INT(11), IN `p_address` VARCHAR(250), IN `p_location` VARCHAR(250), IN `p_area_id` INT(11), IN `p_city_id` INT(11), IN `p_state_id` INT(11), IN `p_country_id` INT(11), IN `p_pincode` VARCHAR(20), IN `p_status` ENUM('0','1'), IN `p_created_by` INT(11), IN `p_created_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

	
	UPDATE
					 tbl_student_previousschool
	SET
					
					school_name = p_school_name,
					class_id = p_class_id,
					medium_id = p_medium_id,
					board_id = p_board_id,
					prevresult = p_prevresult,
					year_id = p_year_id,
					address = p_address,
					location = p_location,
					area_id = p_area_id,
					city_id = p_city_id,
					state_id = p_state_id,
					country_id = p_country_id,
					pincode = p_pincode,
					status = p_status,
					modified_by = p_created_by,
					modified_date = p_created_date

	WHERE
			prev_id = p_prev_id;


				IF row_count() = 0 THEN
               		  SET p_result = "Sorry!Please try once again";
                ELSE
                       SET p_result = "Sucess";
				
                END IF;


		
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_tblperiods` (IN `p_period_id` INT(11), IN `p_timetable_id` INT(11), IN `p_subject_id` INT(11), IN `p_teacher_id` INT(11), IN `p_week_day` INT(11), IN `p_duration` TIMESTAMP, IN `p_start_time` TIME, IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_status` ENUM('0','1'), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

UPDATE 
					tbl_periods
			SET
					timetable_id = p_timetable_id,
					subject_id = p_subject_id,
					teacher_id = p_teacher_id,
					week_day = p_week_day,
					duration = p_duration,
					start_time = p_start_time,
					branch_id = p_branch_id,
					year_id = p_year_id,
					status = p_status,
					created_by = p_created_by,
					created_date = p_created_date,
					modified_by = p_modified_by,
					modified_date = p_modified_date
		WHERE
				period_id = p_period_id;

				IF row_count() = 0 THEN
						SET p_result = "Sorry!Please try once again";
                ELSE
                       SET p_result = LAST_INSERT_ID();
				
                END IF;
			


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_timeTable` (IN `p_timetable_id` INT(11), IN `p_timetable_name` VARCHAR(50), IN `p_course_id` INT(11), IN `p_section_id` INT(11), IN `p_num_periods` INT(11), IN `p_start_time` TIME, IN `p_status` ENUM('0','1'), IN `p_branch_id` INT(11), IN `p_year_id` INT(11), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN


		UPDATE 
				tbl_timetable
		SET
				timetable_name = p_timetable_name,
				course_id = p_course_id,
				section_id = p_section_id,
				num_periods = p_num_periods,
				start_time = p_start_time,
				status = p_status,
				branch_id = p_branch_id,
				year_id = p_year_id,
				modified_by = p_modified_by,
				modified_date = p_modified_date
		WHERE
				timetable_id = p_timetable_id;

				IF row_count() = 0 THEN

					   SET p_result = "Sorry!Please try once again";
                ELSE
                       SET p_result = LAST_INSERT_ID();
				
                END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_user` (IN `p_branch_id` INT(11), IN `p_role_id` INT(11), IN `p_user_name` VARCHAR(250), IN `p_user_email` VARCHAR(100), IN `p_user_status` ENUM('0','1','2','3'), IN `p_user_photo` VARCHAR(250), IN `p_modified_date` DATETIME, IN `p_modified_by` INT(11), OUT `p_result` VARCHAR(250), IN `p_user_id` INT(11))  BEGIN






			UPDATE 
					tbl_users
			SET 
					branch_id = p_branch_id,
                    role_id   = p_role_id,
                    user_name = p_user_name,
                    user_email = p_user_email,
                    user_status = p_user_status,
                    user_photo = p_user_photo,
                    modified_date = p_modified_date,
                    modified_by = p_modified_by,
                    attempts = Case when  user_status =1 THEN 0 ELSE attempts END
			WHERE
					user_id =p_user_id;
				
                IF row_count() = 0 THEN
                        SET p_result = "Record not updated ! Please try once again.";
                ELSE
                       SET p_result = "Sucess";
                END IF;
   



END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `update_vechicle` (IN `p_vehicle_id` INT(11), IN `p_branch_id` INT(11), IN `p_vehicle_type` INT(11), IN `p_fuel_type` INT(11), IN `p_capacity` INT(11), IN `p_vehicle_modal` VARCHAR(50), IN `p_vehicle_name` VARCHAR(150), IN `p_vehicle_number` VARCHAR(25), IN `p_purchased_date` DATETIME, IN `p_ownership_type` INT(11), IN `p_cost` FLOAT, IN `p_manufacturing_company` VARCHAR(250), IN `p_vehicle_chassis_no` VARCHAR(50), IN `p_vehicle_engine_no` VARCHAR(50), IN `p_rc_number` VARCHAR(100), IN `p_start_date` DATETIME, IN `p_expiry_date` DATETIME, IN `p_gps_number` VARCHAR(50), IN `p_gps_url` VARCHAR(500), IN `p_vehicle_details` VARCHAR(150), IN `p_status` ENUM('0','1'), IN `p_modified_by` INT(11), IN `p_modified_date` DATETIME, OUT `p_result` VARCHAR(250))  BEGIN

UPDATE
											 tbl_vehicles
					SET
										
branch_id = p_branch_id,
vehicle_type = p_vehicle_type,
fuel_type = p_fuel_type,
capacity = p_capacity,
vehicle_modal = p_vehicle_modal,
vehicle_name = p_vehicle_name,
vehicle_number = p_vehicle_number,
purchased_date = p_purchased_date,
ownership_type = p_ownership_type,
cost = p_cost,
manufacturing_company = p_manufacturing_company,
vehicle_chassis_no = p_vehicle_chassis_no,
vehicle_engine_no = p_vehicle_engine_no,
rc_number = p_rc_number,
start_date = p_start_date,
expiry_date = p_expiry_date,
gps_number = p_gps_number,
gps_url = p_gps_url,
vehicle_details = p_vehicle_details,
status = p_status,
modified_by = p_modified_by,
modified_date = p_modified_date

WHERE
							vehicle_id = p_vehicle_id;





		IF row_count() = 0 THEN
               SET p_result = "Sorry!Please try once again";
            ELSE
                       SET p_result = "Sucess";
				
             END IF;


END$$

--
-- Functions
--
CREATE DEFINER=`root`@`localhost` FUNCTION `checkEmpLeave` (`p_emp_id` INT(12), `p_atten_date` DATE) RETURNS VARCHAR(11) CHARSET latin1 BEGIN
	declare leave_stattus varchar(25);
	declare leave_count int(10);
    declare leave_name varchar(25);
    declare dr varchar(10);
    SET leave_stattus='';
    SET leave_count=0;
    SELECT count(*) ,(CASE WHEN INSTR(lt.leave_type_name, ' ') > 0 THEN
					CONCAT(LEFT(lt.leave_type_name, 1),
					SUBSTRING(lt.leave_type_name, INSTR(lt.leave_type_name, ' ') + 1, 1))
					ELSE LEFT(lt.leave_type_name, 1) END) INTO leave_count,leave_name 
	FROM tbl_leave_requests l
    LEFT JOIN tbl_leave_types lt ON lt.leave_type_id = l.leave_type_id
    where l.employee_id = p_emp_id AND l.status-'0' and ( date(l.approved_from_date)<=date(p_atten_date) AND date(l.approved_to_date) >= date(p_atten_date)) AND l.request_status=130
    group by lt.leave_type_name;
	
    IF leave_count>0 THEN 
		SET leave_stattus=leave_name;
	  ELSE 
		 select count(*) INTO leave_count from tbl_holidays h where h.status='0' AND (date(h.start_date) <= date(p_atten_date) AND date(h.end_date) >= date(p_atten_date)) ; 
		 if leave_count>0 THEN
			 SET leave_stattus='H';
		ELSEIF (WEEKDAY(p_atten_date)='6') THEN 
			SET leave_stattus='WO';
        ELSE 
			SET leave_stattus = '00';
        END if;
    END if;
	RETURN leave_stattus;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `checkEmpPresent` (`p_emp_id` INT(12), `p_atten_date` DATE, `p_attn_in_time` TIME, `p_attn_out_time` TIME) RETURNS VARCHAR(150) CHARSET latin1 BEGIN
declare leave_stattus varchar(25);
   declare punch_time varchar(25);
   declare leave_count int(10);
   SET leave_stattus='';
   SET punch_time=0;
   SET leave_count=0;   
   
   SELECT ADDTIME(field_value,'4:00:00') INTO punch_time FROM tbl_settings WHERE setting_id=3;
   
  select count(*) INTO leave_count from tbl_holidays h where h.status='0' AND h.holiday_type IN(1,2) AND (date(h.start_date) <= date(p_atten_date) AND date(h.end_date) >= date(p_atten_date)) ; 
if leave_count>0 THEN  
    IF(p_attn_out_time<punch_time OR p_attn_in_time>punch_time OR p_attn_out_time IS NULL) THEN
    SET leave_stattus="HOP1/2";     
       ELSE 
         SET leave_stattus='HOP';     
   	END if; 
ELSEIF (WEEKDAY(p_atten_date)='6') THEN 
     IF(p_attn_out_time<punch_time OR p_attn_in_time>punch_time  OR p_attn_out_time IS NULL) THEN
    SET leave_stattus='WOP1/2';
       ELSE 
        SET leave_stattus='WOP';
   	END if;  
ELSE     
      IF(p_attn_out_time<punch_time OR p_attn_in_time>punch_time  OR p_attn_out_time IS NULL) THEN
    SET leave_stattus='P1/2';	
       ELSE 
        SET leave_stattus='P';
   	END if;  
END if;
RETURN leave_stattus;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `checkEmpPresent1` (`p_emp_id` INT(12), `p_atten_date` DATE, `p_attn_in_time` TIME, `p_attn_out_time` TIME) RETURNS VARCHAR(150) CHARSET latin1 BEGIN
declare leave_stattus varchar(25);
   declare punch_time varchar(25);
   declare leave_count int(10);
    declare onduty int(10);
   SET leave_stattus='';
   SET punch_time=0;
   SET leave_count=0;
    SET onduty=0;  
   
   SELECT ADDTIME(field_value,'4:00:00') INTO punch_time FROM tbl_settings WHERE setting_id=3;
   
  select count(*) INTO leave_count from tbl_holidays h where h.status='0' AND h.holiday_type IN(1,2) AND (date(h.start_date) <= date(p_atten_date) AND date(h.end_date) >= date(p_atten_date)) ; 
        select count(*) INTO onduty from tbl_emp_manualattendance d where d.status='0' AND (date(d.attendance_date)=date(p_atten_date)) AND d.attn_inout='2' ; 
if leave_count>0 THEN  
    IF(p_attn_out_time<punch_time OR p_attn_in_time>punch_time OR p_attn_out_time IS NULL) THEN
    SET leave_stattus="HOP1/2";     
       ELSE 
         SET leave_stattus='HOP';     
   	END if; 

      
 
       
       

ELSEIF (onduty>'0') THEN 
    IF(p_attn_out_time<punch_time OR p_attn_in_time>punch_time OR p_attn_out_time IS NULL) THEN
    SET leave_stattus="OD1/2";     
       ELSE 
         SET leave_stattus='OD';     
   	END if; 

ELSEIF (WEEKDAY(p_atten_date)='6') THEN 
     IF(p_attn_out_time<punch_time OR p_attn_in_time>punch_time  OR p_attn_out_time IS NULL) THEN
    SET leave_stattus='WOP1/2';
       ELSE 
        SET leave_stattus='WOP';
   	END if;  
ELSE     
      IF(p_attn_out_time<punch_time OR p_attn_in_time>punch_time  OR p_attn_out_time IS NULL) THEN
    SET leave_stattus='P1/2';	
       ELSE 
        SET leave_stattus='P';
   	END if;  
END if;
RETURN leave_stattus;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `checkStudentHoliday` (`p_atten_date` DATE) RETURNS VARCHAR(11) CHARSET latin1 BEGIN
    declare leave_stattus varchar(25);
    declare leave_count int(10);
       
    SET leave_stattus='';
    SET leave_count=0;


    
  select count(*) INTO leave_count from tbl_holidays h where h.status='0' AND h.holiday_type IN(1,3)  AND (date(h.start_date) <= date(p_atten_date) AND date(h.end_date) >= date(p_atten_date)) ; 
        if leave_count>0 THEN
            SET leave_stattus='H';
        ELSEIF (WEEKDAY(p_atten_date)='6') THEN 
            SET leave_stattus='WO';
        END if;
    
    RETURN leave_stattus;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getBranch` (`p_branch_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE f_branch_name VARCHAR(250);

SELECT 	branch_name
INTO	f_branch_name
FROM	tbl_branches
WHERE	branch_id = p_branch_id;

RETURN f_branch_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getcoursestrength` (`p_course_id` INT, `p_year_id` INT) RETURNS INT(11) BEGIN
DECLARE v_cnt int;

SELECT count(1) into v_cnt from  tbl_student_academic where course_id = p_course_id and year_id = p_year_id and status='0' and promoted='0';
RETURN v_cnt;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getcustomgrade` (`p_question_marks` INT, `p_secuured_marks` INT) RETURNS VARCHAR(100) CHARSET latin1 NO SQL
BEGIN
DECLARE v_gradename varchar(100);
DECLARE v_grademarks FLOAT(10,2);
SELECT (p_secuured_marks/p_question_marks)*100 into v_grademarks from DUAL;
CASE 
WHEN p_secuured_marks = '500' THEN SET v_gradename = "";
WHEN v_grademarks >= 91 THEN SET v_gradename = "A+";
WHEN v_grademarks >= 75 and v_grademarks <= 90.9 THEN SET v_gradename = "A"; 
WHEN v_grademarks >= 56 and v_grademarks <= 74.9 THEN SET v_gradename = "B";
WHEN v_grademarks >= 35 and v_grademarks <= 55.9 THEN SET v_gradename = "C";
WHEN v_grademarks > 0 and v_grademarks <= 34.9  THEN SET v_gradename = "D";
WHEN v_grademarks = 0 THEN SET v_gradename = 'AB';
END CASE;
RETURN v_gradename;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getemprole` (`p_user_id` INT(12)) RETURNS VARCHAR(100) CHARSET latin1 BEGIN
declare v_role_name varchar (100);
select role_name into v_role_name from tbl_user_roles where role_id = (select role_id from tbl_users where user_id = p_user_id);
RETURN v_role_name;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getFeeAmountByTypeplanid` (`p_type_plan_id` INT) RETURNS INT(11) BEGIN
	DECLARE v_amount VARCHAR(250);

    select sum(te.amount) INTO v_amount  
			from tbl_fee_terms te 
			where te.status='0' 
				AND  te.type_id  = (select fee_type_id 
										from tbl_fee_type_plan ty where ty.type_plan_id = p_type_plan_id AND ty.status='0'); 
RETURN v_amount;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getGroupContactsCount` (`p_group_id` INT(10), `p_group_category` INT(20)) RETURNS INT(10) NO SQL
BEGIN
	DECLARE v_category varchar(255);
    DECLARE v_group_count int;
    SELECT g.item_name 
    	INTO v_category 
    	FROM tbl_general_items g 
     	WHERE g.item_id=p_group_category;
    IF v_category='Regular' THEN
    	SELECT COUNT(gc.group_contact_id) 
        INTO v_group_count  
        FROM tbl_group_contact gc 
        WHERE gc.group_id=p_group_id
        AND gc.status!=9;
     ELSEIF v_category='Campaign' THEN
     	SELECT COUNT(cc.cam_contact_id) 
        INTO v_group_count
        FROM tbl_campaign_contact cc
        WHERE cc.group_id=p_group_id
        AND cc.status!=9;
     END IF;
     RETURN v_group_count;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getHOPDays` (`p_emp_id` INT(12), `p_atten_date` DATE) RETURNS FLOAT BEGIN
	declare hop_days float(20);
    declare punch_time varchar(25);    
    SET hop_days=0.0;  
    SET punch_time=0;
    
    SELECT ADDTIME(field_value,'4:00:00') INTO punch_time FROM tbl_settings WHERE setting_id=3;    
    
    select SUM(CASE WHEN (tc.attn_out_time<punch_time OR tc.attn_in_time>punch_time OR tc.attn_out_time IS NULL) THEN 0.5 ELSE 1 END) INTO hop_days
        from tbl_temp_calender tc 			
            inner join tbl_holidays h 				
                on h.branch_id = tc.branch_id
		where h.status='0' AND tc.emp_id=p_emp_id AND ( date(tc.attn_in_date)>=date(h.start_date) AND date(tc.attn_in_date)<=(h.end_date));
        
        
	
		 
        
        
        
				
                
                
						
                    
			
IF(hop_days IS NULL) THEN
	 SET hop_days="0"; 	           	     
END if;       
    
RETURN hop_days;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getMarksGrade` (`p_marks` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_grade VARCHAR(250);

if (p_marks >= 90) THEN
    set v_grade = 'A+';
elseif (p_marks >= 80 AND p_marks <=89.9) THEN
	set v_grade = 'A';
elseif (p_marks >= 50 AND p_marks <=79.9) THEN
	set v_grade = 'B';
else 
     set v_grade = 'C';
END IF;

RETURN v_grade;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getNoHolidays` (`p_atten_date` DATE) RETURNS INT(11) BEGIN
	declare no_holi_days int(10);
    SET no_holi_days=0;
    SELECT IFNULL(SUM(DATEDIFF(end_date,start_date)+1),0) INTO no_holi_days FROM tbl_holidays WHERE status='0' AND holiday_type IN (1,2) AND  (date(end_date)<=LAST_DAY(p_atten_date) and date(start_date)>=DATE_FORMAT(p_atten_date,'%Y-%m-01'));
RETURN no_holi_days;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getNoSundays` (`p_atten_date` DATE) RETURNS INT(11) BEGIN
	DECLARE currdate Date;
    DECLARE enddate date;
    declare numberOfSundays int;
	set numberOfSundays = 0;
    SET currdate = p_atten_date;
    SET enddate =  LAST_DAY(currdate);
    WHILE currdate <= enddate DO
		if DAYNAME(currdate)='Sunday' THEN
			SET numberOfSundays = numberOfSundays+1;
        end if;
        Set currdate = DATE_ADD(currdate,INTERVAL 1 DAY);
    END WHILE;
RETURN numberOfSundays;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getODDays1` (`p_emp_id` INT(12), `p_atten_date` DATE) RETURNS FLOAT BEGIN
  declare od_days float(20);
    declare punch_time varchar(25);    
    SET od_days=0.0;  
    SET punch_time=0;
    
    SELECT ADDTIME(field_value,'4:00:00') INTO punch_time FROM tbl_settings WHERE setting_id=3;    
    
    select SUM(CASE WHEN (tc.attn_out_time<punch_time OR tc.attn_in_time>punch_time OR tc.attn_out_time IS NULL) THEN 0.5 ELSE 1 END) INTO od_days
        from tbl_temp_calender tc       
            inner join tbl_emp_manualattendance h         
                on h.branch_id = tc.branch_id
    where h.status='0' AND tc.emp_id=p_emp_id AND ( date(tc.attn_in_date)=date(h.attendance_date) AND h.attn_inout='2');
        
        
  
     
        
        
        
        
                
                
            
                    
      
IF(od_days IS NULL) THEN
   SET od_days="0";                   
END if;       
    
RETURN od_days;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getparentquestion` (`p_parent_question_id` INT) RETURNS VARCHAR(150) CHARSET latin1 BEGIN
DECLARE v_parent_question_name varchar(150);
SELECT question_name into v_parent_question_name from tbl_feedback_form_questions where question_id = p_parent_question_id LIMIT 0,1;
RETURN v_parent_question_name;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getPresentDays` (`p_emp_id` INT(12), `p_atten_date` DATE) RETURNS FLOAT BEGIN
	declare p_days float(20);
    declare punch_time varchar(25); 
    declare no_holi_days int(10);
    SET no_holi_days=0;
    SET p_days=0.0;  
    SET punch_time=0;
    
    SELECT ADDTIME(field_value,'4:00:00') INTO punch_time FROM tbl_settings WHERE setting_id=3;
        
    select SUM(CASE WHEN (tc.attn_out_time<punch_time OR tc.attn_in_time>punch_time OR tc.attn_out_time IS NULL) THEN 0.5 ELSE 1 END) INTO p_days
        from tbl_emp_attendance tc 			           
		where  tc.emp_id=p_emp_id and date(tc.attn_in_date)<=LAST_DAY(p_atten_date) AND date(tc.attn_in_date)>=date(p_atten_date);
IF(p_days IS NULL) THEN
	 SET p_days="0"; 	           	     
END if;        

RETURN p_days;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getRole` (`p_role_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE f_role_name VARCHAR(250);

SELECT 	role_name
INTO	f_role_name
FROM	tbl_user_roles
WHERE	role_id = p_role_id;

RETURN f_role_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getSectionName` (`p_section_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_section_name VARCHAR(250);

SELECT section_name 
INTO v_section_name
FROM tbl_section 
WHERE section_id = p_section_id;

RETURN v_section_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getSubMarks` (`p_exam_course_id` INT, `p_student_id` INT) RETURNS INT(11) NO SQL
BEGIN

DECLARE v_marks INT(11);

select sum(qm.question_marks)marks into v_marks  from tbl_student_question_marks qm where qm.status='0' AND qm.exam_course_id = p_exam_course_id AND qm.student_id = p_student_id;
RETURN v_marks;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getUpdated` (`p_update` DATETIME) RETURNS VARCHAR(255) CHARSET latin1 NO SQL
BEGIN
	DECLARE DATEAGO varchar(255);
	SELECT CASE 
		WHEN FLOOR(ABS(TIMESTAMPDIFF(MINUTE,NOW(),p_update))) <= 59 THEN 
		CONCAT(FLOOR(ABS(TIMESTAMPDIFF(MINUTE,NOW(),p_update))),' Min(s)  ago') 

		WHEN FLOOR(ABS(TIMESTAMPDIFF(MINUTE,NOW(),p_update))/60) <=23  THEN
		CONCAT(FLOOR(ABS(TIMESTAMPDIFF(MINUTE,NOW(),p_update))/60),' Hour(s) ago') 
	
		WHEN FLOOR(ABS(TIMESTAMPDIFF(MINUTE,NOW(),p_update))/1440) <=30  THEN
		CONCAT(FLOOR(ABS(TIMESTAMPDIFF(MINUTE,NOW(),p_update))/1440),' Day(s) ago')

		ELSE 
		CONCAT(FLOOR(ABS(TIMESTAMPDIFF(MINUTE,NOW(),p_update))/43200),' Month(s) ago') 
        
	END into DATEAGO;
    
    RETURN DATEAGO;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getWokingDays` (`p_atten_date` DATE) RETURNS INT(11) BEGIN
	declare working_days int(10);
    SET working_days=0;
	SELECT 	(DATEDIFF(LAST_DAY(p_atten_date),p_atten_date) + 1) - 
			((WEEK(LAST_DAY(p_atten_date)) - WEEK(p_atten_date)) * 1) -
			(case when weekday(p_atten_date) = 6 then 1 else 0 end) -(SELECT IFNULL(SUM(DATEDIFF(end_date,start_date)+1),0) FROM tbl_holidays WHERE status='0' AND holiday_type IN (1,2) AND  (date(end_date)<=LAST_DAY(p_atten_date) and date(start_date)>=DATE_FORMAT(p_atten_date,'%Y-%m-01'))) INTO working_days;
RETURN working_days;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `getWOPDays` (`p_emp_id` INT(12), `p_atten_date` DATE) RETURNS FLOAT BEGIN
	declare wop_days float(20);
    declare punch_time varchar(25);    
    SET wop_days=0.0;
    SET punch_time=0;
    
    SELECT ADDTIME(field_value,'4:00:00') INTO punch_time FROM tbl_settings WHERE setting_id=3;  
    
    select SUM(CASE WHEN (c.attn_out_time<punch_time OR c.attn_in_time>punch_time OR c.attn_out_time IS NULL) THEN 0.5 ELSE 1 END) INTO wop_days from tbl_temp_calender c where c.emp_id = p_emp_id AND date(attn_in_date) IN (
    select DATE_ADD(p_atten_date, INTERVAL ROW DAY) as Date  from

		(
		SELECT @row := @row + 1 as row FROM 
		(select 0 union all select 1 union all select 3 
				union all select 4 union all select 5 union all select 6) t1,
		(select 0 union all select 1 union all select 3 
				union all select 4 union all select 5 union all select 6) t2, 
		(SELECT @row:=-1) t3 limit 31
		) b
		where 
		DATE_ADD(p_atten_date, INTERVAL ROW DAY)
		between p_atten_date and LAST_DAY(p_atten_date)
		and
		DAYOFWEEK(DATE_ADD(p_atten_date, INTERVAL ROW DAY))=1);
        
IF(wop_days IS NULL) THEN
	 SET wop_days="0"; 	           	     
END if;  

RETURN wop_days;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_applicationName` (`p_application_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_student_name VARCHAR(250);
SELECT 
			CONCAT(student_firstname ,' ', student_lastname)
INTO 
			v_student_name
FROM 
		tbl_applications 
where application_id = p_application_id;


RETURN v_student_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_areaname` (`p_area_id` INT(12)) RETURNS VARCHAR(150) CHARSET latin1 BEGIN
DECLARE v_area_name varchar(150);
SELECT area_name into v_area_name from tbl_area where area_id = p_area_id;
RETURN v_area_name;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_branchName` (`p_branch_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_branch_name VARCHAR(250);

SELECT  
		branch_name
INTO	
		v_branch_name
FROM	
		tbl_branches
WHERE	
		branch_id = p_branch_id;


RETURN v_branch_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_childsibling` (`p_student_id` INT) RETURNS VARCHAR(150) CHARSET latin1 NO SQL
BEGIN
DECLARE v_student_name VARCHAR(150);
DECLARE v_student_id int;
SELECT student_id into v_student_id from tbl_student_academic where sibling_student = p_student_id limit 0,1;
SELECT get_studentName(v_student_id) into v_student_name from tbl_student_academic limit 0,1; 
RETURN v_student_name;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_cityname` (`p_city_id` INT(12)) RETURNS VARCHAR(150) CHARSET latin1 BEGIN
DECLARE v_city_name varchar(150);
SELECT city_name into v_city_name from tbl_city where city_id = p_city_id;
RETURN v_city_name;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_classstrength` (`p_course_id` INT, `p_year_id` INT) RETURNS INT(11) BEGIN
DECLARE v_cnt int;
select count(1) into v_cnt from tbl_student_academic where course_id =p_course_id and year_id = p_year_id  and promoted='0';
RETURN v_cnt;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_countryname` (`p_country_id` INT(12)) RETURNS VARCHAR(150) CHARSET latin1 BEGIN
DECLARE v_country_name varchar(150);
SELECT country_name into v_country_name from tbl_country where country_id = p_country_id;
RETURN v_country_name;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_courseName` (`p_course_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_course_name VARCHAR(250);

SELECT  
		course_name
INTO	
		v_course_name
FROM	
		tbl_course
WHERE	
		course_id = p_course_id;

RETURN v_course_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_courseName_cp_id` (`p_cource_plan_id` INT) RETURNS VARCHAR(50) CHARSET latin1 NO SQL
BEGIN


DECLARE v_course_name VARCHAR(250);

SELECT  
		course_name
INTO	
		v_course_name
FROM	
		tbl_course
WHERE	
		course_id = (SELECT cource_id	FROM tbl_fee_cource_plan	WHERE cource_plan_id = p_cource_plan_id LIMIT 0,1);

RETURN v_course_name;


END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_departmentName` (`p_department_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_dept_name VARCHAR(250);

SELECT  
		department_name
INTO	
		v_dept_name
FROM	
		tbl_departments
WHERE	
		department_id = p_department_id;

RETURN v_dept_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_designationName` (`p_designation_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_desig_name VARCHAR(250);

SELECT  
		designations_name
INTO	
		v_desig_name
FROM	
		tbl_designations
WHERE	
		designation_id = p_designation_id;

RETURN v_desig_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_dropoutsnew` (`p_course_id` INT, `p_year_id` INT) RETURNS INT(11) BEGIN
DECLARE v_cnt int(11);
Select count(1) into v_cnt from tbl_student_academic where course_id = p_course_id and year_id =p_year_id and status='1' and student_id in(select student_id from tbl_student where status='1' and year_id =p_year_id);
RETURN v_cnt;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_dropoutsold` (`p_course_id` INT, `p_year_id` INT) RETURNS INT(11) BEGIN
DECLARE v_cnt int(11);
Select count(1) into v_cnt from tbl_student_academic where course_id = p_course_id and year_id =p_year_id and status='1' and student_id in(select student_id from tbl_student where status='1' and year_id !=p_year_id);
RETURN v_cnt;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_employeeName` (`p_employee_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_employee_name VARCHAR(250);

SELECT CONCAT(emp_firstname, ' ', emp_lastname)
INTO v_employee_name
FROM tbl_employees
WHERE emp_id = p_employee_id AND status = '0';

RETURN v_employee_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_feeAcademicyear` (`p_type_plan_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_year_name  VARCHAR(250);

							SELECT  year_id
                                             				 
							INTO 
												v_year_name
							FROM  
												`tbl_fee_type_plan`  

							WHERE
													type_plan_id =  p_type_plan_id 
                             LIMIT 0,1 ;



RETURN  v_year_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_feeTypeamount` (`p_fee_type_id` INT) RETURNS FLOAT NO SQL
BEGIN


DECLARE v_amount float;

SET v_amount = 0;

		SELECT
				SUM(IFNULL(amount,0))
        INTO
                    v_amount
		FROM
				tbl_fee_terms
        WHERE
                type_id =p_fee_type_id;


RETURN v_amount;


END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_feeTypeCode` (`p_type_plan_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN
DECLARE v_fee_code  VARCHAR(250);

                            SELECT 
                                                              ( SELECT 
                                                                                      fee_type_code
                                                                  FROM
                                                                                   tbl_fee_type f             
                                                                  WHERE
                                                                                      f.fee_type_id = tp.fee_type_id
                                                                  LIMIT 0, 1 )  as  fee_type_name
                            INTO 
                                                v_fee_code
                            FROM  
                                                `tbl_fee_type_plan` tp 

                            WHERE
                                                    type_plan_id =  p_type_plan_id 
                             LIMIT 0,1 ;



RETURN  v_fee_code;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_feeTypeName` (`p_type_plan_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_fee_name  VARCHAR(250);

							SELECT 
                                             				 ( SELECT 
                                                              						fee_type_name
                                                              	FROM
                                                                                   tbl_fee_type f             
                                                              	WHERE
                                                              						f.fee_type_id = tp.fee_type_id
                                                              	LIMIT 0, 1 )  as  fee_type_name
							INTO 
												v_fee_name
							FROM  
												`tbl_fee_type_plan` tp 

							WHERE
													type_plan_id =  p_type_plan_id 
                             LIMIT 0,1 ;



RETURN  v_fee_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_feeTypePrintName` (`p_type_plan_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_fee_name  VARCHAR(250);

							SELECT 
                                             				 ( SELECT 
                                                              						print_name
                                                              	FROM
                                                                                   tbl_fee_type f             
                                                              	WHERE
                                                              						f.fee_type_id = tp.fee_type_id
                                                              	LIMIT 0, 1 )  as  fee_type_name
							INTO 
												v_fee_name
							FROM  
												`tbl_fee_type_plan` tp 

							WHERE
													type_plan_id =  p_type_plan_id 
                             LIMIT 0,1 ;



RETURN  v_fee_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `GET_GENERALITEMNAME` (`p_item_id` INT) RETURNS VARCHAR(100) CHARSET utf8 NO SQL
BEGIN

DECLARE v_item_name varchar(100);

SELECT  
		item_name
INTO	
		v_item_name
FROM	
		tbl_general_items

WHERE	
		item_id = p_item_id ;


RETURN v_item_name;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_gradeName` (`p_grade_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_grade_name VARCHAR(250);
SELECT 
			grade_name
INTO 
			v_grade_name
FROM 
		tbl_grades
where 
	grade_id = p_grade_id;


RETURN v_grade_name;



END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_hostelName` (`p_hostel_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_hostel_name VARCHAR(250);

SELECT  
        hostel_name
INTO    
        v_hostel_name
FROM    
        tbl_hostel
WHERE   
        hostel_id = p_hostel_id;

RETURN v_hostel_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_newcoursestudents` (`p_course_id` INT, `p_year_id` INT) RETURNS INT(11) BEGIN
DECLARE v_cnt int(11);
select count(1) into v_cnt from tbl_student_academic where course_id=p_course_id and year_id =p_year_id and status='0' and promoted='0' 
and student_id  not in(select student_id from tbl_student_academic where year_id = 8 and status='0' and promoted='1');
RETURN v_cnt;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_parentName` (`p_parent_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_parent_name VARCHAR(250);

SELECT CONCAT(parent_firstname, ' ', parent_lastname)
INTO v_parent_name
FROM tbl_student_parents
WHERE parent_id = p_parent_id;

RETURN v_parent_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_promotedstudentcnt` (`p_course_id` INT, `p_year_id` INT) RETURNS INT(11) BEGIN
DECLARE v_cnt int;

SELECT 
    COUNT(1)
INTO v_cnt FROM
    tbl_student_academic
WHERE
    course_id = p_course_id
        AND year_id = p_year_id
        AND status = '0'
        AND promoted = '0'
        AND student_id IN (SELECT 
            student_id
        FROM
            tbl_student_academic
        WHERE
            status = '0' AND promoted = '1'
                AND year_id = 8) AND student_id not in (select student_id from tbl_student_academic where course_id=p_course_id  and year_id = 8 and status='0' and promoted='1');
RETURN v_cnt;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_QuestionsCount` (`p_exam_course_id` INT, `p_exam_id` INT) RETURNS INT(250) NO SQL
BEGIN

DECLARE v_qn_count INT(11);

SELECT count(exam_course_id) into v_qn_count  FROM tbl_questions where exam_id = p_exam_id AND status = '0' AND exam_course_id = p_exam_course_id;


RETURN v_qn_count;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_repeatstudents` (`p_course_id` INT, `p_year_id` INT) RETURNS INT(11) BEGIN
DECLARE v_cnt int(11);
SELECT count(1) into v_cnt from tbl_student_academic where year_id = p_year_id and course_id=p_course_id and promoted='0' and status='0' 
and student_id in (select student_id from tbl_student_academic where course_id=p_course_id  and year_id = 8 and status='0' and promoted='1');
RETURN v_cnt;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_schemeName` (`p_student_id` INT) RETURNS VARCHAR(150) CHARSET latin1 BEGIN
DECLARE v_scheme_name VARCHAR(150);
SELECT scheme_name into v_scheme_name from tbl_schemes where status='0' and scheme_id = (select scheme_id from tbl_student_schemes where student_id=p_student_id and status='0' limit 0,1);
IF v_scheme_name IS NULL THEN 
SELECT special_scheme_name into v_scheme_name from tbl_special_schemes where status='0' and special_scheme_id = (select special_scheme_id from tbl_student_spl_schemes where student_id=p_student_id and status='0' limit 0,1);
end if;
RETURN v_scheme_name;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `GET_SECTIONNAME` (`p_section_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_section_name VARCHAR(250);

SELECT  
		section_name
INTO	
		v_section_name
FROM	
		tbl_section
WHERE	
		section_id = p_section_id;

RETURN v_section_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_sequencenumber` () RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE incremented_number BIGINT UNSIGNED;
 UPDATE tbl_sequence SET number = ifnull(number,0) + 1;
        SELECT number INTO incremented_number
            FROM tbl_sequence;

RETURN incremented_number;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_set_name` (`p_set_id` INT(12)) RETURNS VARCHAR(150) CHARSET latin1 BEGIN
DECLARE v_set_name varchar(150);
SELECT set_name into v_set_name from tbl_exam_sets where set_id = p_set_id;
RETURN v_set_name;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_specialschemeName` (`p_scheme_id` INT) RETURNS VARCHAR(150) CHARSET latin1 BEGIN
DECLARE v_scheme_name VARCHAR(150);
SELECT scheme_name into v_scheme_name from tbl_special_schemes where scheme_id = p_scheme_id and status='0';
RETURN v_scheme_name;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_statename` (`p_state_id` INT(12)) RETURNS VARCHAR(150) CHARSET latin1 BEGIN
DECLARE v_state_name varchar(150);
SELECT state_name into v_state_name from tbl_state where state_id = p_state_id;
RETURN v_state_name;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_studentacademiccourse` (`p_student_id` INT, `p_year_id` INT) RETURNS VARCHAR(150) CHARSET latin1 NO SQL
BEGIN
DECLARE v_course_name VARCHAR(250);
DECLARE v_course_id int;
DECLARE v_section_name VARCHAR(250);
select sa.course_id into  v_course_id  from tbl_student_academic sa WHERE sa.student_id = p_student_id and sa.year_id = p_year_id and sa.promoted = 0;
select sc.section_name into  v_section_name  from tbl_section sc where sc.section_id =(select sa.section_id from tbl_student_academic sa WHERE sa.student_id = p_student_id and sa.year_id = p_year_id and sa.promoted = 0 limit 0,1);
SELECT concat(get_courseName(v_course_id),' &raquo; ',v_section_name) into v_course_name;

RETURN v_course_name;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_studentAttendance` (`p_Currentmont` VARCHAR(20), `p_student_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_text VARCHAR(50);

SET v_text = '';
SET v_text = ( SELECT COUNT(*) FROM  tbl_student_attendance WHERE  student_id = p_student_id AND 
                DATE_FORMAT(attendance_date,'%b %Y') = p_Currentmont AND attendance_flag ='P');

SET v_text = CONCAT(v_text,'/', (SELECT COUNT(*) FROM  tbl_student_attendance WHERE  student_id = p_student_id AND 
                DATE_FORMAT(attendance_date,'%b %Y') = p_Currentmont));


RETURN v_text;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_studentFeeDue` (`p_student_id` INT, `p_year_id` INT) RETURNS DOUBLE(10,2) NO SQL
BEGIN
DECLARE v_due_amount DOUBLE DEFAULT 0;
DECLARE v_total_amount DOUBLE DEFAULT 0;
DECLARE v_discount DOUBLE DEFAULT 0;
DECLARE v_paid DOUBLE DEFAULT 0;

SELECT SUM(amount) INTO v_total_amount
FROM tbl_fee_terms
WHERE type_id IN(SELECT fee_type_id 
				FROM tbl_fee_type_plan 
                WHERE type_plan_id IN (SELECT type_plan_id 
										FROM tbl_student_plan_type 
                                        WHERE student_id = p_student_id 
                                        AND year_id=p_year_id AND mode_flag = 'credit'
                                        AND status='0'));

SELECT SUM(discount_amount) INTO v_discount
FROM tbl_student_plan_type 
                                        WHERE student_id = p_student_id 
                                        AND year_id=p_year_id
                                        AND status='0';
                                        
SELECT SUM(amount) INTO v_paid
FROM tbl_fee_transactions
WHERE studnet_id=p_student_id 
AND type_plan_id IN (SELECT type_plan_id 
										FROM tbl_student_plan_type 
                                        WHERE student_id = p_student_id 
                                        AND year_id=p_year_id
                                        AND status='0')
AND status= '0';
                                        
SET v_due_amount = (v_total_amount-v_discount) - v_paid;

RETURN v_due_amount;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `GET_STUDENTNAME` (`p_student_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_student_name VARCHAR(250);

SELECT CONCAT(student_name, ' ', student_lastname)
INTO v_student_name
FROM tbl_student
WHERE student_id = p_student_id;

RETURN v_student_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_studentprimarycontact` (`p_student_id` INT) RETURNS INT(11) BEGIN
DECLARE v_primary_contact int(10);
SELECT relation_type into v_primary_contact From tbl_student_parents where student_id = p_student_id and primary_contact='1' LIMIT 0,1; 
RETURN v_primary_contact;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_studentSchmeDiscount` (`p_student_id` INT, `p_promote_course` INT, `p_type_id` INT, `p_year_id` INT) RETURNS DOUBLE(10,2) NO SQL
BEGIN
DECLARE v_discount FLOAT(10,2) DEFAULT 0;
DECLARE v_old_amount FLOAT(10,2) DEFAULT 0;
DECLARE v_new_amount FLOAT(10,2) DEFAULT 0;
DECLARE v_new_book_fee FLOAT(10,2) DEFAULT 0;
DECLARE v_scheme_book_fees FLOAT(10,2) DEFAULT 0;

DECLARE v_fee_categories VARCHAR(250) DEFAULT NULL;
DECLARE v_fee_type_code VARCHAR(250) DEFAULT NULL;

SELECT fee_type_code INTO v_fee_type_code FROM tbl_fee_type WHERE fee_type_id = p_type_id;

SELECT year_id INTO v_fee_categories
FROM tbl_schemes 
WHERE scheme_id IN(SELECT scheme_id FROM tbl_student_schemes WHERE student_id=p_student_id AND status !='9') AND FIND_IN_SET(v_fee_type_code, fee_categories);


IF v_fee_categories > 0 THEN 

SELECT SUM(amount) INTO v_new_amount
FROM tbl_fee_terms 
WHERE type_id=p_type_id
AND status='0';

SELECT SUM(amount) INTO v_old_amount
FROM tbl_fee_terms 
WHERE type_id = (SELECT fee_type_id 
					FROM tbl_fee_type 
                    WHERE fee_type_id IN (SELECT fee_type_id 
											FROM tbl_fee_type_plan 
                                            WHERE fee_plan_id IN(SELECT fee_plan_id 
																FROM tbl_fee_cource_plan 
                                                                WHERE cource_id = p_promote_course AND year_id=v_fee_categories))
AND fee_type_code = v_fee_type_code)
AND status = '0';
IF (v_fee_type_code = 'TF') THEN 
select bookfee_amount into v_new_book_fee from tbl_book_fees_2020 where  course_id = p_promote_course;
END IF;
END IF;

SET v_discount = v_new_amount - (v_old_amount+v_new_book_fee);

RETURN v_discount;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_studentSchmeDiscount1` (`p_student_id` INT, `p_promote_course` INT, `p_type_id` INT, `p_year_id` INT) RETURNS DOUBLE(10,2) NO SQL
BEGIN
DECLARE v_discount FLOAT(10,2) DEFAULT 0;
DECLARE v_old_amount FLOAT(10,2) DEFAULT 0;
DECLARE v_new_amount FLOAT(10,2) DEFAULT 0;
DECLARE v_fee_categories VARCHAR(250) DEFAULT NULL;
DECLARE v_fee_type_code VARCHAR(250) DEFAULT NULL;

SELECT fee_type_code INTO v_fee_type_code FROM tbl_fee_type WHERE fee_type_id = p_type_id;

SELECT year_id INTO v_fee_categories
FROM tbl_schemes 
WHERE scheme_id IN(SELECT scheme_id FROM tbl_student_schemes WHERE student_id=p_student_id AND status !='9') AND FIND_IN_SET(v_fee_type_code, fee_categories);


IF v_fee_categories > 0 THEN 

SELECT SUM(amount) INTO v_new_amount
FROM tbl_fee_terms 
WHERE type_id=p_type_id
AND status='0';

SELECT SUM(amount) INTO v_old_amount
FROM tbl_fee_terms 
WHERE type_id = (SELECT fee_type_id 
					FROM tbl_fee_type 
                    WHERE fee_type_id IN (SELECT fee_type_id 
											FROM tbl_fee_type_plan 
                                            WHERE fee_plan_id IN(SELECT fee_plan_id 
																FROM tbl_fee_cource_plan 
                                                                WHERE cource_id = p_promote_course AND year_id=v_fee_categories))
AND fee_type_code = v_fee_type_code)
AND status = '0';

END IF;

SET v_discount = v_new_amount - v_old_amount;
RETURN v_discount;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_studentSplSchmeDiscount` (`p_student_id` INT, `p_promote_course` INT, `p_type_id` INT, `p_year_id` INT, `p_fee_type_codes` VARCHAR(350)) RETURNS DOUBLE(10,2) NO SQL
BEGIN
DECLARE v_discount FLOAT(10,2) DEFAULT 0;
DECLARE v_old_amount FLOAT(10,2) DEFAULT 0;
DECLARE v_new_amount FLOAT(10,2) DEFAULT 0;
DECLARE v_new_book_fee FLOAT(10,2) DEFAULT 0;

DECLARE v_fee_categories VARCHAR(250) DEFAULT NULL;
DECLARE v_fee_type_code VARCHAR(250) DEFAULT NULL;
DECLARE v_spl_scheme_id VARCHAR(250) DEFAULT NULL;

SELECT 
    fee_type_code
INTO v_fee_type_code FROM
    tbl_fee_type
WHERE
    fee_type_id = p_type_id;

SELECT 
    year_id, special_scheme_id
INTO v_fee_categories , v_spl_scheme_id FROM
    tbl_special_schemes
WHERE
    special_scheme_id IN (SELECT 
            special_scheme_id
        FROM
            tbl_student_spl_schemes
        WHERE
            student_id = p_student_id)
        AND FIND_IN_SET(v_fee_type_code, p_fee_type_codes);


IF v_fee_categories > 0 THEN 

SELECT SUM(amount) INTO v_new_amount
FROM tbl_fee_terms 
WHERE type_id=p_type_id
AND status='0';

SELECT 
    SUM(amount)
INTO v_old_amount FROM
    tbl_fee_terms
WHERE
    type_id = (SELECT 
            fee_type_id
        FROM
            tbl_fee_type
        WHERE
            fee_type_id IN (SELECT 
                    fee_type_id
                FROM
                    tbl_fee_type_plan
                WHERE
                    fee_plan_id IN (SELECT 
                            fee_plan_id
                        FROM
                            tbl_fee_cource_plan
                        WHERE
                            cource_id = p_promote_course
                                AND year_id = v_fee_categories
                                AND fee_plan_id IN (SELECT 
                                    fee_plan_id
                                FROM
                                    tbl_scheme_plans
                                WHERE
                                    special_scheme_id = v_spl_scheme_id)))
                AND fee_type_code = v_fee_type_code)
        AND status = '0';
IF (v_fee_type_code = 'TF' and v_fee_categories!='8')  THEN
select bookfee_amount into v_new_book_fee from tbl_book_fees_2020 where  course_id = p_promote_course;
END IF;
END IF;

SET v_discount = v_new_amount - (v_old_amount+v_new_book_fee);
RETURN v_discount;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_studentSplSchmeDiscount123` (`p_student_id` INT, `p_promote_course` INT, `p_type_id` INT, `p_year_id` INT, `p_fee_type_codes` VARCHAR(350)) RETURNS DOUBLE(10,2) NO SQL
BEGIN
DECLARE v_discount FLOAT(10,2) DEFAULT 0;
DECLARE v_old_amount FLOAT(10,2) DEFAULT 0;
DECLARE v_new_amount FLOAT(10,2) DEFAULT 0;
DECLARE v_fee_categories VARCHAR(250) DEFAULT NULL;
DECLARE v_fee_type_code VARCHAR(250) DEFAULT NULL;
DECLARE v_spl_scheme_id VARCHAR(250) DEFAULT NULL;

SELECT fee_type_code INTO v_fee_type_code FROM tbl_fee_type WHERE fee_type_id = p_type_id;

SELECT year_id,special_scheme_id INTO v_fee_categories, v_spl_scheme_id 
FROM tbl_special_schemes 
WHERE special_scheme_id IN(SELECT special_scheme_id FROM tbl_student_spl_schemes WHERE student_id=p_student_id) AND FIND_IN_SET(v_fee_type_code, p_fee_type_codes);


IF v_fee_categories > 0 THEN 

SELECT SUM(amount) INTO v_new_amount
FROM tbl_fee_terms 
WHERE type_id=p_type_id
AND status='0';

SELECT SUM(amount) INTO v_old_amount
FROM tbl_fee_terms 
WHERE type_id = (SELECT fee_type_id 
FROM tbl_fee_type 
                   WHERE fee_type_id IN (SELECT fee_type_id 
FROM tbl_fee_type_plan 
                                           WHERE fee_plan_id IN(SELECT fee_plan_id 
FROM tbl_fee_cource_plan 
                                                               WHERE cource_id = p_promote_course AND year_id=v_fee_categories AND fee_plan_id IN(SELECT fee_plan_id       
                                                                                                                                                  FROM tbl_scheme_plans WHERE special_scheme_id=v_spl_scheme_id))) 
AND fee_type_code = v_fee_type_code)
AND status = '0';

END IF;

SET v_discount = v_new_amount - v_old_amount;
RETURN v_discount;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_student_admission_class` (`p_student_admission_no` INT) RETURNS VARCHAR(150) CHARSET latin1 NO SQL
BEGIN

DECLARE v_classname varchar(150);
DECLARE v_course_id INT;
SELECT get_courseName(course_id)  into v_classname from tbl_student_academic where admission_number = p_student_admission_no  and year_id =(SELECT year_id from tbl_student where admission_number = p_student_admission_no and status='0' LIMIT 0,1) and status='0' limit 0,1;
RETURN v_classname;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_student_admission_year` (`p_student_admission_no` INT) RETURNS VARCHAR(150) CHARSET latin1 BEGIN

DECLARE v_yearname varchar(150);
SELECT get_yearName(year_id) into v_yearname from tbl_student where admission_number = p_student_admission_no LIMIT 0,1;
RETURN v_yearname;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_subjectName` (`p_subject_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_subject_name VARCHAR(250);

SELECT  
		subject_name
INTO	
		v_subject_name
FROM	
		tbl_subjects
WHERE	
		subject_id = p_subject_id;

RETURN v_subject_name;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_S_F_concession` (`p_type_plan_id` INT, `p_total_amount` FLOAT, `p_student_id` INT, `p_brach_id` INT, `p_year_id` INT) RETURNS FLOAT NO SQL
BEGIN

DECLARE v_amount float;

SET v_amount = 0;

SELECT



SUM( ( p_total_amount * ( SELECT 
                         IFNULL(percentage,0) 
                         FROM 
                         tbl_fee_concession c 
                         WHERE 
                         c.concession_id = sp.concession_id 
                         LIMIT 0,1 )
     )/100)

INTO
v_amount
FROM
tbl_student_plan_type sp
WHERE
type_plan_id =p_type_plan_id
AND
student_id = p_student_id 
AND 
branch_id = p_brach_id 
AND 
year_id = p_year_id
AND
status ='0'
AND
mode_flag = 'debit';


		

RETURN v_amount;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_S_F_discount` (`p_type_plan_id` INT, `p_student_id` INT, `p_brach_id` INT, `p_year_id` INT) RETURNS FLOAT NO SQL
BEGIN
DECLARE v_amount float;
SET v_amount = 0;

SELECT
SUM( IFNULL(discount_amount,0))


INTO
v_amount
FROM
tbl_student_plan_type sp
WHERE
type_plan_id =p_type_plan_id
AND
student_id = p_student_id 
AND 
branch_id = p_brach_id 
AND 
year_id = p_year_id
AND
status ='0'
AND
mode_flag = 'debit';




RETURN v_amount;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_termsserialize` (`p_type_id` INT, `p_student_id` INT, `p_type_plan_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN

DECLARE v_type_id INT;
DECLARE v_terms_serialize varchar(250);


SET  v_terms_serialize = ' ';


SELECT
type_id,
GROUP_CONCAT( CONCAT( terms_id,  ':', ifnull(DATE_FORMAT(due_date,'%d %b %Y'),'terms'),  ':', amount,  ':', paid_amount,':',discount  ) order by terms_id SEPARATOR  ';' ) terms
INTO
v_type_id,
v_terms_serialize
FROM (
SELECT
type_id,
                   terms_id,
                   due_date,
amount,
                   (SELECT ifnull(sum(amount),0) FROM tbl_fee_transactions ft where ft.studnet_id = p_student_id and ft.type_plan_id =p_type_plan_id and ft.terms_id = tr.terms_id AND ft.status='0')
                   paid_amount,
                   ifnull(term_due(type_id,terms_id,ifnull(get_S_F_discount(p_type_plan_id,p_student_id,tr.branch_id,tr.year_id),0),amount),0) as discount
FROM
tbl_fee_terms tr
WHERE
type_id = p_type_id order by terms_id) a
group by  type_id order by type_id ASC
LIMIT 0,1;



RETURN  v_terms_serialize;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_totalPending` (`p_student_id` INT, `p_type_plan_id` INT, `p_transaction_date` DATETIME) RETURNS FLOAT BEGIN
	DECLARE v_fee_amount float;
    DECLARE v_dis_amount float;
    declare v_paid_amount float;
    declare v_pending_amount float;
	SET v_fee_amount = 0;
    SET v_dis_amount = 0;
    SET v_paid_amount = 0;
    set v_pending_amount = 0;
    SELECT
				SUM(IFNULL(amount,0))
        INTO
                    v_fee_amount
		FROM
				tbl_fee_terms
        WHERE
                type_id in (SELECT ftp.fee_type_id FROM tbl_fee_type_plan ftp where ftp.type_plan_id = p_type_plan_id);
    select 
			IFNULL(discount_amount,0) INTO v_dis_amount  
        
		from tbl_student_plan_type 
    
		where status='0' 
    
		AND type_plan_id=p_type_plan_id 
    
		AND mode_flag='debit' AND student_id = p_student_id;            
	
    select 
			IFNULL(sum(amount),0) into v_paid_amount 
		from tbl_fee_transactions ft 
    
		where status='0' 
    
		AND ft.studnet_id = p_student_id 
    
		AND ft.type_plan_id=p_type_plan_id 
    
		AND date(ft.transaction_date) <= date(p_transaction_date); 
	SET v_pending_amount = (v_fee_amount-v_dis_amount-v_paid_amount);
    
RETURN v_pending_amount;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `get_yearName` (`p_year_id` INT) RETURNS VARCHAR(250) CHARSET latin1 NO SQL
BEGIN
DECLARE v_year_name VARCHAR(250);

SELECT year_name INTO v_year_name FROM `tbl_academic_years` WHERE year_id=p_year_id;

RETURN v_year_name;

END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `sp_temp_due` (`p_s` INT, `p_d` FLOAT, `p_Sif` INT, `term` FLOAT) RETURNS FLOAT BEGIN

Declare v_out float;
Declare v_balance float;
declare v_cnt  int;
declare v_pln int;


SELECT d ,Sif,s into v_balance,v_cnt,v_pln FROM tbl_temp_current_due where s= p_s and Sif= p_sif limit 0,1;
  
  SET SQL_SAFE_UPDATES = 0;
  if (v_cnt <> p_Sif ) or (v_pln <> p_s)  THEN
  
	SET v_balance = p_d;
    SET v_out = 1;   
        insert into  tbl_temp_current_due values(1,0,1);
  
  ELSE
		SET v_out = 0;        
        Update tbl_temp_current_due set S= p_s,Sif= p_sif,D=1; 
        
  END if;
  


RETURN v_out;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `termposition` (`p_termsid` INT, `p_type_plan_id` INT) RETURNS VARCHAR(50) CHARSET latin1 BEGIN

DECLARE v_typeid int default 0;
DECLARE v_result varchar(100);
SET v_result = '';
SELECT  fee_type_id INTO v_typeid  FROM tbl_fee_type_plan tp WHERE tp.type_plan_id  = p_type_plan_id;


SELECT  IFNULL(GROUP_CONCAT( ': -'  SEPARATOR ';'),'')  into v_result FROM tbl_fee_terms where terms_id < p_termsid and type_id = v_typeid;

SELECT IF ( v_result = '' , '', CONCAT( v_result ,';') ) into  v_result;

RETURN v_result;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `term_due` (`p_typeid` INT, `p_termid` INT, `p_d` FLOAT, `term` FLOAT) RETURNS FLOAT BEGIN

Declare v_cbalance float;
DECLARE V_Due Float;

declare V_cnt int;

SET V_Due = 0;

SET v_cbalance =0;

SELECT count(amount) , sum(ifnull(amount,0)) into V_cnt, v_cbalance FROM tbl_fee_terms where type_id  = p_typeid and terms_id > p_termid;


if(V_cnt = 0 ) THEN
SET v_cbalance =0;
END IF;

SELECT  (CASE WHEN v_cbalance >= p_d THEN 0 
        WHEN  term >= ( p_d - v_cbalance) THEN ( p_d - v_cbalance) ELSE term end) INto V_Due;
        

RETURN V_Due;
END$$

DELIMITER ;

-- --------------------------------------------------------

--
-- Table structure for table `tbl_course`
--

CREATE TABLE `tbl_course` (
  `course_id` int(11) NOT NULL,
  `branch_id` int(11) NOT NULL,
  `course_name` varchar(100) NOT NULL,
  `course_code` varchar(50) NOT NULL,
  `course_status` enum('0','1','9') NOT NULL,
  `active_status` enum('0','1') NOT NULL,
  `created_date` datetime NOT NULL,
  `created_by` int(11) NOT NULL,
  `modified_date` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_course`
--

INSERT INTO `tbl_course` (`course_id`, `branch_id`, `course_name`, `course_code`, `course_status`, `active_status`, `created_date`, `created_by`, `modified_date`, `modified_by`) VALUES
(1, 1, 'Play School', '69', '0', '0', '2014-04-12 03:36:31', 1, '0000-00-00 00:00:00', 1),
(2, 1, 'Nursery', '79', '0', '0', '2014-04-12 03:36:57', 1, '0000-00-00 00:00:00', 1),
(3, 1, 'PP1', '89', '0', '0', '2014-04-12 03:37:50', 1, '0000-00-00 00:00:00', 1),
(4, 1, 'PP2', '99', '0', '0', '2014-04-12 03:38:15', 1, '0000-00-00 00:00:00', 1),
(5, 1, 'Class 1', '01', '0', '0', '2014-04-12 03:38:43', 1, '0000-00-00 00:00:00', 1),
(6, 1, 'Class 2', '02', '0', '0', '2014-04-12 03:39:19', 1, '0000-00-00 00:00:00', 1),
(7, 1, 'Class 3', '03', '0', '0', '2014-04-12 03:40:23', 1, '0000-00-00 00:00:00', 1),
(8, 1, 'Class 4', '04', '0', '0', '2014-04-12 03:40:57', 1, '0000-00-00 00:00:00', 1),
(9, 1, 'Class 5', '05', '0', '0', '2014-04-12 03:41:20', 1, '0000-00-00 00:00:00', 1),
(10, 1, 'Class 6', '06', '0', '0', '2014-04-12 03:41:42', 1, '0000-00-00 00:00:00', 1),
(11, 1, 'Class 7', '07', '0', '0', '2014-04-12 03:42:12', 1, '0000-00-00 00:00:00', 1),
(12, 1, 'Class 8', '08', '0', '0', '2014-04-12 03:42:33', 1, '0000-00-00 00:00:00', 1),
(13, 1, 'Class 9', '09', '0', '0', '2014-04-12 03:42:55', 1, '0000-00-00 00:00:00', 1),
(14, 1, 'Class 10', '10', '0', '0', '2014-04-12 03:43:17', 1, '0000-00-00 00:00:00', 1);

-- --------------------------------------------------------

--
-- Table structure for table `tbl_section`
--

CREATE TABLE `tbl_section` (
  `section_id` int(11) NOT NULL,
  `section_name` varchar(100) NOT NULL,
  `course_id` int(11) NOT NULL,
  `academic_course_id` int(11) DEFAULT NULL,
  `branch_id` tinyint(4) NOT NULL,
  `year_id` tinyint(4) NOT NULL,
  `status` enum('0','1') NOT NULL,
  `section_code` varchar(15) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `tbl_student`
--

CREATE TABLE `tbl_student` (
  `student_id` int(11) NOT NULL,
  `admission_number` varchar(50) NOT NULL,
  `student_number` int(11) DEFAULT NULL,
  `student_name` varchar(250) NOT NULL,
  `student_middlename` varchar(250) DEFAULT NULL,
  `student_lastname` varchar(250) DEFAULT NULL,
  `family_doctor` varchar(250) DEFAULT NULL,
  `doctor_mobile` varchar(250) DEFAULT NULL,
  `gender` enum('Male','Female') NOT NULL,
  `student_dob` date NOT NULL,
  `place_birth` varchar(250) DEFAULT NULL,
  `student_email` varchar(250) DEFAULT NULL,
  `address` varchar(250) DEFAULT NULL,
  `landmark` varchar(250) DEFAULT NULL,
  `area_id` int(11) NOT NULL,
  `city_id` int(11) NOT NULL,
  `state_id` int(11) NOT NULL,
  `country_id` int(11) NOT NULL,
  `pincode` varchar(250) DEFAULT NULL,
  `present_landmark` varchar(250) DEFAULT NULL,
  `present_address` varchar(250) DEFAULT NULL,
  `present_area_id` int(11) DEFAULT NULL,
  `present_city_id` int(11) DEFAULT NULL,
  `present_state_id` int(11) DEFAULT NULL,
  `present_country_id` int(11) DEFAULT NULL,
  `present_pincode` varchar(250) DEFAULT NULL,
  `blood_group` varchar(250) DEFAULT NULL,
  `moleidentity1` varchar(250) DEFAULT NULL,
  `moleidentity2` varchar(250) DEFAULT NULL,
  `religion_id` int(11) DEFAULT NULL,
  `cast_id` int(11) DEFAULT NULL,
  `subcast_id` int(11) DEFAULT NULL,
  `nationality_id` int(11) DEFAULT NULL,
  `mother_tongue` int(11) DEFAULT NULL,
  `referred_by` int(11) DEFAULT NULL,
  `referred_name` varchar(250) DEFAULT NULL,
  `previous_school` varchar(250) DEFAULT NULL,
  `application_id` int(11) DEFAULT NULL,
  `enquery_id` int(11) DEFAULT NULL,
  `branch_id` int(11) NOT NULL,
  `year_id` int(11) NOT NULL,
  `status` enum('0','1','9') NOT NULL,
  `created_by` int(11) NOT NULL,
  `created_date` datetime NOT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `aadhar_number` varchar(50) DEFAULT NULL,
  `school_admission_number` varchar(250) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `tbl_student_academic`
--

CREATE TABLE `tbl_student_academic` (
  `student_academic_id` int(11) NOT NULL,
  `branch_id` int(11) NOT NULL,
  `year_id` int(11) NOT NULL,
  `admission_number` varchar(50) NOT NULL,
  `student_id` int(11) NOT NULL,
  `roll_number` int(11) DEFAULT NULL,
  `course_id` int(11) NOT NULL,
  `section_id` int(11) DEFAULT NULL,
  `second_language_id` int(11) DEFAULT NULL,
  `third_language_id` int(11) DEFAULT NULL,
  `category_id` int(11) DEFAULT NULL,
  `quota_id` int(11) DEFAULT NULL,
  `daycare_id` int(11) DEFAULT NULL,
  `studnet_photo` varchar(250) DEFAULT NULL,
  `status` enum('0','1','9') DEFAULT NULL,
  `created_by` int(11) NOT NULL,
  `created_date` datetime NOT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `house_id` int(11) DEFAULT NULL,
  `inactive_reason` text,
  `promoted` int(11) DEFAULT '0',
  `sibling_student` int(11) DEFAULT NULL,
  `sibling_type` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `tbl_student_parents`
--

CREATE TABLE `tbl_student_parents` (
  `parent_id` int(11) NOT NULL,
  `application_id` int(11) NOT NULL,
  `student_id` int(11) DEFAULT NULL,
  `parent_firstname` varchar(250) DEFAULT NULL,
  `parent_middlename` varchar(250) DEFAULT NULL,
  `parent_lastname` varchar(250) DEFAULT NULL,
  `parent_dob` date DEFAULT NULL,
  `parent_nationality` int(11) DEFAULT NULL,
  `parent_qualification` int(11) DEFAULT NULL,
  `parent_designation` varchar(250) DEFAULT NULL,
  `parent_company` varchar(250) DEFAULT NULL,
  `parent_address` varchar(250) DEFAULT NULL,
  `parent_occupation` varchar(250) DEFAULT NULL,
  `parent_office_number` varchar(50) DEFAULT NULL,
  `parent_mobile_number` varchar(20) DEFAULT NULL,
  `parent_email_id` varchar(250) DEFAULT NULL,
  `relation_type` varchar(250) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `primary_contact` varchar(50) DEFAULT NULL,
  `country_id` int(11) DEFAULT NULL,
  `city_id` int(11) DEFAULT NULL,
  `area_id` int(11) DEFAULT NULL,
  `address` varchar(250) DEFAULT NULL,
  `landmark` varchar(250) DEFAULT NULL,
  `state_id` int(11) DEFAULT NULL,
  `pincode` varchar(25) DEFAULT NULL,
  `id_proof_type` int(11) DEFAULT NULL,
  `id_proof_number` varchar(250) DEFAULT NULL,
  `status` enum('0','1') NOT NULL DEFAULT '0',
  `created_by` int(11) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `parent_photo` varchar(250) DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `aadhar_number` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `tbl_users`
--

CREATE TABLE `tbl_users` (
  `user_id` int(11) NOT NULL,
  `branch_id` int(11) NOT NULL,
  `year_id` int(11) DEFAULT NULL,
  `role_id` int(11) NOT NULL,
  `user_name` varchar(250) NOT NULL,
  `login_id` varchar(250) DEFAULT NULL,
  `user_password` varchar(250) NOT NULL,
  `user_email` varchar(100) NOT NULL,
  `user_status` enum('0','1','2','3','9') NOT NULL,
  `user_photo` varchar(250) DEFAULT NULL,
  `lost_login` datetime DEFAULT NULL,
  `Attempts` int(11) DEFAULT '0',
  `password1` varchar(250) DEFAULT NULL,
  `password_chg_date` datetime DEFAULT NULL,
  `password2` varchar(250) DEFAULT NULL,
  `password3` varchar(250) DEFAULT NULL,
  `password4` varchar(250) DEFAULT NULL,
  `created_date` datetime NOT NULL,
  `created_by` int(11) NOT NULL,
  `modified_date` datetime DEFAULT NULL,
  `modified_by` int(11) DEFAULT NULL,
  `parent_id` int(11) DEFAULT NULL,
  `emp_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_users`
--

INSERT INTO `tbl_users` (`user_id`, `branch_id`, `year_id`, `role_id`, `user_name`, `login_id`, `user_password`, `user_email`, `user_status`, `user_photo`, `lost_login`, `Attempts`, `password1`, `password_chg_date`, `password2`, `password3`, `password4`, `created_date`, `created_by`, `modified_date`, `modified_by`, `parent_id`, `emp_id`) VALUES
(1, 1, 1, 1, 'Admin', 'admin@siriinnovations.com', 'üõüec9…(5‰®Á5', 'admin@siriinnovations.com', '0', '', '2019-12-03 00:00:00', 0, '0', '2021-03-18 13:57:50', '0', '', '0', '2016-09-28 00:00:00', 1, '2017-02-15 10:33:32', 1, NULL, NULL);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `tbl_course`
--
ALTER TABLE `tbl_course`
  ADD PRIMARY KEY (`course_id`),
  ADD KEY `course_status` (`course_status`),
  ADD KEY `branch_id` (`branch_id`),
  ADD KEY `course_name` (`course_name`);

--
-- Indexes for table `tbl_section`
--
ALTER TABLE `tbl_section`
  ADD PRIMARY KEY (`section_id`);

--
-- Indexes for table `tbl_student`
--
ALTER TABLE `tbl_student`
  ADD PRIMARY KEY (`student_id`),
  ADD KEY `branchid` (`branch_id`),
  ADD KEY `status` (`status`),
  ADD KEY `createddate` (`created_date`);

--
-- Indexes for table `tbl_student_academic`
--
ALTER TABLE `tbl_student_academic`
  ADD PRIMARY KEY (`student_academic_id`),
  ADD KEY `yearid` (`year_id`),
  ADD KEY `studentid` (`student_id`),
  ADD KEY `status` (`status`);

--
-- Indexes for table `tbl_student_parents`
--
ALTER TABLE `tbl_student_parents`
  ADD PRIMARY KEY (`parent_id`),
  ADD KEY `applicationid` (`application_id`),
  ADD KEY `relationType` (`relation_type`),
  ADD KEY `studentid` (`student_id`);

--
-- Indexes for table `tbl_users`
--
ALTER TABLE `tbl_users`
  ADD PRIMARY KEY (`user_id`),
  ADD UNIQUE KEY `login_id` (`login_id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `tbl_course`
--
ALTER TABLE `tbl_course`
  MODIFY `course_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=15;
--
-- AUTO_INCREMENT for table `tbl_section`
--
ALTER TABLE `tbl_section`
  MODIFY `section_id` int(11) NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `tbl_student`
--
ALTER TABLE `tbl_student`
  MODIFY `student_id` int(11) NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `tbl_student_academic`
--
ALTER TABLE `tbl_student_academic`
  MODIFY `student_academic_id` int(11) NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `tbl_student_parents`
--
ALTER TABLE `tbl_student_parents`
  MODIFY `parent_id` int(11) NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `tbl_users`
--
ALTER TABLE `tbl_users`
  MODIFY `user_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
